
TeslaMidiInterupter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d688  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  0800d828  0800d828  0001d828  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800daa0  0800daa0  00020168  2**0
                  CONTENTS
  4 .ARM          00000008  0800daa0  0800daa0  0001daa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800daa8  0800daa8  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800daa8  0800daa8  0001daa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800daac  0800daac  0001daac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  0800dab0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000216c  20000168  0800dc18  00020168  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200022d4  0800dc18  000222d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015c6a  00000000  00000000  000201db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d5b  00000000  00000000  00035e45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001460  00000000  00000000  00039ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f72  00000000  00000000  0003b000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ae14  00000000  00000000  0003bf72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018cdf  00000000  00000000  00056d86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092bf9  00000000  00000000  0006fa65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000620c  00000000  00000000  00102660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0010886c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000168 	.word	0x20000168
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d810 	.word	0x0800d810

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000016c 	.word	0x2000016c
 80001dc:	0800d810 	.word	0x0800d810

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	0000      	movs	r0, r0
	...

08000f48 <getVelocityAdjustedOnDuration>:
/*
 * Midi commands refer to a velocity to define a volume,
 * we scale the output actual pulse time, to the maximum defined
 * by the user
 */
uint32_t getVelocityAdjustedOnDuration (uint8_t velocity,uint32_t f_dur){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	6039      	str	r1, [r7, #0]
 8000f52:	71fb      	strb	r3, [r7, #7]
	float factor = velocity/MAX_VELOCITY;
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff faec 	bl	8000534 <__aeabi_i2d>
 8000f5c:	a318      	add	r3, pc, #96	; (adr r3, 8000fc0 <getVelocityAdjustedOnDuration+0x78>)
 8000f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f62:	f7ff fc7b 	bl	800085c <__aeabi_ddiv>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f7ff fe1b 	bl	8000ba8 <__aeabi_d2f>
 8000f72:	4603      	mov	r3, r0
 8000f74:	60fb      	str	r3, [r7, #12]
	if(factor>0&&factor<=1){
 8000f76:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f82:	dd18      	ble.n	8000fb6 <getVelocityAdjustedOnDuration+0x6e>
 8000f84:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f94:	d80f      	bhi.n	8000fb6 <getVelocityAdjustedOnDuration+0x6e>

		uint32_t fireDuration = (uint32_t)(factor*f_dur);
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	ee07 3a90 	vmov	s15, r3
 8000f9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fa0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fac:	ee17 3a90 	vmov	r3, s15
 8000fb0:	60bb      	str	r3, [r7, #8]
		return fireDuration;
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	e000      	b.n	8000fb8 <getVelocityAdjustedOnDuration+0x70>
	}else {return 0;}
 8000fb6:	2300      	movs	r3, #0

}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	00000000 	.word	0x00000000
 8000fc4:	405fc000 	.word	0x405fc000

08000fc8 <setCHAActivePeriod>:
void setCHAActivePeriod(float tDelay_us)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	ed87 0a01 	vstr	s0, [r7, #4]
	if(tDelay_us<MAX_TIM3_PERIOD_US){
 8000fd2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fd6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800100c <setCHAActivePeriod+0x44>
 8000fda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe2:	d400      	bmi.n	8000fe6 <setCHAActivePeriod+0x1e>
		fire_duration_CHA = (uint32_t)((tDelay_us)* (TIM3_delayuSGain));
	}
}
 8000fe4:	e00b      	b.n	8000ffe <setCHAActivePeriod+0x36>
		fire_duration_CHA = (uint32_t)((tDelay_us)* (TIM3_delayuSGain));
 8000fe6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fea:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001010 <setCHAActivePeriod+0x48>
 8000fee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ff2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ff6:	ee17 2a90 	vmov	r2, s15
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <setCHAActivePeriod+0x4c>)
 8000ffc:	601a      	str	r2, [r3, #0]
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	442a8000 	.word	0x442a8000
 8001010:	42400000 	.word	0x42400000
 8001014:	200001b0 	.word	0x200001b0

08001018 <setCHADwellPeriod>:
void setCHADwellPeriod(float tDelay_us)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	ed87 0a01 	vstr	s0, [r7, #4]
	if(tDelay_us<MAX_TIM3_PERIOD_US){
 8001022:	edd7 7a01 	vldr	s15, [r7, #4]
 8001026:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800105c <setCHADwellPeriod+0x44>
 800102a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800102e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001032:	d400      	bmi.n	8001036 <setCHADwellPeriod+0x1e>
		dwell_duration_CHA = (uint32_t)(tDelay_us * TIM3_delayuSGain);
	}
}
 8001034:	e00b      	b.n	800104e <setCHADwellPeriod+0x36>
		dwell_duration_CHA = (uint32_t)(tDelay_us * TIM3_delayuSGain);
 8001036:	edd7 7a01 	vldr	s15, [r7, #4]
 800103a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001060 <setCHADwellPeriod+0x48>
 800103e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001042:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001046:	ee17 2a90 	vmov	r2, s15
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <setCHADwellPeriod+0x4c>)
 800104c:	601a      	str	r2, [r3, #0]
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	442a8000 	.word	0x442a8000
 8001060:	42400000 	.word	0x42400000
 8001064:	200001b4 	.word	0x200001b4

08001068 <setCHBActivePeriod>:

void setCHBActivePeriod(float tDelay_us)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	ed87 0a01 	vstr	s0, [r7, #4]
	if(tDelay_us<MAX_TIM4_PERIOD_US){
 8001072:	edd7 7a01 	vldr	s15, [r7, #4]
 8001076:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80010ac <setCHBActivePeriod+0x44>
 800107a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800107e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001082:	d400      	bmi.n	8001086 <setCHBActivePeriod+0x1e>
		fire_duration_CHB = (uint32_t)((tDelay_us)* (TIM4_delayuSGain));
	}
}
 8001084:	e00b      	b.n	800109e <setCHBActivePeriod+0x36>
		fire_duration_CHB = (uint32_t)((tDelay_us)* (TIM4_delayuSGain));
 8001086:	edd7 7a01 	vldr	s15, [r7, #4]
 800108a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80010b0 <setCHBActivePeriod+0x48>
 800108e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001092:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001096:	ee17 2a90 	vmov	r2, s15
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <setCHBActivePeriod+0x4c>)
 800109c:	601a      	str	r2, [r3, #0]
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	442a8000 	.word	0x442a8000
 80010b0:	42400000 	.word	0x42400000
 80010b4:	200001bc 	.word	0x200001bc

080010b8 <setCHBDwellPeriod>:
void setCHBDwellPeriod(float tDelay_us)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	ed87 0a01 	vstr	s0, [r7, #4]
	if(tDelay_us<MAX_TIM4_PERIOD_US){
 80010c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80010c6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80010fc <setCHBDwellPeriod+0x44>
 80010ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d2:	d400      	bmi.n	80010d6 <setCHBDwellPeriod+0x1e>
		dwell_duration_CHB = (uint32_t)(tDelay_us * TIM4_delayuSGain);
	}
}
 80010d4:	e00b      	b.n	80010ee <setCHBDwellPeriod+0x36>
		dwell_duration_CHB = (uint32_t)(tDelay_us * TIM4_delayuSGain);
 80010d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010da:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001100 <setCHBDwellPeriod+0x48>
 80010de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010e6:	ee17 2a90 	vmov	r2, s15
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <setCHBDwellPeriod+0x4c>)
 80010ec:	601a      	str	r2, [r3, #0]
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	442a8000 	.word	0x442a8000
 8001100:	42400000 	.word	0x42400000
 8001104:	200001b8 	.word	0x200001b8

08001108 <fireTIM3>:

void fireTIM3(uint8_t velocity)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
	dwell_block_CHA=CH_FIRE;//Block any further firing commands.
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <fireTIM3+0x44>)
 8001114:	2201      	movs	r2, #1
 8001116:	701a      	strb	r2, [r3, #0]

	uint32_t fireDuration = getVelocityAdjustedOnDuration(velocity, fire_duration_CHA);
 8001118:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <fireTIM3+0x48>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	4611      	mov	r1, r2
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff11 	bl	8000f48 <getVelocityAdjustedOnDuration>
 8001126:	60f8      	str	r0, [r7, #12]

	TIM3->ARR = fireDuration + dwell_duration_CHA;//Set the total time period
 8001128:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <fireTIM3+0x4c>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	490a      	ldr	r1, [pc, #40]	; (8001158 <fireTIM3+0x50>)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	4413      	add	r3, r2
 8001132:	62cb      	str	r3, [r1, #44]	; 0x2c
	TIM3->CCR1 = fireDuration;//Set the period of on time
 8001134:	4a08      	ldr	r2, [pc, #32]	; (8001158 <fireTIM3+0x50>)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 800113a:	2100      	movs	r1, #0
 800113c:	4807      	ldr	r0, [pc, #28]	; (800115c <fireTIM3+0x54>)
 800113e:	f005 f8c5 	bl	80062cc <HAL_TIM_PWM_Start_IT>
}
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	200001c0 	.word	0x200001c0
 8001150:	200001b0 	.word	0x200001b0
 8001154:	200001b4 	.word	0x200001b4
 8001158:	40000400 	.word	0x40000400
 800115c:	20000348 	.word	0x20000348

08001160 <fireTIM4>:

void fireTIM4(uint8_t velocity)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
	dwell_block_CHB=CH_FIRE;//Block any further firing commands.
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <fireTIM4+0x44>)
 800116c:	2201      	movs	r2, #1
 800116e:	701a      	strb	r2, [r3, #0]

	uint32_t fireDuration_B = getVelocityAdjustedOnDuration(velocity, fire_duration_CHB);
 8001170:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <fireTIM4+0x48>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	4611      	mov	r1, r2
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff fee5 	bl	8000f48 <getVelocityAdjustedOnDuration>
 800117e:	60f8      	str	r0, [r7, #12]

	TIM4->ARR = fireDuration_B + dwell_duration_CHB;//Set the total time period
 8001180:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <fireTIM4+0x4c>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	490a      	ldr	r1, [pc, #40]	; (80011b0 <fireTIM4+0x50>)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	4413      	add	r3, r2
 800118a:	62cb      	str	r3, [r1, #44]	; 0x2c
	TIM4->CCR3 = fireDuration_B;//Set the period of on time//Channel 3
 800118c:	4a08      	ldr	r2, [pc, #32]	; (80011b0 <fireTIM4+0x50>)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	63d3      	str	r3, [r2, #60]	; 0x3c
	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_3);
 8001192:	2108      	movs	r1, #8
 8001194:	4807      	ldr	r0, [pc, #28]	; (80011b4 <fireTIM4+0x54>)
 8001196:	f005 f899 	bl	80062cc <HAL_TIM_PWM_Start_IT>
}
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200001c1 	.word	0x200001c1
 80011a8:	200001bc 	.word	0x200001bc
 80011ac:	200001b8 	.word	0x200001b8
 80011b0:	40000800 	.word	0x40000800
 80011b4:	20000390 	.word	0x20000390

080011b8 <fireCHA>:
void fireCHA(uint8_t chNo){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
	//Choose the velocity based on the channel number.
	uint8_t velocity = chA1Velocity;
 80011c2:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <fireCHA+0x44>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	73fb      	strb	r3, [r7, #15]
	if(chNo == 2)
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d102      	bne.n	80011d4 <fireCHA+0x1c>
	{
		velocity = chA2Velocity;
 80011ce:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <fireCHA+0x48>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	73fb      	strb	r3, [r7, #15]
	}
	//Make sure the user wants to fire
	if(isFiringActiveCHA()){
 80011d4:	f000 f9b2 	bl	800153c <isFiringActiveCHA>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d00a      	beq.n	80011f4 <fireCHA+0x3c>
		//Ensure we arent in a dwell time
		if(dwell_block_CHA == CH_FREE&&velocity!=0){
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <fireCHA+0x4c>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d106      	bne.n	80011f4 <fireCHA+0x3c>
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d003      	beq.n	80011f4 <fireCHA+0x3c>
			fireTIM3(velocity);
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff ff8a 	bl	8001108 <fireTIM3>
		}else
		{
			//Tried to run when blocked, do nothing here.
		}
	}
}
 80011f4:	bf00      	nop
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000184 	.word	0x20000184
 8001200:	20000185 	.word	0x20000185
 8001204:	200001c0 	.word	0x200001c0

08001208 <fireCHB>:
void fireCHB(uint8_t chNo){
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
	//Choose the velocity based on the channel number.
	uint8_t velocity = chB1Velocity;
 8001212:	4b0e      	ldr	r3, [pc, #56]	; (800124c <fireCHB+0x44>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	73fb      	strb	r3, [r7, #15]
	if(chNo == 2)
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	2b02      	cmp	r3, #2
 800121c:	d102      	bne.n	8001224 <fireCHB+0x1c>
	{
		velocity = chB2Velocity;
 800121e:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <fireCHB+0x48>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	73fb      	strb	r3, [r7, #15]
	}
	//Make sure the user wants to fire
	if(isFiringActiveCHB()){
 8001224:	f000 f9a0 	bl	8001568 <isFiringActiveCHB>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d00a      	beq.n	8001244 <fireCHB+0x3c>
		//Ensure we arent in a dwell time
		if(dwell_block_CHB == CH_FREE&&velocity!=0){
 800122e:	4b09      	ldr	r3, [pc, #36]	; (8001254 <fireCHB+0x4c>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d106      	bne.n	8001244 <fireCHB+0x3c>
 8001236:	7bfb      	ldrb	r3, [r7, #15]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <fireCHB+0x3c>
			fireTIM4(velocity);
 800123c:	7bfb      	ldrb	r3, [r7, #15]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ff8e 	bl	8001160 <fireTIM4>
		}else
		{
			//Tried to run when blocked, do nothing here.
		}
	}
}
 8001244:	bf00      	nop
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000186 	.word	0x20000186
 8001250:	20000187 	.word	0x20000187
 8001254:	200001c1 	.word	0x200001c1

08001258 <setCHAFreq1wVelocity>:

void setCHAFreq1wVelocity(uint16_t freq, uint8_t velocity)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	460a      	mov	r2, r1
 8001262:	80fb      	strh	r3, [r7, #6]
 8001264:	4613      	mov	r3, r2
 8001266:	717b      	strb	r3, [r7, #5]
	//If we are actively firing the channel, and the frequency is not 0
	if((freq!= 0)&&isFiringActiveCHA()){
 8001268:	88fb      	ldrh	r3, [r7, #6]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d012      	beq.n	8001294 <setCHAFreq1wVelocity+0x3c>
 800126e:	f000 f965 	bl	800153c <isFiringActiveCHA>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d00d      	beq.n	8001294 <setCHAFreq1wVelocity+0x3c>
		HAL_TIM_Base_Start_IT(&htim2);
 8001278:	480d      	ldr	r0, [pc, #52]	; (80012b0 <setCHAFreq1wVelocity+0x58>)
 800127a:	f004 fee3 	bl	8006044 <HAL_TIM_Base_Start_IT>
		TIM2->ARR = (uint32_t)( TIM2_freqHzGain /freq);;//Set the period
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	4a0c      	ldr	r2, [pc, #48]	; (80012b4 <setCHAFreq1wVelocity+0x5c>)
 8001282:	fb92 f2f3 	sdiv	r2, r2, r3
 8001286:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800128a:	62da      	str	r2, [r3, #44]	; 0x2c
		chA1Velocity = velocity;
 800128c:	4a0a      	ldr	r2, [pc, #40]	; (80012b8 <setCHAFreq1wVelocity+0x60>)
 800128e:	797b      	ldrb	r3, [r7, #5]
 8001290:	7013      	strb	r3, [r2, #0]
		if(velocity>80){
 8001292:	e002      	b.n	800129a <setCHAFreq1wVelocity+0x42>
		}

	}else{
		//Stop the timer
		HAL_TIM_Base_Stop_IT(&htim2);
 8001294:	4806      	ldr	r0, [pc, #24]	; (80012b0 <setCHAFreq1wVelocity+0x58>)
 8001296:	f004 ff37 	bl	8006108 <HAL_TIM_Base_Stop_IT>
	}
	//Update the timeout
    lastCHA1Time = tim1_count;
 800129a:	4b08      	ldr	r3, [pc, #32]	; (80012bc <setCHAFreq1wVelocity+0x64>)
 800129c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a0:	4907      	ldr	r1, [pc, #28]	; (80012c0 <setCHAFreq1wVelocity+0x68>)
 80012a2:	e9c1 2300 	strd	r2, r3, [r1]
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000300 	.word	0x20000300
 80012b4:	05b8d800 	.word	0x05b8d800
 80012b8:	20000184 	.word	0x20000184
 80012bc:	200001a8 	.word	0x200001a8
 80012c0:	20000188 	.word	0x20000188

080012c4 <setCHAFreq2wVelocity>:
void setCHAFreq2wVelocity(uint16_t freq, uint8_t velocity)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	460a      	mov	r2, r1
 80012ce:	80fb      	strh	r3, [r7, #6]
 80012d0:	4613      	mov	r3, r2
 80012d2:	717b      	strb	r3, [r7, #5]
	//If we are actively firing the channel, and the frequency is not 0
	if((freq!= 0)&&isFiringActiveCHA()){
 80012d4:	88fb      	ldrh	r3, [r7, #6]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d011      	beq.n	80012fe <setCHAFreq2wVelocity+0x3a>
 80012da:	f000 f92f 	bl	800153c <isFiringActiveCHA>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d00c      	beq.n	80012fe <setCHAFreq2wVelocity+0x3a>
		//Start the timer
		HAL_TIM_Base_Start_IT(&htim10);
 80012e4:	480c      	ldr	r0, [pc, #48]	; (8001318 <setCHAFreq2wVelocity+0x54>)
 80012e6:	f004 fead 	bl	8006044 <HAL_TIM_Base_Start_IT>
		TIM10->ARR = (uint32_t)( TIM10_freqHzGain /freq);//Set the period
 80012ea:	88fb      	ldrh	r3, [r7, #6]
 80012ec:	4a0b      	ldr	r2, [pc, #44]	; (800131c <setCHAFreq2wVelocity+0x58>)
 80012ee:	fb92 f2f3 	sdiv	r2, r2, r3
 80012f2:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <setCHAFreq2wVelocity+0x5c>)
 80012f4:	62da      	str	r2, [r3, #44]	; 0x2c
		chA2Velocity = velocity;
 80012f6:	4a0b      	ldr	r2, [pc, #44]	; (8001324 <setCHAFreq2wVelocity+0x60>)
 80012f8:	797b      	ldrb	r3, [r7, #5]
 80012fa:	7013      	strb	r3, [r2, #0]
 80012fc:	e002      	b.n	8001304 <setCHAFreq2wVelocity+0x40>
	}
	else{
		HAL_TIM_Base_Stop_IT(&htim10);
 80012fe:	4806      	ldr	r0, [pc, #24]	; (8001318 <setCHAFreq2wVelocity+0x54>)
 8001300:	f004 ff02 	bl	8006108 <HAL_TIM_Base_Stop_IT>
	}
	//Update the timeout
   lastCHA2Time = tim1_count;
 8001304:	4b08      	ldr	r3, [pc, #32]	; (8001328 <setCHAFreq2wVelocity+0x64>)
 8001306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130a:	4908      	ldr	r1, [pc, #32]	; (800132c <setCHAFreq2wVelocity+0x68>)
 800130c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000468 	.word	0x20000468
 800131c:	005b8d80 	.word	0x005b8d80
 8001320:	40014400 	.word	0x40014400
 8001324:	20000185 	.word	0x20000185
 8001328:	200001a8 	.word	0x200001a8
 800132c:	20000190 	.word	0x20000190

08001330 <setCHBFreq1wVelocity>:

void setCHBFreq1wVelocity(uint16_t freq, uint8_t velocity)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	460a      	mov	r2, r1
 800133a:	80fb      	strh	r3, [r7, #6]
 800133c:	4613      	mov	r3, r2
 800133e:	717b      	strb	r3, [r7, #5]
	//If we are actively firing the channel, and the frequency is not 0
	if((freq!= 0)&&isFiringActiveCHB()){
 8001340:	88fb      	ldrh	r3, [r7, #6]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d011      	beq.n	800136a <setCHBFreq1wVelocity+0x3a>
 8001346:	f000 f90f 	bl	8001568 <isFiringActiveCHB>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d00c      	beq.n	800136a <setCHBFreq1wVelocity+0x3a>
		TIM5->ARR = (uint32_t)( TIM5_freqHzGain /freq);//Set the period
 8001350:	88fb      	ldrh	r3, [r7, #6]
 8001352:	4a0c      	ldr	r2, [pc, #48]	; (8001384 <setCHBFreq1wVelocity+0x54>)
 8001354:	fb92 f2f3 	sdiv	r2, r2, r3
 8001358:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <setCHBFreq1wVelocity+0x58>)
 800135a:	62da      	str	r2, [r3, #44]	; 0x2c
		chB1Velocity = velocity;
 800135c:	4a0b      	ldr	r2, [pc, #44]	; (800138c <setCHBFreq1wVelocity+0x5c>)
 800135e:	797b      	ldrb	r3, [r7, #5]
 8001360:	7013      	strb	r3, [r2, #0]
		HAL_TIM_Base_Start_IT(&htim5);
 8001362:	480b      	ldr	r0, [pc, #44]	; (8001390 <setCHBFreq1wVelocity+0x60>)
 8001364:	f004 fe6e 	bl	8006044 <HAL_TIM_Base_Start_IT>
 8001368:	e002      	b.n	8001370 <setCHBFreq1wVelocity+0x40>

	}else{
		HAL_TIM_Base_Stop_IT(&htim5);
 800136a:	4809      	ldr	r0, [pc, #36]	; (8001390 <setCHBFreq1wVelocity+0x60>)
 800136c:	f004 fecc 	bl	8006108 <HAL_TIM_Base_Stop_IT>
	}
	//Update the timeout
    lastCHB1Time = tim1_count;
 8001370:	4b08      	ldr	r3, [pc, #32]	; (8001394 <setCHBFreq1wVelocity+0x64>)
 8001372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001376:	4908      	ldr	r1, [pc, #32]	; (8001398 <setCHBFreq1wVelocity+0x68>)
 8001378:	e9c1 2300 	strd	r2, r3, [r1]
}
 800137c:	bf00      	nop
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	05b8d800 	.word	0x05b8d800
 8001388:	40000c00 	.word	0x40000c00
 800138c:	20000186 	.word	0x20000186
 8001390:	200003d8 	.word	0x200003d8
 8001394:	200001a8 	.word	0x200001a8
 8001398:	20000198 	.word	0x20000198

0800139c <setCHBFreq2wVelocity>:
void setCHBFreq2wVelocity(uint16_t freq, uint8_t velocity)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	460a      	mov	r2, r1
 80013a6:	80fb      	strh	r3, [r7, #6]
 80013a8:	4613      	mov	r3, r2
 80013aa:	717b      	strb	r3, [r7, #5]
	//If we are actively firing the channel, and the frequency is not 0
	if((freq!= 0)&&isFiringActiveCHB()){
 80013ac:	88fb      	ldrh	r3, [r7, #6]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d013      	beq.n	80013da <setCHBFreq2wVelocity+0x3e>
 80013b2:	f000 f8d9 	bl	8001568 <isFiringActiveCHB>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d00e      	beq.n	80013da <setCHBFreq2wVelocity+0x3e>
		//Start the timer
		HAL_TIM_Base_Start_IT(&htim11);
 80013bc:	480d      	ldr	r0, [pc, #52]	; (80013f4 <setCHBFreq2wVelocity+0x58>)
 80013be:	f004 fe41 	bl	8006044 <HAL_TIM_Base_Start_IT>
		uint32_t val = (uint32_t)( TIM11_freqHzGain /freq);
 80013c2:	88fb      	ldrh	r3, [r7, #6]
 80013c4:	4a0c      	ldr	r2, [pc, #48]	; (80013f8 <setCHBFreq2wVelocity+0x5c>)
 80013c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80013ca:	60fb      	str	r3, [r7, #12]
		TIM11->ARR = val;//Set the period
 80013cc:	4a0b      	ldr	r2, [pc, #44]	; (80013fc <setCHBFreq2wVelocity+0x60>)
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	62d3      	str	r3, [r2, #44]	; 0x2c
		chB2Velocity = velocity;
 80013d2:	4a0b      	ldr	r2, [pc, #44]	; (8001400 <setCHBFreq2wVelocity+0x64>)
 80013d4:	797b      	ldrb	r3, [r7, #5]
 80013d6:	7013      	strb	r3, [r2, #0]
	if((freq!= 0)&&isFiringActiveCHB()){
 80013d8:	e002      	b.n	80013e0 <setCHBFreq2wVelocity+0x44>
	}
	else{
		HAL_TIM_Base_Stop_IT(&htim11);
 80013da:	4806      	ldr	r0, [pc, #24]	; (80013f4 <setCHBFreq2wVelocity+0x58>)
 80013dc:	f004 fe94 	bl	8006108 <HAL_TIM_Base_Stop_IT>
	}
	//Update the timeout
   lastCHB2Time = tim1_count;
 80013e0:	4b08      	ldr	r3, [pc, #32]	; (8001404 <setCHBFreq2wVelocity+0x68>)
 80013e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e6:	4908      	ldr	r1, [pc, #32]	; (8001408 <setCHBFreq2wVelocity+0x6c>)
 80013e8:	e9c1 2300 	strd	r2, r3, [r1]
}
 80013ec:	bf00      	nop
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	200004b0 	.word	0x200004b0
 80013f8:	005b8d80 	.word	0x005b8d80
 80013fc:	40014800 	.word	0x40014800
 8001400:	20000187 	.word	0x20000187
 8001404:	200001a8 	.word	0x200001a8
 8001408:	200001a0 	.word	0x200001a0

0800140c <setCHAFreq1>:


void setCHAFreq1(float freq)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	ed87 0a01 	vstr	s0, [r7, #4]
	setCHAFreq1wVelocity(freq,DEFAULT_VELOCITY);
 8001416:	edd7 7a01 	vldr	s15, [r7, #4]
 800141a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800141e:	ee17 3a90 	vmov	r3, s15
 8001422:	b29b      	uxth	r3, r3
 8001424:	217e      	movs	r1, #126	; 0x7e
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff ff16 	bl	8001258 <setCHAFreq1wVelocity>
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <setCHAFreq2>:
void setCHAFreq2(float freq)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	ed87 0a01 	vstr	s0, [r7, #4]
	setCHAFreq2wVelocity(freq,DEFAULT_VELOCITY);
 800143e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001442:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001446:	ee17 3a90 	vmov	r3, s15
 800144a:	b29b      	uxth	r3, r3
 800144c:	217e      	movs	r1, #126	; 0x7e
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff ff38 	bl	80012c4 <setCHAFreq2wVelocity>
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <setCHBFreq1>:
void setCHBFreq1(float freq)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	ed87 0a01 	vstr	s0, [r7, #4]
	setCHBFreq1wVelocity(freq,DEFAULT_VELOCITY);
 8001466:	edd7 7a01 	vldr	s15, [r7, #4]
 800146a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800146e:	ee17 3a90 	vmov	r3, s15
 8001472:	b29b      	uxth	r3, r3
 8001474:	217e      	movs	r1, #126	; 0x7e
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff ff5a 	bl	8001330 <setCHBFreq1wVelocity>
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <setCHBFreq2>:
void setCHBFreq2(float freq)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	ed87 0a01 	vstr	s0, [r7, #4]
	setCHBFreq2wVelocity(freq,DEFAULT_VELOCITY);
 800148e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001492:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001496:	ee17 3a90 	vmov	r3, s15
 800149a:	b29b      	uxth	r3, r3
 800149c:	217e      	movs	r1, #126	; 0x7e
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff ff7c 	bl	800139c <setCHBFreq2wVelocity>
}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <defineFiringActiveFBPins>:
void defineFiringActiveFBPins(GPIO_TypeDef* PortCHA, uint16_t pinCHA,GPIO_TypeDef* PortCHB, uint16_t pinCHB )
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	607a      	str	r2, [r7, #4]
 80014b6:	461a      	mov	r2, r3
 80014b8:	460b      	mov	r3, r1
 80014ba:	817b      	strh	r3, [r7, #10]
 80014bc:	4613      	mov	r3, r2
 80014be:	813b      	strh	r3, [r7, #8]
	FO_OUTPUT_EN_FBA_GPIO_Port = PortCHA;
 80014c0:	4a08      	ldr	r2, [pc, #32]	; (80014e4 <defineFiringActiveFBPins+0x38>)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	6013      	str	r3, [r2, #0]
	FO_OUTPUT_EN_FBB_GPIO_Port = PortCHB;
 80014c6:	4a08      	ldr	r2, [pc, #32]	; (80014e8 <defineFiringActiveFBPins+0x3c>)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6013      	str	r3, [r2, #0]
	FO_OUTPUT_EN_FBA_Pin = pinCHA;
 80014cc:	4a07      	ldr	r2, [pc, #28]	; (80014ec <defineFiringActiveFBPins+0x40>)
 80014ce:	897b      	ldrh	r3, [r7, #10]
 80014d0:	8013      	strh	r3, [r2, #0]
	FO_OUTPUT_EN_FBB_Pin = pinCHB;
 80014d2:	4a07      	ldr	r2, [pc, #28]	; (80014f0 <defineFiringActiveFBPins+0x44>)
 80014d4:	893b      	ldrh	r3, [r7, #8]
 80014d6:	8013      	strh	r3, [r2, #0]
}
 80014d8:	bf00      	nop
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	200001c4 	.word	0x200001c4
 80014e8:	200001cc 	.word	0x200001cc
 80014ec:	200001c8 	.word	0x200001c8
 80014f0:	200001d0 	.word	0x200001d0

080014f4 <defineSoloEnablePins>:
void defineSoloEnablePins(GPIO_TypeDef* PortCHA, uint16_t pinCHA,GPIO_TypeDef* PortCHB, uint16_t pinCHB )
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	607a      	str	r2, [r7, #4]
 80014fe:	461a      	mov	r2, r3
 8001500:	460b      	mov	r3, r1
 8001502:	817b      	strh	r3, [r7, #10]
 8001504:	4613      	mov	r3, r2
 8001506:	813b      	strh	r3, [r7, #8]
	SOLO_EN_CHA_GPIO_Port = PortCHA;
 8001508:	4a08      	ldr	r2, [pc, #32]	; (800152c <defineSoloEnablePins+0x38>)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6013      	str	r3, [r2, #0]
	SOLO_EN_CHB_GPIO_Port = PortCHB;
 800150e:	4a08      	ldr	r2, [pc, #32]	; (8001530 <defineSoloEnablePins+0x3c>)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6013      	str	r3, [r2, #0]
	SOLO_EN_CHA_Pin = pinCHA;
 8001514:	4a07      	ldr	r2, [pc, #28]	; (8001534 <defineSoloEnablePins+0x40>)
 8001516:	897b      	ldrh	r3, [r7, #10]
 8001518:	8013      	strh	r3, [r2, #0]
	SOLO_EN_CHB_Pin = pinCHB;
 800151a:	4a07      	ldr	r2, [pc, #28]	; (8001538 <defineSoloEnablePins+0x44>)
 800151c:	893b      	ldrh	r3, [r7, #8]
 800151e:	8013      	strh	r3, [r2, #0]
}
 8001520:	bf00      	nop
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	200001d4 	.word	0x200001d4
 8001530:	200001dc 	.word	0x200001dc
 8001534:	200001d8 	.word	0x200001d8
 8001538:	200001e0 	.word	0x200001e0

0800153c <isFiringActiveCHA>:

uint8_t isFiringActiveCHA(){
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(FO_OUTPUT_EN_FBA_GPIO_Port, FO_OUTPUT_EN_FBA_Pin)==0;
 8001540:	4b07      	ldr	r3, [pc, #28]	; (8001560 <isFiringActiveCHA+0x24>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a07      	ldr	r2, [pc, #28]	; (8001564 <isFiringActiveCHA+0x28>)
 8001546:	8812      	ldrh	r2, [r2, #0]
 8001548:	4611      	mov	r1, r2
 800154a:	4618      	mov	r0, r3
 800154c:	f002 fe32 	bl	80041b4 <HAL_GPIO_ReadPin>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	bf0c      	ite	eq
 8001556:	2301      	moveq	r3, #1
 8001558:	2300      	movne	r3, #0
 800155a:	b2db      	uxtb	r3, r3
}
 800155c:	4618      	mov	r0, r3
 800155e:	bd80      	pop	{r7, pc}
 8001560:	200001c4 	.word	0x200001c4
 8001564:	200001c8 	.word	0x200001c8

08001568 <isFiringActiveCHB>:
uint8_t isFiringActiveCHB(){
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(FO_OUTPUT_EN_FBB_GPIO_Port, FO_OUTPUT_EN_FBB_Pin)==0;
 800156c:	4b07      	ldr	r3, [pc, #28]	; (800158c <isFiringActiveCHB+0x24>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a07      	ldr	r2, [pc, #28]	; (8001590 <isFiringActiveCHB+0x28>)
 8001572:	8812      	ldrh	r2, [r2, #0]
 8001574:	4611      	mov	r1, r2
 8001576:	4618      	mov	r0, r3
 8001578:	f002 fe1c 	bl	80041b4 <HAL_GPIO_ReadPin>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	bf0c      	ite	eq
 8001582:	2301      	moveq	r3, #1
 8001584:	2300      	movne	r3, #0
 8001586:	b2db      	uxtb	r3, r3
}
 8001588:	4618      	mov	r0, r3
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200001cc 	.word	0x200001cc
 8001590:	200001d0 	.word	0x200001d0

08001594 <setCHASoloEnable>:
void setCHASoloEnable(uint8_t state){
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SOLO_EN_CHA_GPIO_Port, SOLO_EN_CHA_Pin, state);
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <setCHASoloEnable+0x24>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a06      	ldr	r2, [pc, #24]	; (80015bc <setCHASoloEnable+0x28>)
 80015a4:	8811      	ldrh	r1, [r2, #0]
 80015a6:	79fa      	ldrb	r2, [r7, #7]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f002 fe1b 	bl	80041e4 <HAL_GPIO_WritePin>
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	200001d4 	.word	0x200001d4
 80015bc:	200001d8 	.word	0x200001d8

080015c0 <setCHBSoloEnable>:
void setCHBSoloEnable(uint8_t state){
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SOLO_EN_CHB_GPIO_Port, SOLO_EN_CHB_Pin, state);
 80015ca:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <setCHBSoloEnable+0x24>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a06      	ldr	r2, [pc, #24]	; (80015e8 <setCHBSoloEnable+0x28>)
 80015d0:	8811      	ldrh	r1, [r2, #0]
 80015d2:	79fa      	ldrb	r2, [r7, #7]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f002 fe05 	bl	80041e4 <HAL_GPIO_WritePin>
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	200001dc 	.word	0x200001dc
 80015e8:	200001e0 	.word	0x200001e0
 80015ec:	00000000 	.word	0x00000000

080015f0 <populateFreqs>:
uint8_t *pCHB2;
uint8_t *pMIDIEn;
uint16_t midi_freqs[MAX_MIDI_FREQ-MIN_MIDI_FREQ];

void populateFreqs()
{
 80015f0:	b590      	push	{r4, r7, lr}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
	for(int i = MIN_MIDI_FREQ; i<MAX_MIDI_FREQ;i++){
 80015f6:	2315      	movs	r3, #21
 80015f8:	607b      	str	r3, [r7, #4]
 80015fa:	e034      	b.n	8001666 <populateFreqs+0x76>
		midi_freqs[i-MIN_MIDI_FREQ] = (uint16_t) (pow(2.0,(i-69.0)/12)*440);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7fe ff99 	bl	8000534 <__aeabi_i2d>
 8001602:	f04f 0200 	mov.w	r2, #0
 8001606:	4b1e      	ldr	r3, [pc, #120]	; (8001680 <populateFreqs+0x90>)
 8001608:	f7fe fe46 	bl	8000298 <__aeabi_dsub>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4610      	mov	r0, r2
 8001612:	4619      	mov	r1, r3
 8001614:	f04f 0200 	mov.w	r2, #0
 8001618:	4b1a      	ldr	r3, [pc, #104]	; (8001684 <populateFreqs+0x94>)
 800161a:	f7ff f91f 	bl	800085c <__aeabi_ddiv>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	ec43 2b17 	vmov	d7, r2, r3
 8001626:	eeb0 1a47 	vmov.f32	s2, s14
 800162a:	eef0 1a67 	vmov.f32	s3, s15
 800162e:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8001678 <populateFreqs+0x88>
 8001632:	f00b f9b5 	bl	800c9a0 <pow>
 8001636:	ec51 0b10 	vmov	r0, r1, d0
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	4b12      	ldr	r3, [pc, #72]	; (8001688 <populateFreqs+0x98>)
 8001640:	f7fe ffe2 	bl	8000608 <__aeabi_dmul>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	4610      	mov	r0, r2
 800164a:	4619      	mov	r1, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f1a3 0415 	sub.w	r4, r3, #21
 8001652:	f7ff fa89 	bl	8000b68 <__aeabi_d2uiz>
 8001656:	4603      	mov	r3, r0
 8001658:	b29a      	uxth	r2, r3
 800165a:	4b0c      	ldr	r3, [pc, #48]	; (800168c <populateFreqs+0x9c>)
 800165c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	for(int i = MIN_MIDI_FREQ; i<MAX_MIDI_FREQ;i++){
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3301      	adds	r3, #1
 8001664:	607b      	str	r3, [r7, #4]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b53      	cmp	r3, #83	; 0x53
 800166a:	ddc7      	ble.n	80015fc <populateFreqs+0xc>
#ifdef PRINT_FREQS_ON_INIT
		printf("No %d, FREQ: %d  Hz \n",i,midi_freqs[i-MIN_MIDI_FREQ]);
		HAL_Delay(2);
#endif
	}
}
 800166c:	bf00      	nop
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	bd90      	pop	{r4, r7, pc}
 8001676:	bf00      	nop
 8001678:	00000000 	.word	0x00000000
 800167c:	40000000 	.word	0x40000000
 8001680:	40514000 	.word	0x40514000
 8001684:	40280000 	.word	0x40280000
 8001688:	407b8000 	.word	0x407b8000
 800168c:	20000238 	.word	0x20000238

08001690 <initMIDI>:

void initMIDI(void){
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
	populateFreqs();
 8001694:	f7ff ffac 	bl	80015f0 <populateFreqs>
}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}

0800169c <freqFromMIDINote>:

uint16_t freqFromMIDINote(uint8_t note)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	71fb      	strb	r3, [r7, #7]
	if(note >= MIN_MIDI_FREQ&&note< MAX_MIDI_FREQ)
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	2b14      	cmp	r3, #20
 80016aa:	d908      	bls.n	80016be <freqFromMIDINote+0x22>
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	2b53      	cmp	r3, #83	; 0x53
 80016b0:	d805      	bhi.n	80016be <freqFromMIDINote+0x22>
	{
		return midi_freqs[note-MIN_MIDI_FREQ];
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	3b15      	subs	r3, #21
 80016b6:	4a05      	ldr	r2, [pc, #20]	; (80016cc <freqFromMIDINote+0x30>)
 80016b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016bc:	e000      	b.n	80016c0 <freqFromMIDINote+0x24>
	}
	return 0;
 80016be:	2300      	movs	r3, #0
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	20000238 	.word	0x20000238

080016d0 <serial_received>:

void serial_received(uint8_t len)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
	//printf("%d \n",len);
	if(len == 3&&((*pMIDIEn))){
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	2b03      	cmp	r3, #3
 80016de:	d129      	bne.n	8001734 <serial_received+0x64>
 80016e0:	4b16      	ldr	r3, [pc, #88]	; (800173c <serial_received+0x6c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d024      	beq.n	8001734 <serial_received+0x64>
		uint8_t cmd_val = serial_buffer[0];
 80016ea:	4b15      	ldr	r3, [pc, #84]	; (8001740 <serial_received+0x70>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	73fb      	strb	r3, [r7, #15]
		uint8_t pitch = serial_buffer[1];
 80016f0:	4b13      	ldr	r3, [pc, #76]	; (8001740 <serial_received+0x70>)
 80016f2:	785b      	ldrb	r3, [r3, #1]
 80016f4:	73bb      	strb	r3, [r7, #14]
		uint8_t velocity = serial_buffer[2];
 80016f6:	4b12      	ldr	r3, [pc, #72]	; (8001740 <serial_received+0x70>)
 80016f8:	789b      	ldrb	r3, [r3, #2]
 80016fa:	737b      	strb	r3, [r7, #13]

		if((cmd_val&0xF0) == MIDI_NOTE_ON)
 80016fc:	7bfb      	ldrb	r3, [r7, #15]
 80016fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001702:	2b90      	cmp	r3, #144	; 0x90
 8001704:	d109      	bne.n	800171a <serial_received+0x4a>
		{
			uint8_t channel = cmd_val&0x0F;
 8001706:	7bfb      	ldrb	r3, [r7, #15]
 8001708:	f003 030f 	and.w	r3, r3, #15
 800170c:	733b      	strb	r3, [r7, #12]

			processMIDIOnCMD(channel, pitch, velocity);
 800170e:	7b7a      	ldrb	r2, [r7, #13]
 8001710:	7bb9      	ldrb	r1, [r7, #14]
 8001712:	7b3b      	ldrb	r3, [r7, #12]
 8001714:	4618      	mov	r0, r3
 8001716:	f000 f825 	bl	8001764 <processMIDIOnCMD>
		}
		if((cmd_val&0xF0) == MIDI_NOTE_OFF)
 800171a:	7bfb      	ldrb	r3, [r7, #15]
 800171c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001720:	2b80      	cmp	r3, #128	; 0x80
 8001722:	d107      	bne.n	8001734 <serial_received+0x64>
		{
			uint8_t channel = cmd_val&0x0F;
 8001724:	7bfb      	ldrb	r3, [r7, #15]
 8001726:	f003 030f 	and.w	r3, r3, #15
 800172a:	72fb      	strb	r3, [r7, #11]

			processMIDIOffCMD(channel);
 800172c:	7afb      	ldrb	r3, [r7, #11]
 800172e:	4618      	mov	r0, r3
 8001730:	f000 f874 	bl	800181c <processMIDIOffCMD>
		}
	}
}
 8001734:	bf00      	nop
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000234 	.word	0x20000234
 8001740:	200001e4 	.word	0x200001e4

08001744 <registerMIDIEnable>:

void registerMIDIEnable(uint8_t *pEn)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	pMIDIEn = pEn;
 800174c:	4a04      	ldr	r2, [pc, #16]	; (8001760 <registerMIDIEnable+0x1c>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6013      	str	r3, [r2, #0]
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	20000234 	.word	0x20000234

08001764 <processMIDIOnCMD>:
void processMIDIOnCMD(uint8_t channel, uint8_t pitch, uint8_t velocity)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	71fb      	strb	r3, [r7, #7]
 800176e:	460b      	mov	r3, r1
 8001770:	71bb      	strb	r3, [r7, #6]
 8001772:	4613      	mov	r3, r2
 8001774:	717b      	strb	r3, [r7, #5]
	if((*pCHA1) == channel)
 8001776:	4b25      	ldr	r3, [pc, #148]	; (800180c <processMIDIOnCMD+0xa8>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	79fa      	ldrb	r2, [r7, #7]
 800177e:	429a      	cmp	r2, r3
 8001780:	d10b      	bne.n	800179a <processMIDIOnCMD+0x36>
	{
		setCHAFreq1wVelocity(freqFromMIDINote(pitch),velocity);
 8001782:	79bb      	ldrb	r3, [r7, #6]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ff89 	bl	800169c <freqFromMIDINote>
 800178a:	4603      	mov	r3, r0
 800178c:	461a      	mov	r2, r3
 800178e:	797b      	ldrb	r3, [r7, #5]
 8001790:	4619      	mov	r1, r3
 8001792:	4610      	mov	r0, r2
 8001794:	f7ff fd60 	bl	8001258 <setCHAFreq1wVelocity>
 8001798:	e010      	b.n	80017bc <processMIDIOnCMD+0x58>
	}else if((*pCHA2) == channel)
 800179a:	4b1d      	ldr	r3, [pc, #116]	; (8001810 <processMIDIOnCMD+0xac>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	79fa      	ldrb	r2, [r7, #7]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d10a      	bne.n	80017bc <processMIDIOnCMD+0x58>
	{
		setCHAFreq2wVelocity(freqFromMIDINote(pitch),velocity);
 80017a6:	79bb      	ldrb	r3, [r7, #6]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff ff77 	bl	800169c <freqFromMIDINote>
 80017ae:	4603      	mov	r3, r0
 80017b0:	461a      	mov	r2, r3
 80017b2:	797b      	ldrb	r3, [r7, #5]
 80017b4:	4619      	mov	r1, r3
 80017b6:	4610      	mov	r0, r2
 80017b8:	f7ff fd84 	bl	80012c4 <setCHAFreq2wVelocity>
	}
	//Second Tesla
	if((*pCHB1) == channel)
 80017bc:	4b15      	ldr	r3, [pc, #84]	; (8001814 <processMIDIOnCMD+0xb0>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	79fa      	ldrb	r2, [r7, #7]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d10b      	bne.n	80017e0 <processMIDIOnCMD+0x7c>
	{
		setCHBFreq1wVelocity(freqFromMIDINote(pitch),velocity);
 80017c8:	79bb      	ldrb	r3, [r7, #6]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff ff66 	bl	800169c <freqFromMIDINote>
 80017d0:	4603      	mov	r3, r0
 80017d2:	461a      	mov	r2, r3
 80017d4:	797b      	ldrb	r3, [r7, #5]
 80017d6:	4619      	mov	r1, r3
 80017d8:	4610      	mov	r0, r2
 80017da:	f7ff fda9 	bl	8001330 <setCHBFreq1wVelocity>
	}else if((*pCHB2) == channel)
	{
		setCHBFreq2wVelocity(freqFromMIDINote(pitch),velocity);
	}
}
 80017de:	e010      	b.n	8001802 <processMIDIOnCMD+0x9e>
	}else if((*pCHB2) == channel)
 80017e0:	4b0d      	ldr	r3, [pc, #52]	; (8001818 <processMIDIOnCMD+0xb4>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	79fa      	ldrb	r2, [r7, #7]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d10a      	bne.n	8001802 <processMIDIOnCMD+0x9e>
		setCHBFreq2wVelocity(freqFromMIDINote(pitch),velocity);
 80017ec:	79bb      	ldrb	r3, [r7, #6]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff ff54 	bl	800169c <freqFromMIDINote>
 80017f4:	4603      	mov	r3, r0
 80017f6:	461a      	mov	r2, r3
 80017f8:	797b      	ldrb	r3, [r7, #5]
 80017fa:	4619      	mov	r1, r3
 80017fc:	4610      	mov	r0, r2
 80017fe:	f7ff fdcd 	bl	800139c <setCHBFreq2wVelocity>
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000224 	.word	0x20000224
 8001810:	20000228 	.word	0x20000228
 8001814:	2000022c 	.word	0x2000022c
 8001818:	20000230 	.word	0x20000230

0800181c <processMIDIOffCMD>:
void processMIDIOffCMD(uint8_t channel)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
	if((*pCHA1) == channel)
 8001826:	4b15      	ldr	r3, [pc, #84]	; (800187c <processMIDIOffCMD+0x60>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	79fa      	ldrb	r2, [r7, #7]
 800182e:	429a      	cmp	r2, r3
 8001830:	d103      	bne.n	800183a <processMIDIOffCMD+0x1e>
	{
		setCHAFreq1(0);
 8001832:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8001880 <processMIDIOffCMD+0x64>
 8001836:	f7ff fde9 	bl	800140c <setCHAFreq1>
	}
	if((*pCHA2) == channel)
 800183a:	4b12      	ldr	r3, [pc, #72]	; (8001884 <processMIDIOffCMD+0x68>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	79fa      	ldrb	r2, [r7, #7]
 8001842:	429a      	cmp	r2, r3
 8001844:	d102      	bne.n	800184c <processMIDIOffCMD+0x30>
	{
		setCHAFreq2(0);
 8001846:	2000      	movs	r0, #0
 8001848:	f7ff fdf4 	bl	8001434 <setCHAFreq2>
	}
	if((*pCHB1) == channel)
 800184c:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <processMIDIOffCMD+0x6c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	79fa      	ldrb	r2, [r7, #7]
 8001854:	429a      	cmp	r2, r3
 8001856:	d103      	bne.n	8001860 <processMIDIOffCMD+0x44>
	{
		setCHBFreq1(0);
 8001858:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8001880 <processMIDIOffCMD+0x64>
 800185c:	f7ff fdfe 	bl	800145c <setCHBFreq1>
	}
	if((*pCHB2) == channel)
 8001860:	4b0a      	ldr	r3, [pc, #40]	; (800188c <processMIDIOffCMD+0x70>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	79fa      	ldrb	r2, [r7, #7]
 8001868:	429a      	cmp	r2, r3
 800186a:	d102      	bne.n	8001872 <processMIDIOffCMD+0x56>
	{
		setCHBFreq2(0);
 800186c:	2000      	movs	r0, #0
 800186e:	f7ff fe09 	bl	8001484 <setCHBFreq2>
	}
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000224 	.word	0x20000224
 8001880:	00000000 	.word	0x00000000
 8001884:	20000228 	.word	0x20000228
 8001888:	2000022c 	.word	0x2000022c
 800188c:	20000230 	.word	0x20000230

08001890 <registerMidiChannels>:

void registerMidiChannels(uint8_t *p1,uint8_t *p2,uint8_t *p3,uint8_t *p4)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
 800189c:	603b      	str	r3, [r7, #0]
	pCHA1 = p1;
 800189e:	4a09      	ldr	r2, [pc, #36]	; (80018c4 <registerMidiChannels+0x34>)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6013      	str	r3, [r2, #0]
	pCHA2 = p2;
 80018a4:	4a08      	ldr	r2, [pc, #32]	; (80018c8 <registerMidiChannels+0x38>)
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	6013      	str	r3, [r2, #0]
	pCHB1 = p3;
 80018aa:	4a08      	ldr	r2, [pc, #32]	; (80018cc <registerMidiChannels+0x3c>)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6013      	str	r3, [r2, #0]
	pCHB2 = p4;
 80018b0:	4a07      	ldr	r2, [pc, #28]	; (80018d0 <registerMidiChannels+0x40>)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	6013      	str	r3, [r2, #0]
}
 80018b6:	bf00      	nop
 80018b8:	3714      	adds	r7, #20
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	20000224 	.word	0x20000224
 80018c8:	20000228 	.word	0x20000228
 80018cc:	2000022c 	.word	0x2000022c
 80018d0:	20000230 	.word	0x20000230

080018d4 <Lcd_create>:

Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 80018d4:	b5b0      	push	{r4, r5, r7, lr}
 80018d6:	b08a      	sub	sp, #40	; 0x28
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
 80018e0:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 80018e2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80018e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 80018ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80018ee:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 80018f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018f2:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 80018f4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80018f6:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8001904:	f107 0310 	add.w	r3, r7, #16
 8001908:	4618      	mov	r0, r3
 800190a:	f000 f80e 	bl	800192a <Lcd_init>

	return lcd;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	461d      	mov	r5, r3
 8001912:	f107 0410 	add.w	r4, r7, #16
 8001916:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001918:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800191a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800191e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001922:	68f8      	ldr	r0, [r7, #12]
 8001924:	3728      	adds	r7, #40	; 0x28
 8001926:	46bd      	mov	sp, r7
 8001928:	bdb0      	pop	{r4, r5, r7, pc}

0800192a <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b082      	sub	sp, #8
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	7d9b      	ldrb	r3, [r3, #22]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10c      	bne.n	8001954 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 800193a:	2133      	movs	r1, #51	; 0x33
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f000 f86f 	bl	8001a20 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8001942:	2132      	movs	r1, #50	; 0x32
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 f86b 	bl	8001a20 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 800194a:	2128      	movs	r1, #40	; 0x28
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 f867 	bl	8001a20 <lcd_write_command>
 8001952:	e003      	b.n	800195c <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8001954:	2138      	movs	r1, #56	; 0x38
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 f862 	bl	8001a20 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 800195c:	2101      	movs	r1, #1
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 f85e 	bl	8001a20 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL |OPT_B|OPT_D);		// Lcd-on, cursor-off, no-blink
 8001964:	210d      	movs	r1, #13
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f000 f85a 	bl	8001a20 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 800196c:	2106      	movs	r1, #6
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 f856 	bl	8001a20 <lcd_write_command>
}
 8001974:	bf00      	nop
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%03d", number);
 8001986:	f107 030c 	add.w	r3, r7, #12
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	4906      	ldr	r1, [pc, #24]	; (80019a8 <Lcd_int+0x2c>)
 800198e:	4618      	mov	r0, r3
 8001990:	f009 ffcc 	bl	800b92c <siprintf>

	Lcd_string(lcd, buffer);
 8001994:	f107 030c 	add.w	r3, r7, #12
 8001998:	4619      	mov	r1, r3
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 f806 	bl	80019ac <Lcd_string>
}
 80019a0:	bf00      	nop
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	0800d828 	.word	0x0800d828

080019ac <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 80019ac:	b590      	push	{r4, r7, lr}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 80019b6:	2300      	movs	r3, #0
 80019b8:	73fb      	strb	r3, [r7, #15]
 80019ba:	e00a      	b.n	80019d2 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	4413      	add	r3, r2
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	4619      	mov	r1, r3
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 f858 	bl	8001a7c <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 80019cc:	7bfb      	ldrb	r3, [r7, #15]
 80019ce:	3301      	adds	r3, #1
 80019d0:	73fb      	strb	r3, [r7, #15]
 80019d2:	7bfc      	ldrb	r4, [r7, #15]
 80019d4:	6838      	ldr	r0, [r7, #0]
 80019d6:	f7fe fc03 	bl	80001e0 <strlen>
 80019da:	4603      	mov	r3, r0
 80019dc:	429c      	cmp	r4, r3
 80019de:	d3ed      	bcc.n	80019bc <Lcd_string+0x10>
	}
}
 80019e0:	bf00      	nop
 80019e2:	bf00      	nop
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd90      	pop	{r4, r7, pc}
	...

080019ec <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	460b      	mov	r3, r1
 80019f6:	70fb      	strb	r3, [r7, #3]
 80019f8:	4613      	mov	r3, r2
 80019fa:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 80019fc:	78fb      	ldrb	r3, [r7, #3]
 80019fe:	4a07      	ldr	r2, [pc, #28]	; (8001a1c <Lcd_cursor+0x30>)
 8001a00:	5cd2      	ldrb	r2, [r2, r3]
 8001a02:	78bb      	ldrb	r3, [r7, #2]
 8001a04:	4413      	add	r3, r2
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	3b80      	subs	r3, #128	; 0x80
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 f806 	bl	8001a20 <lcd_write_command>
	#endif
}
 8001a14:	bf00      	nop
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	0800da1c 	.word	0x0800da1c

08001a20 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG^LCD_IO_INVERT);		// Write to command register
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6898      	ldr	r0, [r3, #8]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	899b      	ldrh	r3, [r3, #12]
 8001a34:	2201      	movs	r2, #1
 8001a36:	4619      	mov	r1, r3
 8001a38:	f002 fbd4 	bl	80041e4 <HAL_GPIO_WritePin>


	if(lcd->mode == LCD_4_BIT_MODE)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	7d9b      	ldrb	r3, [r3, #22]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d111      	bne.n	8001a68 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8001a44:	78fb      	ldrb	r3, [r7, #3]
 8001a46:	091b      	lsrs	r3, r3, #4
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2204      	movs	r2, #4
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 f842 	bl	8001ad8 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8001a54:	78fb      	ldrb	r3, [r7, #3]
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2204      	movs	r2, #4
 8001a5e:	4619      	mov	r1, r3
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 f839 	bl	8001ad8 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8001a66:	e005      	b.n	8001a74 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8001a68:	78fb      	ldrb	r3, [r7, #3]
 8001a6a:	2208      	movs	r2, #8
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f000 f832 	bl	8001ad8 <lcd_write>
}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG^LCD_IO_INVERT);			// Write to data register
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6898      	ldr	r0, [r3, #8]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	899b      	ldrh	r3, [r3, #12]
 8001a90:	2200      	movs	r2, #0
 8001a92:	4619      	mov	r1, r3
 8001a94:	f002 fba6 	bl	80041e4 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	7d9b      	ldrb	r3, [r3, #22]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d111      	bne.n	8001ac4 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8001aa0:	78fb      	ldrb	r3, [r7, #3]
 8001aa2:	091b      	lsrs	r3, r3, #4
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2204      	movs	r2, #4
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f814 	bl	8001ad8 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8001ab0:	78fb      	ldrb	r3, [r7, #3]
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2204      	movs	r2, #4
 8001aba:	4619      	mov	r1, r3
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 f80b 	bl	8001ad8 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8001ac2:	e005      	b.n	8001ad0 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8001ac4:	78fb      	ldrb	r3, [r7, #3]
 8001ac6:	2208      	movs	r2, #8
 8001ac8:	4619      	mov	r1, r3
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 f804 	bl	8001ad8 <lcd_write>
}
 8001ad0:	bf00      	nop
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	70fb      	strb	r3, [r7, #3]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8001ae8:	2300      	movs	r3, #0
 8001aea:	73fb      	strb	r3, [r7, #15]
 8001aec:	e01c      	b.n	8001b28 <lcd_write+0x50>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], ((data >> i) & 0x01)^LCD_IO_INVERT);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	7bfb      	ldrb	r3, [r7, #15]
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4413      	add	r3, r2
 8001af8:	6818      	ldr	r0, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	4413      	add	r3, r2
 8001b04:	8819      	ldrh	r1, [r3, #0]
 8001b06:	78fa      	ldrb	r2, [r7, #3]
 8001b08:	7bfb      	ldrb	r3, [r7, #15]
 8001b0a:	fa42 f303 	asr.w	r3, r2, r3
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	bf0c      	ite	eq
 8001b16:	2301      	moveq	r3, #1
 8001b18:	2300      	movne	r3, #0
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	f002 fb61 	bl	80041e4 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8001b22:	7bfb      	ldrb	r3, [r7, #15]
 8001b24:	3301      	adds	r3, #1
 8001b26:	73fb      	strb	r3, [r7, #15]
 8001b28:	7bfa      	ldrb	r2, [r7, #15]
 8001b2a:	78bb      	ldrb	r3, [r7, #2]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d3de      	bcc.n	8001aee <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1^LCD_IO_INVERT);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6918      	ldr	r0, [r3, #16]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	8a9b      	ldrh	r3, [r3, #20]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f002 fb52 	bl	80041e4 <HAL_GPIO_WritePin>
	DELAY(1);
 8001b40:	2001      	movs	r0, #1
 8001b42:	f002 f87d 	bl	8003c40 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0^LCD_IO_INVERT); 		// Data receive on falling edge
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6918      	ldr	r0, [r3, #16]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	8a9b      	ldrh	r3, [r3, #20]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	4619      	mov	r1, r3
 8001b52:	f002 fb47 	bl	80041e4 <HAL_GPIO_WritePin>
}
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
	...

08001b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b64:	b091      	sub	sp, #68	; 0x44
 8001b66:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b68:	f001 fff8 	bl	8003b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b6c:	f000 f91a 	bl	8001da4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b70:	f000 fcd8 	bl	8002524 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001b74:	f009 f880 	bl	800ac78 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8001b78:	f000 fa1e 	bl	8001fb8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b7c:	f000 fa90 	bl	80020a0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001b80:	f000 fb0e 	bl	80021a0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001b84:	f000 fb8c 	bl	80022a0 <MX_TIM5_Init>
  MX_TIM9_Init();
 8001b88:	f000 fbfe 	bl	8002388 <MX_TIM9_Init>
  MX_TIM10_Init();
 8001b8c:	f000 fc36 	bl	80023fc <MX_TIM10_Init>
  MX_TIM11_Init();
 8001b90:	f000 fc7e 	bl	8002490 <MX_TIM11_Init>
  MX_TIM1_Init();
 8001b94:	f000 f96e 	bl	8001e74 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim1);
 8001b98:	486a      	ldr	r0, [pc, #424]	; (8001d44 <main+0x1e4>)
 8001b9a:	f004 fa53 	bl	8006044 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8001b9e:	486a      	ldr	r0, [pc, #424]	; (8001d48 <main+0x1e8>)
 8001ba0:	f004 fa50 	bl	8006044 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001ba4:	4869      	ldr	r0, [pc, #420]	; (8001d4c <main+0x1ec>)
 8001ba6:	f004 fa4d 	bl	8006044 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8001baa:	4869      	ldr	r0, [pc, #420]	; (8001d50 <main+0x1f0>)
 8001bac:	f004 fa4a 	bl	8006044 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8001bb0:	4868      	ldr	r0, [pc, #416]	; (8001d54 <main+0x1f4>)
 8001bb2:	f004 fa47 	bl	8006044 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_Base_Start_IT(&htim9);
  HAL_TIM_Base_Start_IT(&htim10);
 8001bb6:	4868      	ldr	r0, [pc, #416]	; (8001d58 <main+0x1f8>)
 8001bb8:	f004 fa44 	bl	8006044 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_Base_Start_IT(&htim11);

  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	4861      	ldr	r0, [pc, #388]	; (8001d44 <main+0x1e4>)
 8001bc0:	f004 fb84 	bl	80062cc <HAL_TIM_PWM_Start_IT>

  Lcd_PortType ports[] = {
 8001bc4:	4b65      	ldr	r3, [pc, #404]	; (8001d5c <main+0x1fc>)
 8001bc6:	f107 0620 	add.w	r6, r7, #32
 8001bca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bcc:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		  LCD_D0_GPIO_Port, LCD_D1_GPIO_Port, LCD_D2_GPIO_Port, LCD_D3_GPIO_Port
  };

  Lcd_PinType pins[] = {LCD_D0_Pin, LCD_D1_Pin, LCD_D2_Pin, LCD_D3_Pin};
 8001bd0:	4a63      	ldr	r2, [pc, #396]	; (8001d60 <main+0x200>)
 8001bd2:	f107 0318 	add.w	r3, r7, #24
 8001bd6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bda:	e883 0003 	stmia.w	r3, {r0, r1}


  lcd = Lcd_create(ports, pins, LCD_RS_GPIO_Port, LCD_RS_Pin, LCD_E_GPIO_Port, LCD_E_Pin, LCD_4_BIT_MODE);
 8001bde:	4e61      	ldr	r6, [pc, #388]	; (8001d64 <main+0x204>)
 8001be0:	4638      	mov	r0, r7
 8001be2:	f107 0218 	add.w	r2, r7, #24
 8001be6:	f107 0120 	add.w	r1, r7, #32
 8001bea:	2300      	movs	r3, #0
 8001bec:	9303      	str	r3, [sp, #12]
 8001bee:	2340      	movs	r3, #64	; 0x40
 8001bf0:	9302      	str	r3, [sp, #8]
 8001bf2:	4b5d      	ldr	r3, [pc, #372]	; (8001d68 <main+0x208>)
 8001bf4:	9301      	str	r3, [sp, #4]
 8001bf6:	2380      	movs	r3, #128	; 0x80
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	4b5b      	ldr	r3, [pc, #364]	; (8001d68 <main+0x208>)
 8001bfc:	f7ff fe6a 	bl	80018d4 <Lcd_create>
 8001c00:	46b4      	mov	ip, r6
 8001c02:	463e      	mov	r6, r7
 8001c04:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001c06:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001c0a:	e896 0003 	ldmia.w	r6, {r0, r1}
 8001c0e:	e88c 0003 	stmia.w	ip, {r0, r1}

  Lcd_cursor(&lcd, 0,0);
 8001c12:	2200      	movs	r2, #0
 8001c14:	2100      	movs	r1, #0
 8001c16:	4853      	ldr	r0, [pc, #332]	; (8001d64 <main+0x204>)
 8001c18:	f7ff fee8 	bl	80019ec <Lcd_cursor>
  Lcd_string(&lcd, "Tesla FibreOptic");
 8001c1c:	4953      	ldr	r1, [pc, #332]	; (8001d6c <main+0x20c>)
 8001c1e:	4851      	ldr	r0, [pc, #324]	; (8001d64 <main+0x204>)
 8001c20:	f7ff fec4 	bl	80019ac <Lcd_string>
  Lcd_cursor(&lcd, 1,0);
 8001c24:	2200      	movs	r2, #0
 8001c26:	2101      	movs	r1, #1
 8001c28:	484e      	ldr	r0, [pc, #312]	; (8001d64 <main+0x204>)
 8001c2a:	f7ff fedf 	bl	80019ec <Lcd_cursor>
  Lcd_string(&lcd, "Dual Tesla Control");
 8001c2e:	4950      	ldr	r1, [pc, #320]	; (8001d70 <main+0x210>)
 8001c30:	484c      	ldr	r0, [pc, #304]	; (8001d64 <main+0x204>)
 8001c32:	f7ff febb 	bl	80019ac <Lcd_string>
  Lcd_cursor(&lcd, 0,16);
 8001c36:	2210      	movs	r2, #16
 8001c38:	2100      	movs	r1, #0
 8001c3a:	484a      	ldr	r0, [pc, #296]	; (8001d64 <main+0x204>)
 8001c3c:	f7ff fed6 	bl	80019ec <Lcd_cursor>
  Lcd_string(&lcd, "V1.1");
 8001c40:	494c      	ldr	r1, [pc, #304]	; (8001d74 <main+0x214>)
 8001c42:	4848      	ldr	r0, [pc, #288]	; (8001d64 <main+0x204>)
 8001c44:	f7ff feb2 	bl	80019ac <Lcd_string>
  Lcd_cursor(&lcd, 1,16);
 8001c48:	2210      	movs	r2, #16
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	4845      	ldr	r0, [pc, #276]	; (8001d64 <main+0x204>)
 8001c4e:	f7ff fecd 	bl	80019ec <Lcd_cursor>
  Lcd_string(&lcd, "Dr. Jarren Lange");
 8001c52:	4949      	ldr	r1, [pc, #292]	; (8001d78 <main+0x218>)
 8001c54:	4843      	ldr	r0, [pc, #268]	; (8001d64 <main+0x204>)
 8001c56:	f7ff fea9 	bl	80019ac <Lcd_string>
  DELAY(1000);
 8001c5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c5e:	f001 ffef 	bl	8003c40 <HAL_Delay>

  Lcd_cursor(&lcd, 1,2);
 8001c62:	2202      	movs	r2, #2
 8001c64:	2101      	movs	r1, #1
 8001c66:	483f      	ldr	r0, [pc, #252]	; (8001d64 <main+0x204>)
 8001c68:	f7ff fec0 	bl	80019ec <Lcd_cursor>

	initMenu();
 8001c6c:	f001 f8c6 	bl	8002dfc <initMenu>
	updateHardware();
 8001c70:	f001 f822 	bl	8002cb8 <updateHardware>

	defineFiringActiveFBPins(FO_OUTPUT_EN_FB1_GPIO_Port, FO_OUTPUT_EN_FB1_Pin, FO_OUTPUT_EN_FB2_GPIO_Port,FO_OUTPUT_EN_FB2_Pin);
 8001c74:	2302      	movs	r3, #2
 8001c76:	4a41      	ldr	r2, [pc, #260]	; (8001d7c <main+0x21c>)
 8001c78:	2101      	movs	r1, #1
 8001c7a:	4840      	ldr	r0, [pc, #256]	; (8001d7c <main+0x21c>)
 8001c7c:	f7ff fc16 	bl	80014ac <defineFiringActiveFBPins>
	defineSoloEnablePins(SOLO_EN_CH1_GPIO_Port, SOLO_EN_CH1_Pin, SOLO_EN_CH2_GPIO_Port, SOLO_EN_CH2_Pin);
 8001c80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c84:	4a3d      	ldr	r2, [pc, #244]	; (8001d7c <main+0x21c>)
 8001c86:	2104      	movs	r1, #4
 8001c88:	483c      	ldr	r0, [pc, #240]	; (8001d7c <main+0x21c>)
 8001c8a:	f7ff fc33 	bl	80014f4 <defineSoloEnablePins>

	initMIDI();
 8001c8e:	f7ff fcff 	bl	8001690 <initMIDI>
	registerMidiChannels(&FO_CHA_Params.midiCh1,&FO_CHA_Params.midiCh2,&FO_CHB_Params.midiCh1,&FO_CHB_Params.midiCh2);
 8001c92:	4b3b      	ldr	r3, [pc, #236]	; (8001d80 <main+0x220>)
 8001c94:	4a3b      	ldr	r2, [pc, #236]	; (8001d84 <main+0x224>)
 8001c96:	493c      	ldr	r1, [pc, #240]	; (8001d88 <main+0x228>)
 8001c98:	483c      	ldr	r0, [pc, #240]	; (8001d8c <main+0x22c>)
 8001c9a:	f7ff fdf9 	bl	8001890 <registerMidiChannels>
	registerMIDIEnable(&currentMenuNO);//Since Fixed menu i zero, we can use this as a hack for the enable
 8001c9e:	483c      	ldr	r0, [pc, #240]	; (8001d90 <main+0x230>)
 8001ca0:	f7ff fd50 	bl	8001744 <registerMIDIEnable>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Started\n");
 8001ca4:	483b      	ldr	r0, [pc, #236]	; (8001d94 <main+0x234>)
 8001ca6:	f009 fe39 	bl	800b91c <puts>
  while (1)
  {
	  //Update the display every 200ms.
	  if((lastDispTime+200)<tim1_count)
 8001caa:	4b3b      	ldr	r3, [pc, #236]	; (8001d98 <main+0x238>)
 8001cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb0:	f112 04c8 	adds.w	r4, r2, #200	; 0xc8
 8001cb4:	f143 0500 	adc.w	r5, r3, #0
 8001cb8:	4b38      	ldr	r3, [pc, #224]	; (8001d9c <main+0x23c>)
 8001cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cbe:	4294      	cmp	r4, r2
 8001cc0:	eb75 0303 	sbcs.w	r3, r5, r3
 8001cc4:	d207      	bcs.n	8001cd6 <main+0x176>
	  {
		  updateDisplay();
 8001cc6:	f000 feb1 	bl	8002a2c <updateDisplay>
		  lastDispTime =tim1_count;
 8001cca:	4b34      	ldr	r3, [pc, #208]	; (8001d9c <main+0x23c>)
 8001ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd0:	4931      	ldr	r1, [pc, #196]	; (8001d98 <main+0x238>)
 8001cd2:	e9c1 2300 	strd	r2, r3, [r1]
	  }
	  //Reset the display every 4000ms.
	  //This is to counteract the occasional misoperation of the LCD, assumedly due to EMI (no idea on the source)
	  if((lastDispResTime+4000)<tim1_count)
 8001cd6:	4b32      	ldr	r3, [pc, #200]	; (8001da0 <main+0x240>)
 8001cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cdc:	f512 687a 	adds.w	r8, r2, #4000	; 0xfa0
 8001ce0:	f143 0900 	adc.w	r9, r3, #0
 8001ce4:	4b2d      	ldr	r3, [pc, #180]	; (8001d9c <main+0x23c>)
 8001ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cea:	4590      	cmp	r8, r2
 8001cec:	eb79 0303 	sbcs.w	r3, r9, r3
 8001cf0:	d221      	bcs.n	8001d36 <main+0x1d6>
	  {
		  lcd = Lcd_create(ports, pins, LCD_RS_GPIO_Port, LCD_RS_Pin, LCD_E_GPIO_Port, LCD_E_Pin, LCD_4_BIT_MODE);
 8001cf2:	4e1c      	ldr	r6, [pc, #112]	; (8001d64 <main+0x204>)
 8001cf4:	4638      	mov	r0, r7
 8001cf6:	f107 0218 	add.w	r2, r7, #24
 8001cfa:	f107 0120 	add.w	r1, r7, #32
 8001cfe:	2300      	movs	r3, #0
 8001d00:	9303      	str	r3, [sp, #12]
 8001d02:	2340      	movs	r3, #64	; 0x40
 8001d04:	9302      	str	r3, [sp, #8]
 8001d06:	4b18      	ldr	r3, [pc, #96]	; (8001d68 <main+0x208>)
 8001d08:	9301      	str	r3, [sp, #4]
 8001d0a:	2380      	movs	r3, #128	; 0x80
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	4b16      	ldr	r3, [pc, #88]	; (8001d68 <main+0x208>)
 8001d10:	f7ff fde0 	bl	80018d4 <Lcd_create>
 8001d14:	46b4      	mov	ip, r6
 8001d16:	463e      	mov	r6, r7
 8001d18:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001d1a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001d1e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8001d22:	e88c 0003 	stmia.w	ip, {r0, r1}
		  lastDispResTime =tim1_count;
 8001d26:	4b1d      	ldr	r3, [pc, #116]	; (8001d9c <main+0x23c>)
 8001d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2c:	491c      	ldr	r1, [pc, #112]	; (8001da0 <main+0x240>)
 8001d2e:	e9c1 2300 	strd	r2, r3, [r1]
		  updateHardware();
 8001d32:	f000 ffc1 	bl	8002cb8 <updateHardware>
	  }
	  //Check the timeouts if we are operating in MIDI mode.
	  if(currentMenuNO!=FIXED_F_MENU_NO)
 8001d36:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <main+0x230>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d0b5      	beq.n	8001caa <main+0x14a>
	  {
		  //When in midi, it can happen that a tone kill signal is missed.
		  //For that reason we check the timeouts to stop a tone after a fixed time period.

		  checkChannelTimeouts();
 8001d3e:	f000 fccb 	bl	80026d8 <checkChannelTimeouts>
	  if((lastDispTime+200)<tim1_count)
 8001d42:	e7b2      	b.n	8001caa <main+0x14a>
 8001d44:	200002b8 	.word	0x200002b8
 8001d48:	20000300 	.word	0x20000300
 8001d4c:	20000348 	.word	0x20000348
 8001d50:	20000390 	.word	0x20000390
 8001d54:	200003d8 	.word	0x200003d8
 8001d58:	20000468 	.word	0x20000468
 8001d5c:	0800d87c 	.word	0x0800d87c
 8001d60:	0800d88c 	.word	0x0800d88c
 8001d64:	20000528 	.word	0x20000528
 8001d68:	40020000 	.word	0x40020000
 8001d6c:	0800d830 	.word	0x0800d830
 8001d70:	0800d844 	.word	0x0800d844
 8001d74:	0800d858 	.word	0x0800d858
 8001d78:	0800d860 	.word	0x0800d860
 8001d7c:	40020400 	.word	0x40020400
 8001d80:	20000565 	.word	0x20000565
 8001d84:	20000564 	.word	0x20000564
 8001d88:	2000054d 	.word	0x2000054d
 8001d8c:	2000054c 	.word	0x2000054c
 8001d90:	20000540 	.word	0x20000540
 8001d94:	0800d874 	.word	0x0800d874
 8001d98:	20000518 	.word	0x20000518
 8001d9c:	200001a8 	.word	0x200001a8
 8001da0:	20000520 	.word	0x20000520

08001da4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b094      	sub	sp, #80	; 0x50
 8001da8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001daa:	f107 0320 	add.w	r3, r7, #32
 8001dae:	2230      	movs	r2, #48	; 0x30
 8001db0:	2100      	movs	r1, #0
 8001db2:	4618      	mov	r0, r3
 8001db4:	f009 feb2 	bl	800bb1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001db8:	f107 030c 	add.w	r3, r7, #12
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60bb      	str	r3, [r7, #8]
 8001dcc:	4b27      	ldr	r3, [pc, #156]	; (8001e6c <SystemClock_Config+0xc8>)
 8001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd0:	4a26      	ldr	r2, [pc, #152]	; (8001e6c <SystemClock_Config+0xc8>)
 8001dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd6:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd8:	4b24      	ldr	r3, [pc, #144]	; (8001e6c <SystemClock_Config+0xc8>)
 8001dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001de4:	2300      	movs	r3, #0
 8001de6:	607b      	str	r3, [r7, #4]
 8001de8:	4b21      	ldr	r3, [pc, #132]	; (8001e70 <SystemClock_Config+0xcc>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a20      	ldr	r2, [pc, #128]	; (8001e70 <SystemClock_Config+0xcc>)
 8001dee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001df2:	6013      	str	r3, [r2, #0]
 8001df4:	4b1e      	ldr	r3, [pc, #120]	; (8001e70 <SystemClock_Config+0xcc>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001dfc:	607b      	str	r3, [r7, #4]
 8001dfe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e00:	2301      	movs	r3, #1
 8001e02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001e14:	2319      	movs	r3, #25
 8001e16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001e18:	23c0      	movs	r3, #192	; 0xc0
 8001e1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e20:	2304      	movs	r3, #4
 8001e22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e24:	f107 0320 	add.w	r3, r7, #32
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f003 fc8b 	bl	8005744 <HAL_RCC_OscConfig>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e34:	f000 ffdc 	bl	8002df0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e38:	230f      	movs	r3, #15
 8001e3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001e4e:	f107 030c 	add.w	r3, r7, #12
 8001e52:	2103      	movs	r1, #3
 8001e54:	4618      	mov	r0, r3
 8001e56:	f003 feed 	bl	8005c34 <HAL_RCC_ClockConfig>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001e60:	f000 ffc6 	bl	8002df0 <Error_Handler>
  }
}
 8001e64:	bf00      	nop
 8001e66:	3750      	adds	r7, #80	; 0x50
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40007000 	.word	0x40007000

08001e74 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b096      	sub	sp, #88	; 0x58
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]
 8001e84:	609a      	str	r2, [r3, #8]
 8001e86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	605a      	str	r2, [r3, #4]
 8001e9c:	609a      	str	r2, [r3, #8]
 8001e9e:	60da      	str	r2, [r3, #12]
 8001ea0:	611a      	str	r2, [r3, #16]
 8001ea2:	615a      	str	r2, [r3, #20]
 8001ea4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ea6:	1d3b      	adds	r3, r7, #4
 8001ea8:	2220      	movs	r2, #32
 8001eaa:	2100      	movs	r1, #0
 8001eac:	4618      	mov	r0, r3
 8001eae:	f009 fe35 	bl	800bb1c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001eb2:	4b3f      	ldr	r3, [pc, #252]	; (8001fb0 <MX_TIM1_Init+0x13c>)
 8001eb4:	4a3f      	ldr	r2, [pc, #252]	; (8001fb4 <MX_TIM1_Init+0x140>)
 8001eb6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001eb8:	4b3d      	ldr	r3, [pc, #244]	; (8001fb0 <MX_TIM1_Init+0x13c>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ebe:	4b3c      	ldr	r3, [pc, #240]	; (8001fb0 <MX_TIM1_Init+0x13c>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65000;
 8001ec4:	4b3a      	ldr	r3, [pc, #232]	; (8001fb0 <MX_TIM1_Init+0x13c>)
 8001ec6:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001eca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ecc:	4b38      	ldr	r3, [pc, #224]	; (8001fb0 <MX_TIM1_Init+0x13c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ed2:	4b37      	ldr	r3, [pc, #220]	; (8001fb0 <MX_TIM1_Init+0x13c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ed8:	4b35      	ldr	r3, [pc, #212]	; (8001fb0 <MX_TIM1_Init+0x13c>)
 8001eda:	2280      	movs	r2, #128	; 0x80
 8001edc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ede:	4834      	ldr	r0, [pc, #208]	; (8001fb0 <MX_TIM1_Init+0x13c>)
 8001ee0:	f004 f860 	bl	8005fa4 <HAL_TIM_Base_Init>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001eea:	f000 ff81 	bl	8002df0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ef2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ef4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ef8:	4619      	mov	r1, r3
 8001efa:	482d      	ldr	r0, [pc, #180]	; (8001fb0 <MX_TIM1_Init+0x13c>)
 8001efc:	f004 fe16 	bl	8006b2c <HAL_TIM_ConfigClockSource>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001f06:	f000 ff73 	bl	8002df0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f0a:	4829      	ldr	r0, [pc, #164]	; (8001fb0 <MX_TIM1_Init+0x13c>)
 8001f0c:	f004 f984 	bl	8006218 <HAL_TIM_PWM_Init>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001f16:	f000 ff6b 	bl	8002df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f22:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f26:	4619      	mov	r1, r3
 8001f28:	4821      	ldr	r0, [pc, #132]	; (8001fb0 <MX_TIM1_Init+0x13c>)
 8001f2a:	f005 f9bb 	bl	80072a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001f34:	f000 ff5c 	bl	8002df0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f38:	2360      	movs	r3, #96	; 0x60
 8001f3a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 50000;
 8001f3c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8001f40:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f42:	2300      	movs	r3, #0
 8001f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f46:	2300      	movs	r3, #0
 8001f48:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f52:	2300      	movs	r3, #0
 8001f54:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4814      	ldr	r0, [pc, #80]	; (8001fb0 <MX_TIM1_Init+0x13c>)
 8001f60:	f004 fd22 	bl	80069a8 <HAL_TIM_PWM_ConfigChannel>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001f6a:	f000 ff41 	bl	8002df0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f72:	2300      	movs	r3, #0
 8001f74:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f86:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f8c:	1d3b      	adds	r3, r7, #4
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4807      	ldr	r0, [pc, #28]	; (8001fb0 <MX_TIM1_Init+0x13c>)
 8001f92:	f005 f9f5 	bl	8007380 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001f9c:	f000 ff28 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001fa0:	4803      	ldr	r0, [pc, #12]	; (8001fb0 <MX_TIM1_Init+0x13c>)
 8001fa2:	f001 fbf9 	bl	8003798 <HAL_TIM_MspPostInit>

}
 8001fa6:	bf00      	nop
 8001fa8:	3758      	adds	r7, #88	; 0x58
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	200002b8 	.word	0x200002b8
 8001fb4:	40010000 	.word	0x40010000

08001fb8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08e      	sub	sp, #56	; 0x38
 8001fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	605a      	str	r2, [r3, #4]
 8001fc8:	609a      	str	r2, [r3, #8]
 8001fca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fcc:	f107 0320 	add.w	r3, r7, #32
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fd6:	1d3b      	adds	r3, r7, #4
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
 8001fe4:	615a      	str	r2, [r3, #20]
 8001fe6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fe8:	4b2b      	ldr	r3, [pc, #172]	; (8002098 <MX_TIM2_Init+0xe0>)
 8001fea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ff0:	4b29      	ldr	r3, [pc, #164]	; (8002098 <MX_TIM2_Init+0xe0>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff6:	4b28      	ldr	r3, [pc, #160]	; (8002098 <MX_TIM2_Init+0xe0>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000;
 8001ffc:	4b26      	ldr	r3, [pc, #152]	; (8002098 <MX_TIM2_Init+0xe0>)
 8001ffe:	4a27      	ldr	r2, [pc, #156]	; (800209c <MX_TIM2_Init+0xe4>)
 8002000:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002002:	4b25      	ldr	r3, [pc, #148]	; (8002098 <MX_TIM2_Init+0xe0>)
 8002004:	2200      	movs	r2, #0
 8002006:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002008:	4b23      	ldr	r3, [pc, #140]	; (8002098 <MX_TIM2_Init+0xe0>)
 800200a:	2280      	movs	r2, #128	; 0x80
 800200c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800200e:	4822      	ldr	r0, [pc, #136]	; (8002098 <MX_TIM2_Init+0xe0>)
 8002010:	f003 ffc8 	bl	8005fa4 <HAL_TIM_Base_Init>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800201a:	f000 fee9 	bl	8002df0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800201e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002022:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002024:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002028:	4619      	mov	r1, r3
 800202a:	481b      	ldr	r0, [pc, #108]	; (8002098 <MX_TIM2_Init+0xe0>)
 800202c:	f004 fd7e 	bl	8006b2c <HAL_TIM_ConfigClockSource>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8002036:	f000 fedb 	bl	8002df0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800203a:	4817      	ldr	r0, [pc, #92]	; (8002098 <MX_TIM2_Init+0xe0>)
 800203c:	f004 f8ec 	bl	8006218 <HAL_TIM_PWM_Init>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8002046:	f000 fed3 	bl	8002df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800204a:	2300      	movs	r3, #0
 800204c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800204e:	2300      	movs	r3, #0
 8002050:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002052:	f107 0320 	add.w	r3, r7, #32
 8002056:	4619      	mov	r1, r3
 8002058:	480f      	ldr	r0, [pc, #60]	; (8002098 <MX_TIM2_Init+0xe0>)
 800205a:	f005 f923 	bl	80072a4 <HAL_TIMEx_MasterConfigSynchronization>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8002064:	f000 fec4 	bl	8002df0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002068:	2360      	movs	r3, #96	; 0x60
 800206a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800206c:	2300      	movs	r3, #0
 800206e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002070:	2300      	movs	r3, #0
 8002072:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002078:	1d3b      	adds	r3, r7, #4
 800207a:	2200      	movs	r2, #0
 800207c:	4619      	mov	r1, r3
 800207e:	4806      	ldr	r0, [pc, #24]	; (8002098 <MX_TIM2_Init+0xe0>)
 8002080:	f004 fc92 	bl	80069a8 <HAL_TIM_PWM_ConfigChannel>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800208a:	f000 feb1 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800208e:	bf00      	nop
 8002090:	3738      	adds	r7, #56	; 0x38
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20000300 	.word	0x20000300
 800209c:	000f4240 	.word	0x000f4240

080020a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08e      	sub	sp, #56	; 0x38
 80020a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	609a      	str	r2, [r3, #8]
 80020b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020b4:	f107 0320 	add.w	r3, r7, #32
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020be:	1d3b      	adds	r3, r7, #4
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	60da      	str	r2, [r3, #12]
 80020ca:	611a      	str	r2, [r3, #16]
 80020cc:	615a      	str	r2, [r3, #20]
 80020ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020d0:	4b31      	ldr	r3, [pc, #196]	; (8002198 <MX_TIM3_Init+0xf8>)
 80020d2:	4a32      	ldr	r2, [pc, #200]	; (800219c <MX_TIM3_Init+0xfc>)
 80020d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80020d6:	4b30      	ldr	r3, [pc, #192]	; (8002198 <MX_TIM3_Init+0xf8>)
 80020d8:	2201      	movs	r2, #1
 80020da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80020dc:	4b2e      	ldr	r3, [pc, #184]	; (8002198 <MX_TIM3_Init+0xf8>)
 80020de:	2210      	movs	r2, #16
 80020e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 80020e2:	4b2d      	ldr	r3, [pc, #180]	; (8002198 <MX_TIM3_Init+0xf8>)
 80020e4:	f644 6220 	movw	r2, #20000	; 0x4e20
 80020e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ea:	4b2b      	ldr	r3, [pc, #172]	; (8002198 <MX_TIM3_Init+0xf8>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020f0:	4b29      	ldr	r3, [pc, #164]	; (8002198 <MX_TIM3_Init+0xf8>)
 80020f2:	2280      	movs	r2, #128	; 0x80
 80020f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020f6:	4828      	ldr	r0, [pc, #160]	; (8002198 <MX_TIM3_Init+0xf8>)
 80020f8:	f003 ff54 	bl	8005fa4 <HAL_TIM_Base_Init>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002102:	f000 fe75 	bl	8002df0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002106:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800210a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800210c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002110:	4619      	mov	r1, r3
 8002112:	4821      	ldr	r0, [pc, #132]	; (8002198 <MX_TIM3_Init+0xf8>)
 8002114:	f004 fd0a 	bl	8006b2c <HAL_TIM_ConfigClockSource>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800211e:	f000 fe67 	bl	8002df0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002122:	481d      	ldr	r0, [pc, #116]	; (8002198 <MX_TIM3_Init+0xf8>)
 8002124:	f004 f878 	bl	8006218 <HAL_TIM_PWM_Init>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800212e:	f000 fe5f 	bl	8002df0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8002132:	2108      	movs	r1, #8
 8002134:	4818      	ldr	r0, [pc, #96]	; (8002198 <MX_TIM3_Init+0xf8>)
 8002136:	f004 fa79 	bl	800662c <HAL_TIM_OnePulse_Init>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 8002140:	f000 fe56 	bl	8002df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002144:	2300      	movs	r3, #0
 8002146:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002148:	2300      	movs	r3, #0
 800214a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800214c:	f107 0320 	add.w	r3, r7, #32
 8002150:	4619      	mov	r1, r3
 8002152:	4811      	ldr	r0, [pc, #68]	; (8002198 <MX_TIM3_Init+0xf8>)
 8002154:	f005 f8a6 	bl	80072a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 800215e:	f000 fe47 	bl	8002df0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002162:	2360      	movs	r3, #96	; 0x60
 8002164:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002166:	2300      	movs	r3, #0
 8002168:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800216e:	2304      	movs	r3, #4
 8002170:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002172:	1d3b      	adds	r3, r7, #4
 8002174:	2200      	movs	r2, #0
 8002176:	4619      	mov	r1, r3
 8002178:	4807      	ldr	r0, [pc, #28]	; (8002198 <MX_TIM3_Init+0xf8>)
 800217a:	f004 fc15 	bl	80069a8 <HAL_TIM_PWM_ConfigChannel>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <MX_TIM3_Init+0xe8>
  {
    Error_Handler();
 8002184:	f000 fe34 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002188:	4803      	ldr	r0, [pc, #12]	; (8002198 <MX_TIM3_Init+0xf8>)
 800218a:	f001 fb05 	bl	8003798 <HAL_TIM_MspPostInit>

}
 800218e:	bf00      	nop
 8002190:	3738      	adds	r7, #56	; 0x38
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	20000348 	.word	0x20000348
 800219c:	40000400 	.word	0x40000400

080021a0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08e      	sub	sp, #56	; 0x38
 80021a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	605a      	str	r2, [r3, #4]
 80021b0:	609a      	str	r2, [r3, #8]
 80021b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021b4:	f107 0320 	add.w	r3, r7, #32
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021be:	1d3b      	adds	r3, r7, #4
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	60da      	str	r2, [r3, #12]
 80021ca:	611a      	str	r2, [r3, #16]
 80021cc:	615a      	str	r2, [r3, #20]
 80021ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80021d0:	4b31      	ldr	r3, [pc, #196]	; (8002298 <MX_TIM4_Init+0xf8>)
 80021d2:	4a32      	ldr	r2, [pc, #200]	; (800229c <MX_TIM4_Init+0xfc>)
 80021d4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 80021d6:	4b30      	ldr	r3, [pc, #192]	; (8002298 <MX_TIM4_Init+0xf8>)
 80021d8:	2201      	movs	r2, #1
 80021da:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80021dc:	4b2e      	ldr	r3, [pc, #184]	; (8002298 <MX_TIM4_Init+0xf8>)
 80021de:	2210      	movs	r2, #16
 80021e0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 80021e2:	4b2d      	ldr	r3, [pc, #180]	; (8002298 <MX_TIM4_Init+0xf8>)
 80021e4:	f644 6220 	movw	r2, #20000	; 0x4e20
 80021e8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ea:	4b2b      	ldr	r3, [pc, #172]	; (8002298 <MX_TIM4_Init+0xf8>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021f0:	4b29      	ldr	r3, [pc, #164]	; (8002298 <MX_TIM4_Init+0xf8>)
 80021f2:	2280      	movs	r2, #128	; 0x80
 80021f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80021f6:	4828      	ldr	r0, [pc, #160]	; (8002298 <MX_TIM4_Init+0xf8>)
 80021f8:	f003 fed4 	bl	8005fa4 <HAL_TIM_Base_Init>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002202:	f000 fdf5 	bl	8002df0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002206:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800220a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800220c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002210:	4619      	mov	r1, r3
 8002212:	4821      	ldr	r0, [pc, #132]	; (8002298 <MX_TIM4_Init+0xf8>)
 8002214:	f004 fc8a 	bl	8006b2c <HAL_TIM_ConfigClockSource>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800221e:	f000 fde7 	bl	8002df0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002222:	481d      	ldr	r0, [pc, #116]	; (8002298 <MX_TIM4_Init+0xf8>)
 8002224:	f003 fff8 	bl	8006218 <HAL_TIM_PWM_Init>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800222e:	f000 fddf 	bl	8002df0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE) != HAL_OK)
 8002232:	2108      	movs	r1, #8
 8002234:	4818      	ldr	r0, [pc, #96]	; (8002298 <MX_TIM4_Init+0xf8>)
 8002236:	f004 f9f9 	bl	800662c <HAL_TIM_OnePulse_Init>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <MX_TIM4_Init+0xa4>
  {
    Error_Handler();
 8002240:	f000 fdd6 	bl	8002df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002244:	2300      	movs	r3, #0
 8002246:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002248:	2300      	movs	r3, #0
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800224c:	f107 0320 	add.w	r3, r7, #32
 8002250:	4619      	mov	r1, r3
 8002252:	4811      	ldr	r0, [pc, #68]	; (8002298 <MX_TIM4_Init+0xf8>)
 8002254:	f005 f826 	bl	80072a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <MX_TIM4_Init+0xc2>
  {
    Error_Handler();
 800225e:	f000 fdc7 	bl	8002df0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002262:	2360      	movs	r3, #96	; 0x60
 8002264:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002266:	2300      	movs	r3, #0
 8002268:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800226e:	2304      	movs	r3, #4
 8002270:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002272:	1d3b      	adds	r3, r7, #4
 8002274:	2208      	movs	r2, #8
 8002276:	4619      	mov	r1, r3
 8002278:	4807      	ldr	r0, [pc, #28]	; (8002298 <MX_TIM4_Init+0xf8>)
 800227a:	f004 fb95 	bl	80069a8 <HAL_TIM_PWM_ConfigChannel>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_TIM4_Init+0xe8>
  {
    Error_Handler();
 8002284:	f000 fdb4 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002288:	4803      	ldr	r0, [pc, #12]	; (8002298 <MX_TIM4_Init+0xf8>)
 800228a:	f001 fa85 	bl	8003798 <HAL_TIM_MspPostInit>

}
 800228e:	bf00      	nop
 8002290:	3738      	adds	r7, #56	; 0x38
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20000390 	.word	0x20000390
 800229c:	40000800 	.word	0x40000800

080022a0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b08e      	sub	sp, #56	; 0x38
 80022a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	605a      	str	r2, [r3, #4]
 80022b0:	609a      	str	r2, [r3, #8]
 80022b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022b4:	f107 0320 	add.w	r3, r7, #32
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022be:	1d3b      	adds	r3, r7, #4
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	60da      	str	r2, [r3, #12]
 80022ca:	611a      	str	r2, [r3, #16]
 80022cc:	615a      	str	r2, [r3, #20]
 80022ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80022d0:	4b2a      	ldr	r3, [pc, #168]	; (800237c <MX_TIM5_Init+0xdc>)
 80022d2:	4a2b      	ldr	r2, [pc, #172]	; (8002380 <MX_TIM5_Init+0xe0>)
 80022d4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80022d6:	4b29      	ldr	r3, [pc, #164]	; (800237c <MX_TIM5_Init+0xdc>)
 80022d8:	2200      	movs	r2, #0
 80022da:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022dc:	4b27      	ldr	r3, [pc, #156]	; (800237c <MX_TIM5_Init+0xdc>)
 80022de:	2200      	movs	r2, #0
 80022e0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000000;
 80022e2:	4b26      	ldr	r3, [pc, #152]	; (800237c <MX_TIM5_Init+0xdc>)
 80022e4:	4a27      	ldr	r2, [pc, #156]	; (8002384 <MX_TIM5_Init+0xe4>)
 80022e6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022e8:	4b24      	ldr	r3, [pc, #144]	; (800237c <MX_TIM5_Init+0xdc>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022ee:	4b23      	ldr	r3, [pc, #140]	; (800237c <MX_TIM5_Init+0xdc>)
 80022f0:	2280      	movs	r2, #128	; 0x80
 80022f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80022f4:	4821      	ldr	r0, [pc, #132]	; (800237c <MX_TIM5_Init+0xdc>)
 80022f6:	f003 fe55 	bl	8005fa4 <HAL_TIM_Base_Init>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 8002300:	f000 fd76 	bl	8002df0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002304:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002308:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800230a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800230e:	4619      	mov	r1, r3
 8002310:	481a      	ldr	r0, [pc, #104]	; (800237c <MX_TIM5_Init+0xdc>)
 8002312:	f004 fc0b 	bl	8006b2c <HAL_TIM_ConfigClockSource>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 800231c:	f000 fd68 	bl	8002df0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002320:	4816      	ldr	r0, [pc, #88]	; (800237c <MX_TIM5_Init+0xdc>)
 8002322:	f003 ff79 	bl	8006218 <HAL_TIM_PWM_Init>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 800232c:	f000 fd60 	bl	8002df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002330:	2300      	movs	r3, #0
 8002332:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002334:	2300      	movs	r3, #0
 8002336:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002338:	f107 0320 	add.w	r3, r7, #32
 800233c:	4619      	mov	r1, r3
 800233e:	480f      	ldr	r0, [pc, #60]	; (800237c <MX_TIM5_Init+0xdc>)
 8002340:	f004 ffb0 	bl	80072a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 800234a:	f000 fd51 	bl	8002df0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800234e:	2360      	movs	r3, #96	; 0x60
 8002350:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002352:	2300      	movs	r3, #0
 8002354:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800235e:	1d3b      	adds	r3, r7, #4
 8002360:	2200      	movs	r2, #0
 8002362:	4619      	mov	r1, r3
 8002364:	4805      	ldr	r0, [pc, #20]	; (800237c <MX_TIM5_Init+0xdc>)
 8002366:	f004 fb1f 	bl	80069a8 <HAL_TIM_PWM_ConfigChannel>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 8002370:	f000 fd3e 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002374:	bf00      	nop
 8002376:	3738      	adds	r7, #56	; 0x38
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	200003d8 	.word	0x200003d8
 8002380:	40000c00 	.word	0x40000c00
 8002384:	000f4240 	.word	0x000f4240

08002388 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800238e:	463b      	mov	r3, r7
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	609a      	str	r2, [r3, #8]
 8002398:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800239a:	4b16      	ldr	r3, [pc, #88]	; (80023f4 <MX_TIM9_Init+0x6c>)
 800239c:	4a16      	ldr	r2, [pc, #88]	; (80023f8 <MX_TIM9_Init+0x70>)
 800239e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 512;
 80023a0:	4b14      	ldr	r3, [pc, #80]	; (80023f4 <MX_TIM9_Init+0x6c>)
 80023a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023a6:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023a8:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <MX_TIM9_Init+0x6c>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 80023ae:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <MX_TIM9_Init+0x6c>)
 80023b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023b4:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023b6:	4b0f      	ldr	r3, [pc, #60]	; (80023f4 <MX_TIM9_Init+0x6c>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023bc:	4b0d      	ldr	r3, [pc, #52]	; (80023f4 <MX_TIM9_Init+0x6c>)
 80023be:	2200      	movs	r2, #0
 80023c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80023c2:	480c      	ldr	r0, [pc, #48]	; (80023f4 <MX_TIM9_Init+0x6c>)
 80023c4:	f003 fdee 	bl	8005fa4 <HAL_TIM_Base_Init>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 80023ce:	f000 fd0f 	bl	8002df0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023d6:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80023d8:	463b      	mov	r3, r7
 80023da:	4619      	mov	r1, r3
 80023dc:	4805      	ldr	r0, [pc, #20]	; (80023f4 <MX_TIM9_Init+0x6c>)
 80023de:	f004 fba5 	bl	8006b2c <HAL_TIM_ConfigClockSource>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 80023e8:	f000 fd02 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80023ec:	bf00      	nop
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	20000420 	.word	0x20000420
 80023f8:	40014000 	.word	0x40014000

080023fc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b088      	sub	sp, #32
 8002400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002402:	1d3b      	adds	r3, r7, #4
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	605a      	str	r2, [r3, #4]
 800240a:	609a      	str	r2, [r3, #8]
 800240c:	60da      	str	r2, [r3, #12]
 800240e:	611a      	str	r2, [r3, #16]
 8002410:	615a      	str	r2, [r3, #20]
 8002412:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002414:	4b1c      	ldr	r3, [pc, #112]	; (8002488 <MX_TIM10_Init+0x8c>)
 8002416:	4a1d      	ldr	r2, [pc, #116]	; (800248c <MX_TIM10_Init+0x90>)
 8002418:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 15;
 800241a:	4b1b      	ldr	r3, [pc, #108]	; (8002488 <MX_TIM10_Init+0x8c>)
 800241c:	220f      	movs	r2, #15
 800241e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002420:	4b19      	ldr	r3, [pc, #100]	; (8002488 <MX_TIM10_Init+0x8c>)
 8002422:	2200      	movs	r2, #0
 8002424:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8002426:	4b18      	ldr	r3, [pc, #96]	; (8002488 <MX_TIM10_Init+0x8c>)
 8002428:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800242c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800242e:	4b16      	ldr	r3, [pc, #88]	; (8002488 <MX_TIM10_Init+0x8c>)
 8002430:	2200      	movs	r2, #0
 8002432:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002434:	4b14      	ldr	r3, [pc, #80]	; (8002488 <MX_TIM10_Init+0x8c>)
 8002436:	2200      	movs	r2, #0
 8002438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800243a:	4813      	ldr	r0, [pc, #76]	; (8002488 <MX_TIM10_Init+0x8c>)
 800243c:	f003 fdb2 	bl	8005fa4 <HAL_TIM_Base_Init>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8002446:	f000 fcd3 	bl	8002df0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
 800244a:	480f      	ldr	r0, [pc, #60]	; (8002488 <MX_TIM10_Init+0x8c>)
 800244c:	f003 fe8b 	bl	8006166 <HAL_TIM_OC_Init>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8002456:	f000 fccb 	bl	8002df0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800245a:	2300      	movs	r3, #0
 800245c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800245e:	2300      	movs	r3, #0
 8002460:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002462:	2300      	movs	r3, #0
 8002464:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002466:	2300      	movs	r3, #0
 8002468:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800246a:	1d3b      	adds	r3, r7, #4
 800246c:	2200      	movs	r2, #0
 800246e:	4619      	mov	r1, r3
 8002470:	4805      	ldr	r0, [pc, #20]	; (8002488 <MX_TIM10_Init+0x8c>)
 8002472:	f004 fa3d 	bl	80068f0 <HAL_TIM_OC_ConfigChannel>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 800247c:	f000 fcb8 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002480:	bf00      	nop
 8002482:	3720      	adds	r7, #32
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	20000468 	.word	0x20000468
 800248c:	40014400 	.word	0x40014400

08002490 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b088      	sub	sp, #32
 8002494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002496:	1d3b      	adds	r3, r7, #4
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	605a      	str	r2, [r3, #4]
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	60da      	str	r2, [r3, #12]
 80024a2:	611a      	str	r2, [r3, #16]
 80024a4:	615a      	str	r2, [r3, #20]
 80024a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80024a8:	4b1c      	ldr	r3, [pc, #112]	; (800251c <MX_TIM11_Init+0x8c>)
 80024aa:	4a1d      	ldr	r2, [pc, #116]	; (8002520 <MX_TIM11_Init+0x90>)
 80024ac:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 15;
 80024ae:	4b1b      	ldr	r3, [pc, #108]	; (800251c <MX_TIM11_Init+0x8c>)
 80024b0:	220f      	movs	r2, #15
 80024b2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b4:	4b19      	ldr	r3, [pc, #100]	; (800251c <MX_TIM11_Init+0x8c>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80024ba:	4b18      	ldr	r3, [pc, #96]	; (800251c <MX_TIM11_Init+0x8c>)
 80024bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024c0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024c2:	4b16      	ldr	r3, [pc, #88]	; (800251c <MX_TIM11_Init+0x8c>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024c8:	4b14      	ldr	r3, [pc, #80]	; (800251c <MX_TIM11_Init+0x8c>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80024ce:	4813      	ldr	r0, [pc, #76]	; (800251c <MX_TIM11_Init+0x8c>)
 80024d0:	f003 fd68 	bl	8005fa4 <HAL_TIM_Base_Init>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80024da:	f000 fc89 	bl	8002df0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 80024de:	480f      	ldr	r0, [pc, #60]	; (800251c <MX_TIM11_Init+0x8c>)
 80024e0:	f003 fe41 	bl	8006166 <HAL_TIM_OC_Init>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80024ea:	f000 fc81 	bl	8002df0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80024ee:	2300      	movs	r3, #0
 80024f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024f6:	2300      	movs	r3, #0
 80024f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024fe:	1d3b      	adds	r3, r7, #4
 8002500:	2200      	movs	r2, #0
 8002502:	4619      	mov	r1, r3
 8002504:	4805      	ldr	r0, [pc, #20]	; (800251c <MX_TIM11_Init+0x8c>)
 8002506:	f004 f9f3 	bl	80068f0 <HAL_TIM_OC_ConfigChannel>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8002510:	f000 fc6e 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002514:	bf00      	nop
 8002516:	3720      	adds	r7, #32
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	200004b0 	.word	0x200004b0
 8002520:	40014800 	.word	0x40014800

08002524 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b08a      	sub	sp, #40	; 0x28
 8002528:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800252a:	f107 0314 	add.w	r3, r7, #20
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	605a      	str	r2, [r3, #4]
 8002534:	609a      	str	r2, [r3, #8]
 8002536:	60da      	str	r2, [r3, #12]
 8002538:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	613b      	str	r3, [r7, #16]
 800253e:	4b5a      	ldr	r3, [pc, #360]	; (80026a8 <MX_GPIO_Init+0x184>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	4a59      	ldr	r2, [pc, #356]	; (80026a8 <MX_GPIO_Init+0x184>)
 8002544:	f043 0304 	orr.w	r3, r3, #4
 8002548:	6313      	str	r3, [r2, #48]	; 0x30
 800254a:	4b57      	ldr	r3, [pc, #348]	; (80026a8 <MX_GPIO_Init+0x184>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	f003 0304 	and.w	r3, r3, #4
 8002552:	613b      	str	r3, [r7, #16]
 8002554:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	4b53      	ldr	r3, [pc, #332]	; (80026a8 <MX_GPIO_Init+0x184>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	4a52      	ldr	r2, [pc, #328]	; (80026a8 <MX_GPIO_Init+0x184>)
 8002560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002564:	6313      	str	r3, [r2, #48]	; 0x30
 8002566:	4b50      	ldr	r3, [pc, #320]	; (80026a8 <MX_GPIO_Init+0x184>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	60bb      	str	r3, [r7, #8]
 8002576:	4b4c      	ldr	r3, [pc, #304]	; (80026a8 <MX_GPIO_Init+0x184>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	4a4b      	ldr	r2, [pc, #300]	; (80026a8 <MX_GPIO_Init+0x184>)
 800257c:	f043 0301 	orr.w	r3, r3, #1
 8002580:	6313      	str	r3, [r2, #48]	; 0x30
 8002582:	4b49      	ldr	r3, [pc, #292]	; (80026a8 <MX_GPIO_Init+0x184>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	60bb      	str	r3, [r7, #8]
 800258c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800258e:	2300      	movs	r3, #0
 8002590:	607b      	str	r3, [r7, #4]
 8002592:	4b45      	ldr	r3, [pc, #276]	; (80026a8 <MX_GPIO_Init+0x184>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	4a44      	ldr	r2, [pc, #272]	; (80026a8 <MX_GPIO_Init+0x184>)
 8002598:	f043 0302 	orr.w	r3, r3, #2
 800259c:	6313      	str	r3, [r2, #48]	; 0x30
 800259e:	4b42      	ldr	r3, [pc, #264]	; (80026a8 <MX_GPIO_Init+0x184>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	607b      	str	r3, [r7, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BuiltInLED_Pin|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80025aa:	2200      	movs	r2, #0
 80025ac:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80025b0:	483e      	ldr	r0, [pc, #248]	; (80026ac <MX_GPIO_Init+0x188>)
 80025b2:	f001 fe17 	bl	80041e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_D3_Pin|LCD_D2_Pin|LCD_D1_Pin|LCD_D0_Pin
 80025b6:	2201      	movs	r2, #1
 80025b8:	21fc      	movs	r1, #252	; 0xfc
 80025ba:	483d      	ldr	r0, [pc, #244]	; (80026b0 <MX_GPIO_Init+0x18c>)
 80025bc:	f001 fe12 	bl	80041e4 <HAL_GPIO_WritePin>
                          |LCD_E_Pin|LCD_RS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SOLO_EN_CH1_Pin|SOLO_EN_CH2_Pin, GPIO_PIN_RESET);
 80025c0:	2200      	movs	r2, #0
 80025c2:	f248 0104 	movw	r1, #32772	; 0x8004
 80025c6:	483b      	ldr	r0, [pc, #236]	; (80026b4 <MX_GPIO_Init+0x190>)
 80025c8:	f001 fe0c 	bl	80041e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BuiltInLED_Pin */
  GPIO_InitStruct.Pin = BuiltInLED_Pin;
 80025cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025d2:	2301      	movs	r3, #1
 80025d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d6:	2300      	movs	r3, #0
 80025d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025da:	2300      	movs	r3, #0
 80025dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BuiltInLED_GPIO_Port, &GPIO_InitStruct);
 80025de:	f107 0314 	add.w	r3, r7, #20
 80025e2:	4619      	mov	r1, r3
 80025e4:	4831      	ldr	r0, [pc, #196]	; (80026ac <MX_GPIO_Init+0x188>)
 80025e6:	f001 fc61 	bl	8003eac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80025ea:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80025ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f0:	2301      	movs	r3, #1
 80025f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80025f4:	2302      	movs	r3, #2
 80025f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f8:	2300      	movs	r3, #0
 80025fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025fc:	f107 0314 	add.w	r3, r7, #20
 8002600:	4619      	mov	r1, r3
 8002602:	482a      	ldr	r0, [pc, #168]	; (80026ac <MX_GPIO_Init+0x188>)
 8002604:	f001 fc52 	bl	8003eac <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D3_Pin LCD_D2_Pin LCD_D1_Pin LCD_D0_Pin
                           LCD_E_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_D3_Pin|LCD_D2_Pin|LCD_D1_Pin|LCD_D0_Pin
 8002608:	23fc      	movs	r3, #252	; 0xfc
 800260a:	617b      	str	r3, [r7, #20]
                          |LCD_E_Pin|LCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800260c:	2301      	movs	r3, #1
 800260e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002610:	2300      	movs	r3, #0
 8002612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002614:	2300      	movs	r3, #0
 8002616:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002618:	f107 0314 	add.w	r3, r7, #20
 800261c:	4619      	mov	r1, r3
 800261e:	4824      	ldr	r0, [pc, #144]	; (80026b0 <MX_GPIO_Init+0x18c>)
 8002620:	f001 fc44 	bl	8003eac <HAL_GPIO_Init>

  /*Configure GPIO pin : FO_OUTPUT_EN_FB1_Pin */
  GPIO_InitStruct.Pin = FO_OUTPUT_EN_FB1_Pin;
 8002624:	2301      	movs	r3, #1
 8002626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002628:	2300      	movs	r3, #0
 800262a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800262c:	2301      	movs	r3, #1
 800262e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FO_OUTPUT_EN_FB1_GPIO_Port, &GPIO_InitStruct);
 8002630:	f107 0314 	add.w	r3, r7, #20
 8002634:	4619      	mov	r1, r3
 8002636:	481f      	ldr	r0, [pc, #124]	; (80026b4 <MX_GPIO_Init+0x190>)
 8002638:	f001 fc38 	bl	8003eac <HAL_GPIO_Init>

  /*Configure GPIO pin : FO_OUTPUT_EN_FB2_Pin */
  GPIO_InitStruct.Pin = FO_OUTPUT_EN_FB2_Pin;
 800263c:	2302      	movs	r3, #2
 800263e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002640:	2300      	movs	r3, #0
 8002642:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002644:	2300      	movs	r3, #0
 8002646:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FO_OUTPUT_EN_FB2_GPIO_Port, &GPIO_InitStruct);
 8002648:	f107 0314 	add.w	r3, r7, #20
 800264c:	4619      	mov	r1, r3
 800264e:	4819      	ldr	r0, [pc, #100]	; (80026b4 <MX_GPIO_Init+0x190>)
 8002650:	f001 fc2c 	bl	8003eac <HAL_GPIO_Init>

  /*Configure GPIO pins : SOLO_EN_CH1_Pin SOLO_EN_CH2_Pin */
  GPIO_InitStruct.Pin = SOLO_EN_CH1_Pin|SOLO_EN_CH2_Pin;
 8002654:	f248 0304 	movw	r3, #32772	; 0x8004
 8002658:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800265a:	2301      	movs	r3, #1
 800265c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800265e:	2302      	movs	r3, #2
 8002660:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002662:	2300      	movs	r3, #0
 8002664:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002666:	f107 0314 	add.w	r3, r7, #20
 800266a:	4619      	mov	r1, r3
 800266c:	4811      	ldr	r0, [pc, #68]	; (80026b4 <MX_GPIO_Init+0x190>)
 800266e:	f001 fc1d 	bl	8003eac <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_A_Pin ENC_B_Pin ENC_BUT_Pin */
  GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin|ENC_BUT_Pin;
 8002672:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002678:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800267c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800267e:	2301      	movs	r3, #1
 8002680:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002682:	f107 0314 	add.w	r3, r7, #20
 8002686:	4619      	mov	r1, r3
 8002688:	480a      	ldr	r0, [pc, #40]	; (80026b4 <MX_GPIO_Init+0x190>)
 800268a:	f001 fc0f 	bl	8003eac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 14, 0);
 800268e:	2200      	movs	r2, #0
 8002690:	210e      	movs	r1, #14
 8002692:	2017      	movs	r0, #23
 8002694:	f001 fbd3 	bl	8003e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002698:	2017      	movs	r0, #23
 800269a:	f001 fbec 	bl	8003e76 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800269e:	bf00      	nop
 80026a0:	3728      	adds	r7, #40	; 0x28
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40023800 	.word	0x40023800
 80026ac:	40020800 	.word	0x40020800
 80026b0:	40020000 	.word	0x40020000
 80026b4:	40020400 	.word	0x40020400

080026b8 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
    CDC_Transmit_FS((uint8_t*) ptr, len);
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	68b8      	ldr	r0, [r7, #8]
 80026c8:	f008 fbae 	bl	800ae28 <CDC_Transmit_FS>
    return len;
 80026cc:	687b      	ldr	r3, [r7, #4]
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
	...

080026d8 <checkChannelTimeouts>:


//Sometimes you need to forcefully shut down a frequency channel if it hasnt been updated in a while
void checkChannelTimeouts(){
 80026d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026dc:	af00      	add	r7, sp, #0


	  if((lastCHA1Time+MIDI_FREQ_TIMEOUT)<tim1_count)
 80026de:	4925      	ldr	r1, [pc, #148]	; (8002774 <checkChannelTimeouts+0x9c>)
 80026e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026e4:	f510 727a 	adds.w	r2, r0, #1000	; 0x3e8
 80026e8:	f141 0300 	adc.w	r3, r1, #0
 80026ec:	4922      	ldr	r1, [pc, #136]	; (8002778 <checkChannelTimeouts+0xa0>)
 80026ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026f2:	4282      	cmp	r2, r0
 80026f4:	418b      	sbcs	r3, r1
 80026f6:	d203      	bcs.n	8002700 <checkChannelTimeouts+0x28>
	  {
		  setCHAFreq1(0);
 80026f8:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800277c <checkChannelTimeouts+0xa4>
 80026fc:	f7fe fe86 	bl	800140c <setCHAFreq1>
	  }
	  if((lastCHA2Time+MIDI_FREQ_TIMEOUT)<tim1_count)
 8002700:	4b1f      	ldr	r3, [pc, #124]	; (8002780 <checkChannelTimeouts+0xa8>)
 8002702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002706:	f512 7a7a 	adds.w	sl, r2, #1000	; 0x3e8
 800270a:	f143 0b00 	adc.w	fp, r3, #0
 800270e:	4b1a      	ldr	r3, [pc, #104]	; (8002778 <checkChannelTimeouts+0xa0>)
 8002710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002714:	4592      	cmp	sl, r2
 8002716:	eb7b 0303 	sbcs.w	r3, fp, r3
 800271a:	d203      	bcs.n	8002724 <checkChannelTimeouts+0x4c>
	  {
		  setCHAFreq2(0);
 800271c:	ed9f 0a17 	vldr	s0, [pc, #92]	; 800277c <checkChannelTimeouts+0xa4>
 8002720:	f7fe fe88 	bl	8001434 <setCHAFreq2>
	  }
	  if((lastCHB1Time+MIDI_FREQ_TIMEOUT)<tim1_count)
 8002724:	4b17      	ldr	r3, [pc, #92]	; (8002784 <checkChannelTimeouts+0xac>)
 8002726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272a:	f512 787a 	adds.w	r8, r2, #1000	; 0x3e8
 800272e:	f143 0900 	adc.w	r9, r3, #0
 8002732:	4b11      	ldr	r3, [pc, #68]	; (8002778 <checkChannelTimeouts+0xa0>)
 8002734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002738:	4590      	cmp	r8, r2
 800273a:	eb79 0303 	sbcs.w	r3, r9, r3
 800273e:	d203      	bcs.n	8002748 <checkChannelTimeouts+0x70>
	  {
		  setCHBFreq1(0);
 8002740:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800277c <checkChannelTimeouts+0xa4>
 8002744:	f7fe fe8a 	bl	800145c <setCHBFreq1>
	  }
	  if((lastCHB2Time+MIDI_FREQ_TIMEOUT)<tim1_count)
 8002748:	4b0f      	ldr	r3, [pc, #60]	; (8002788 <checkChannelTimeouts+0xb0>)
 800274a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274e:	f512 747a 	adds.w	r4, r2, #1000	; 0x3e8
 8002752:	f143 0500 	adc.w	r5, r3, #0
 8002756:	4b08      	ldr	r3, [pc, #32]	; (8002778 <checkChannelTimeouts+0xa0>)
 8002758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275c:	4294      	cmp	r4, r2
 800275e:	eb75 0303 	sbcs.w	r3, r5, r3
 8002762:	d203      	bcs.n	800276c <checkChannelTimeouts+0x94>
	  {
		  setCHBFreq2(0);
 8002764:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800277c <checkChannelTimeouts+0xa4>
 8002768:	f7fe fe8c 	bl	8001484 <setCHBFreq2>
	  }
}
 800276c:	bf00      	nop
 800276e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002772:	bf00      	nop
 8002774:	20000188 	.word	0x20000188
 8002778:	200001a8 	.word	0x200001a8
 800277c:	00000000 	.word	0x00000000
 8002780:	20000190 	.word	0x20000190
 8002784:	20000198 	.word	0x20000198
 8002788:	200001a0 	.word	0x200001a0

0800278c <interuptCHA>:

void interuptCHA()
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CH1_Port, CH1_Pin, 0);
 8002790:	2200      	movs	r2, #0
 8002792:	2101      	movs	r1, #1
 8002794:	4805      	ldr	r0, [pc, #20]	; (80027ac <interuptCHA+0x20>)
 8002796:	f001 fd25 	bl	80041e4 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 800279a:	2100      	movs	r1, #0
 800279c:	4804      	ldr	r0, [pc, #16]	; (80027b0 <interuptCHA+0x24>)
 800279e:	f003 fe93 	bl	80064c8 <HAL_TIM_PWM_Stop_IT>
	dwell_block_CHA=CH_FREE;//Allow a firing
 80027a2:	4b04      	ldr	r3, [pc, #16]	; (80027b4 <interuptCHA+0x28>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	701a      	strb	r2, [r3, #0]

}
 80027a8:	bf00      	nop
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40020400 	.word	0x40020400
 80027b0:	20000348 	.word	0x20000348
 80027b4:	200001c0 	.word	0x200001c0

080027b8 <interuptCHB>:
void interuptCHB()
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(CH1_Port, CH1_Pin, 0);
	HAL_TIM_PWM_Stop_IT(&htim4, TIM_CHANNEL_3);
 80027bc:	2108      	movs	r1, #8
 80027be:	4804      	ldr	r0, [pc, #16]	; (80027d0 <interuptCHB+0x18>)
 80027c0:	f003 fe82 	bl	80064c8 <HAL_TIM_PWM_Stop_IT>
	dwell_block_CHB=CH_FREE;//Allow a firing
 80027c4:	4b03      	ldr	r3, [pc, #12]	; (80027d4 <interuptCHB+0x1c>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	701a      	strb	r2, [r3, #0]

}
 80027ca:	bf00      	nop
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20000390 	.word	0x20000390
 80027d4:	200001c1 	.word	0x200001c1

080027d8 <HAL_TIM_PeriodElapsedCallback>:
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027d8:	b5b0      	push	{r4, r5, r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
	 // Check which  timer triggered this callback
	  if (htim == &htim3 )//TIM3 fires fibre optic 1
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a20      	ldr	r2, [pc, #128]	; (8002864 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d105      	bne.n	80027f4 <HAL_TIM_PeriodElapsedCallback+0x1c>
	  {
		  HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 80027e8:	2100      	movs	r1, #0
 80027ea:	481e      	ldr	r0, [pc, #120]	; (8002864 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80027ec:	f003 fe6c 	bl	80064c8 <HAL_TIM_PWM_Stop_IT>
		  interuptCHA();
 80027f0:	f7ff ffcc 	bl	800278c <interuptCHA>
	  }
	  if (htim == &htim4 )//TIM4 fires fibre optic 2
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a1c      	ldr	r2, [pc, #112]	; (8002868 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d105      	bne.n	8002808 <HAL_TIM_PeriodElapsedCallback+0x30>
	  {
		  HAL_TIM_PWM_Stop_IT(&htim4, TIM_CHANNEL_3);
 80027fc:	2108      	movs	r1, #8
 80027fe:	481a      	ldr	r0, [pc, #104]	; (8002868 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002800:	f003 fe62 	bl	80064c8 <HAL_TIM_PWM_Stop_IT>
		  interuptCHB();
 8002804:	f7ff ffd8 	bl	80027b8 <interuptCHB>
	  }
	if (htim == &htim1 )//TIM1 is for the timeouts
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a18      	ldr	r2, [pc, #96]	; (800286c <HAL_TIM_PeriodElapsedCallback+0x94>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d108      	bne.n	8002822 <HAL_TIM_PeriodElapsedCallback+0x4a>
		  {
		   tim1_count++;
 8002810:	4b17      	ldr	r3, [pc, #92]	; (8002870 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002816:	1c54      	adds	r4, r2, #1
 8002818:	f143 0500 	adc.w	r5, r3, #0
 800281c:	4b14      	ldr	r3, [pc, #80]	; (8002870 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800281e:	e9c3 4500 	strd	r4, r5, [r3]
		  }
	  if (htim == &htim2 )
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a13      	ldr	r2, [pc, #76]	; (8002874 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d102      	bne.n	8002830 <HAL_TIM_PeriodElapsedCallback+0x58>
	  {
		fireCHA(1);
 800282a:	2001      	movs	r0, #1
 800282c:	f7fe fcc4 	bl	80011b8 <fireCHA>
	  }
	  if (htim == &htim5 )
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a11      	ldr	r2, [pc, #68]	; (8002878 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d102      	bne.n	800283e <HAL_TIM_PeriodElapsedCallback+0x66>
	  {
		  fireCHB(1);
 8002838:	2001      	movs	r0, #1
 800283a:	f7fe fce5 	bl	8001208 <fireCHB>
	  }
	  if (htim == &htim10 )
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a0e      	ldr	r2, [pc, #56]	; (800287c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d102      	bne.n	800284c <HAL_TIM_PeriodElapsedCallback+0x74>
	  {
		  fireCHA(2);
 8002846:	2002      	movs	r0, #2
 8002848:	f7fe fcb6 	bl	80011b8 <fireCHA>
	  }
	  if (htim == &htim11 )
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a0c      	ldr	r2, [pc, #48]	; (8002880 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d102      	bne.n	800285a <HAL_TIM_PeriodElapsedCallback+0x82>
	  {
		  fireCHB(2);
 8002854:	2002      	movs	r0, #2
 8002856:	f7fe fcd7 	bl	8001208 <fireCHB>
	  }
}
 800285a:	bf00      	nop
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bdb0      	pop	{r4, r5, r7, pc}
 8002862:	bf00      	nop
 8002864:	20000348 	.word	0x20000348
 8002868:	20000390 	.word	0x20000390
 800286c:	200002b8 	.word	0x200002b8
 8002870:	200001a8 	.word	0x200001a8
 8002874:	20000300 	.word	0x20000300
 8002878:	200003d8 	.word	0x200003d8
 800287c:	20000468 	.word	0x20000468
 8002880:	200004b0 	.word	0x200004b0

08002884 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t p)
{
 8002884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002888:	b087      	sub	sp, #28
 800288a:	af00      	add	r7, sp, #0
 800288c:	4603      	mov	r3, r0
 800288e:	81fb      	strh	r3, [r7, #14]
	//For check if the interupt were caused by the rotatary encoder.
	if(p== ENC_A_Pin||p==ENC_B_Pin)
 8002890:	89fb      	ldrh	r3, [r7, #14]
 8002892:	2b40      	cmp	r3, #64	; 0x40
 8002894:	d002      	beq.n	800289c <HAL_GPIO_EXTI_Callback+0x18>
 8002896:	89fb      	ldrh	r3, [r7, #14]
 8002898:	2b80      	cmp	r3, #128	; 0x80
 800289a:	d156      	bne.n	800294a <HAL_GPIO_EXTI_Callback+0xc6>
	{
		uint8_t temp = ((HAL_GPIO_ReadPin(ENC_A_GPIO_Port,ENC_A_Pin)<<1)&0x2)  | (HAL_GPIO_ReadPin(ENC_B_GPIO_Port,ENC_B_Pin)) ;
 800289c:	2140      	movs	r1, #64	; 0x40
 800289e:	4850      	ldr	r0, [pc, #320]	; (80029e0 <HAL_GPIO_EXTI_Callback+0x15c>)
 80028a0:	f001 fc88 	bl	80041b4 <HAL_GPIO_ReadPin>
 80028a4:	4603      	mov	r3, r0
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	b25b      	sxtb	r3, r3
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	b25e      	sxtb	r6, r3
 80028b0:	2180      	movs	r1, #128	; 0x80
 80028b2:	484b      	ldr	r0, [pc, #300]	; (80029e0 <HAL_GPIO_EXTI_Callback+0x15c>)
 80028b4:	f001 fc7e 	bl	80041b4 <HAL_GPIO_ReadPin>
 80028b8:	4603      	mov	r3, r0
 80028ba:	b25b      	sxtb	r3, r3
 80028bc:	4333      	orrs	r3, r6
 80028be:	b25b      	sxtb	r3, r3
 80028c0:	75fb      	strb	r3, [r7, #23]
		uint8_t diff = (temp^encoderPrev);
 80028c2:	4b48      	ldr	r3, [pc, #288]	; (80029e4 <HAL_GPIO_EXTI_Callback+0x160>)
 80028c4:	781a      	ldrb	r2, [r3, #0]
 80028c6:	7dfb      	ldrb	r3, [r7, #23]
 80028c8:	4053      	eors	r3, r2
 80028ca:	75bb      	strb	r3, [r7, #22]
		if(temp==0x02||temp==0x01){
 80028cc:	7dfb      	ldrb	r3, [r7, #23]
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d002      	beq.n	80028d8 <HAL_GPIO_EXTI_Callback+0x54>
 80028d2:	7dfb      	ldrb	r3, [r7, #23]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d10c      	bne.n	80028f2 <HAL_GPIO_EXTI_Callback+0x6e>
			//part turn
			//Define the directions here.
			if((diff&0x2)==0x2){
 80028d8:	7dbb      	ldrb	r3, [r7, #22]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_GPIO_EXTI_Callback+0x66>
				encDir=-1;
 80028e2:	4b41      	ldr	r3, [pc, #260]	; (80029e8 <HAL_GPIO_EXTI_Callback+0x164>)
 80028e4:	22ff      	movs	r2, #255	; 0xff
 80028e6:	701a      	strb	r2, [r3, #0]
			if((diff&0x2)==0x2){
 80028e8:	e02c      	b.n	8002944 <HAL_GPIO_EXTI_Callback+0xc0>
			}else{
				encDir=1;
 80028ea:	4b3f      	ldr	r3, [pc, #252]	; (80029e8 <HAL_GPIO_EXTI_Callback+0x164>)
 80028ec:	2201      	movs	r2, #1
 80028ee:	701a      	strb	r2, [r3, #0]
			if((diff&0x2)==0x2){
 80028f0:	e028      	b.n	8002944 <HAL_GPIO_EXTI_Callback+0xc0>
			}
		}else{
			//Trying to detect actual changes in encoder position.
			//In our case a full rotation, which would cause 2 interupts in a short period of time
			if((lastEncTime+100)<tim1_count)
 80028f2:	4b3e      	ldr	r3, [pc, #248]	; (80029ec <HAL_GPIO_EXTI_Callback+0x168>)
 80028f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f8:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 80028fc:	6039      	str	r1, [r7, #0]
 80028fe:	f143 0300 	adc.w	r3, r3, #0
 8002902:	607b      	str	r3, [r7, #4]
 8002904:	4b3a      	ldr	r3, [pc, #232]	; (80029f0 <HAL_GPIO_EXTI_Callback+0x16c>)
 8002906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290a:	6839      	ldr	r1, [r7, #0]
 800290c:	4291      	cmp	r1, r2
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	4199      	sbcs	r1, r3
 8002912:	d217      	bcs.n	8002944 <HAL_GPIO_EXTI_Callback+0xc0>
			{
				menuEncoderRotate(encDir);
 8002914:	4b34      	ldr	r3, [pc, #208]	; (80029e8 <HAL_GPIO_EXTI_Callback+0x164>)
 8002916:	f993 3000 	ldrsb.w	r3, [r3]
 800291a:	4618      	mov	r0, r3
 800291c:	f000 faa4 	bl	8002e68 <menuEncoderRotate>
				updateHardware();
 8002920:	f000 f9ca 	bl	8002cb8 <updateHardware>
				encPos += encDir;
 8002924:	4b33      	ldr	r3, [pc, #204]	; (80029f4 <HAL_GPIO_EXTI_Callback+0x170>)
 8002926:	781a      	ldrb	r2, [r3, #0]
 8002928:	4b2f      	ldr	r3, [pc, #188]	; (80029e8 <HAL_GPIO_EXTI_Callback+0x164>)
 800292a:	f993 3000 	ldrsb.w	r3, [r3]
 800292e:	b2db      	uxtb	r3, r3
 8002930:	4413      	add	r3, r2
 8002932:	b2da      	uxtb	r2, r3
 8002934:	4b2f      	ldr	r3, [pc, #188]	; (80029f4 <HAL_GPIO_EXTI_Callback+0x170>)
 8002936:	701a      	strb	r2, [r3, #0]
				lastEncTime=tim1_count;
 8002938:	4b2d      	ldr	r3, [pc, #180]	; (80029f0 <HAL_GPIO_EXTI_Callback+0x16c>)
 800293a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293e:	492b      	ldr	r1, [pc, #172]	; (80029ec <HAL_GPIO_EXTI_Callback+0x168>)
 8002940:	e9c1 2300 	strd	r2, r3, [r1]
			}
		}


		encoderPrev= temp;
 8002944:	4a27      	ldr	r2, [pc, #156]	; (80029e4 <HAL_GPIO_EXTI_Callback+0x160>)
 8002946:	7dfb      	ldrb	r3, [r7, #23]
 8002948:	7013      	strb	r3, [r2, #0]
	}
	//Interupt source is the Encoder button.
	if(p==ENC_BUT_Pin)
 800294a:	89fb      	ldrh	r3, [r7, #14]
 800294c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002950:	d141      	bne.n	80029d6 <HAL_GPIO_EXTI_Callback+0x152>
	{
		//for the riding edge
		if( HAL_GPIO_ReadPin(ENC_BUT_GPIO_Port,ENC_BUT_Pin)==1)
 8002952:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002956:	4822      	ldr	r0, [pc, #136]	; (80029e0 <HAL_GPIO_EXTI_Callback+0x15c>)
 8002958:	f001 fc2c 	bl	80041b4 <HAL_GPIO_ReadPin>
 800295c:	4603      	mov	r3, r0
 800295e:	2b01      	cmp	r3, #1
 8002960:	d11e      	bne.n	80029a0 <HAL_GPIO_EXTI_Callback+0x11c>
		{
			//If the last button press happened between 100 ms since the last button press
			if((lastButTime+100)<tim1_count&&(lastDoubleTime+500)<tim1_count)//SinglePress
 8002962:	4b25      	ldr	r3, [pc, #148]	; (80029f8 <HAL_GPIO_EXTI_Callback+0x174>)
 8002964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002968:	f112 0a64 	adds.w	sl, r2, #100	; 0x64
 800296c:	f143 0b00 	adc.w	fp, r3, #0
 8002970:	4b1f      	ldr	r3, [pc, #124]	; (80029f0 <HAL_GPIO_EXTI_Callback+0x16c>)
 8002972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002976:	4592      	cmp	sl, r2
 8002978:	eb7b 0303 	sbcs.w	r3, fp, r3
 800297c:	d225      	bcs.n	80029ca <HAL_GPIO_EXTI_Callback+0x146>
 800297e:	4b1f      	ldr	r3, [pc, #124]	; (80029fc <HAL_GPIO_EXTI_Callback+0x178>)
 8002980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002984:	f512 78fa 	adds.w	r8, r2, #500	; 0x1f4
 8002988:	f143 0900 	adc.w	r9, r3, #0
 800298c:	4b18      	ldr	r3, [pc, #96]	; (80029f0 <HAL_GPIO_EXTI_Callback+0x16c>)
 800298e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002992:	4590      	cmp	r8, r2
 8002994:	eb79 0303 	sbcs.w	r3, r9, r3
 8002998:	d217      	bcs.n	80029ca <HAL_GPIO_EXTI_Callback+0x146>
			{
				menuButPush();
 800299a:	f000 fc15 	bl	80031c8 <menuButPush>
 800299e:	e014      	b.n	80029ca <HAL_GPIO_EXTI_Callback+0x146>
			}
			//If the last button press was less than 500ms ago
		}else if((lastButTime+500)>tim1_count) {
 80029a0:	4b15      	ldr	r3, [pc, #84]	; (80029f8 <HAL_GPIO_EXTI_Callback+0x174>)
 80029a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a6:	f512 74fa 	adds.w	r4, r2, #500	; 0x1f4
 80029aa:	f143 0500 	adc.w	r5, r3, #0
 80029ae:	4b10      	ldr	r3, [pc, #64]	; (80029f0 <HAL_GPIO_EXTI_Callback+0x16c>)
 80029b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b4:	42a2      	cmp	r2, r4
 80029b6:	41ab      	sbcs	r3, r5
 80029b8:	d207      	bcs.n	80029ca <HAL_GPIO_EXTI_Callback+0x146>
				menuButDoublePush();
 80029ba:	f000 fc1b 	bl	80031f4 <menuButDoublePush>
				lastDoubleTime = tim1_count;
 80029be:	4b0c      	ldr	r3, [pc, #48]	; (80029f0 <HAL_GPIO_EXTI_Callback+0x16c>)
 80029c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c4:	490d      	ldr	r1, [pc, #52]	; (80029fc <HAL_GPIO_EXTI_Callback+0x178>)
 80029c6:	e9c1 2300 	strd	r2, r3, [r1]
		}

		lastButTime = tim1_count;
 80029ca:	4b09      	ldr	r3, [pc, #36]	; (80029f0 <HAL_GPIO_EXTI_Callback+0x16c>)
 80029cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d0:	4909      	ldr	r1, [pc, #36]	; (80029f8 <HAL_GPIO_EXTI_Callback+0x174>)
 80029d2:	e9c1 2300 	strd	r2, r3, [r1]
	}
}
 80029d6:	bf00      	nop
 80029d8:	371c      	adds	r7, #28
 80029da:	46bd      	mov	sp, r7
 80029dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029e0:	40020400 	.word	0x40020400
 80029e4:	200004f8 	.word	0x200004f8
 80029e8:	200004fa 	.word	0x200004fa
 80029ec:	20000500 	.word	0x20000500
 80029f0:	200001a8 	.word	0x200001a8
 80029f4:	200004f9 	.word	0x200004f9
 80029f8:	20000508 	.word	0x20000508
 80029fc:	20000510 	.word	0x20000510

08002a00 <shutdownFixedFreq>:
void shutdownFixedFreq(){
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
	//When we switch to MIDI we kill all fixed frequency commands.
	setCHAFreq1(0);
 8002a04:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8002a28 <shutdownFixedFreq+0x28>
 8002a08:	f7fe fd00 	bl	800140c <setCHAFreq1>
	setCHAFreq2(0);
 8002a0c:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8002a28 <shutdownFixedFreq+0x28>
 8002a10:	f7fe fd10 	bl	8001434 <setCHAFreq2>
	setCHBFreq1(0);
 8002a14:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8002a28 <shutdownFixedFreq+0x28>
 8002a18:	f7fe fd20 	bl	800145c <setCHBFreq1>
	setCHBFreq2(0);
 8002a1c:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8002a28 <shutdownFixedFreq+0x28>
 8002a20:	f7fe fd30 	bl	8001484 <setCHBFreq2>
}
 8002a24:	bf00      	nop
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	00000000 	.word	0x00000000

08002a2c <updateDisplay>:
void updateDisplay()
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
	Lcd_cursor(&lcd, 0,0);
 8002a30:	2200      	movs	r2, #0
 8002a32:	2100      	movs	r1, #0
 8002a34:	4833      	ldr	r0, [pc, #204]	; (8002b04 <updateDisplay+0xd8>)
 8002a36:	f7fe ffd9 	bl	80019ec <Lcd_cursor>
	Lcd_string(&lcd, currentMenuText());
 8002a3a:	f000 fc3d 	bl	80032b8 <currentMenuText>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	4619      	mov	r1, r3
 8002a42:	4830      	ldr	r0, [pc, #192]	; (8002b04 <updateDisplay+0xd8>)
 8002a44:	f7fe ffb2 	bl	80019ac <Lcd_string>
	Lcd_cursor(&lcd, 1,0);
 8002a48:	2200      	movs	r2, #0
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	482d      	ldr	r0, [pc, #180]	; (8002b04 <updateDisplay+0xd8>)
 8002a4e:	f7fe ffcd 	bl	80019ec <Lcd_cursor>
	Lcd_string(&lcd, currentSubMenuText());
 8002a52:	f000 fc4d 	bl	80032f0 <currentSubMenuText>
 8002a56:	4603      	mov	r3, r0
 8002a58:	4619      	mov	r1, r3
 8002a5a:	482a      	ldr	r0, [pc, #168]	; (8002b04 <updateDisplay+0xd8>)
 8002a5c:	f7fe ffa6 	bl	80019ac <Lcd_string>
	Lcd_cursor(&lcd, 1,13);
 8002a60:	220d      	movs	r2, #13
 8002a62:	2101      	movs	r1, #1
 8002a64:	4827      	ldr	r0, [pc, #156]	; (8002b04 <updateDisplay+0xd8>)
 8002a66:	f7fe ffc1 	bl	80019ec <Lcd_cursor>
	Lcd_int(&lcd, currentMenuParameter());
 8002a6a:	f000 fcd5 	bl	8003418 <currentMenuParameter>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	4619      	mov	r1, r3
 8002a72:	4824      	ldr	r0, [pc, #144]	; (8002b04 <updateDisplay+0xd8>)
 8002a74:	f7fe ff82 	bl	800197c <Lcd_int>

	//Indicators of Firing
	Lcd_cursor(&lcd, 0,14);
 8002a78:	220e      	movs	r2, #14
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	4821      	ldr	r0, [pc, #132]	; (8002b04 <updateDisplay+0xd8>)
 8002a7e:	f7fe ffb5 	bl	80019ec <Lcd_cursor>
	if(isFiringActiveCHA()){//Zero is active
 8002a82:	f7fe fd5b 	bl	800153c <isFiringActiveCHA>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d004      	beq.n	8002a96 <updateDisplay+0x6a>
		Lcd_string(&lcd, "*");
 8002a8c:	491e      	ldr	r1, [pc, #120]	; (8002b08 <updateDisplay+0xdc>)
 8002a8e:	481d      	ldr	r0, [pc, #116]	; (8002b04 <updateDisplay+0xd8>)
 8002a90:	f7fe ff8c 	bl	80019ac <Lcd_string>
 8002a94:	e00c      	b.n	8002ab0 <updateDisplay+0x84>
	}else{
		//display an S if solo is enabled
		if(FO_CHA_Params.enSolo)
 8002a96:	4b1d      	ldr	r3, [pc, #116]	; (8002b0c <updateDisplay+0xe0>)
 8002a98:	7d1b      	ldrb	r3, [r3, #20]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d004      	beq.n	8002aa8 <updateDisplay+0x7c>
		{
			Lcd_string(&lcd, "S");
 8002a9e:	491c      	ldr	r1, [pc, #112]	; (8002b10 <updateDisplay+0xe4>)
 8002aa0:	4818      	ldr	r0, [pc, #96]	; (8002b04 <updateDisplay+0xd8>)
 8002aa2:	f7fe ff83 	bl	80019ac <Lcd_string>
 8002aa6:	e003      	b.n	8002ab0 <updateDisplay+0x84>
		}else{
			Lcd_string(&lcd, "O");
 8002aa8:	491a      	ldr	r1, [pc, #104]	; (8002b14 <updateDisplay+0xe8>)
 8002aaa:	4816      	ldr	r0, [pc, #88]	; (8002b04 <updateDisplay+0xd8>)
 8002aac:	f7fe ff7e 	bl	80019ac <Lcd_string>
		}
	}
	if(isFiringActiveCHB()){//Zero is active
 8002ab0:	f7fe fd5a 	bl	8001568 <isFiringActiveCHB>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d004      	beq.n	8002ac4 <updateDisplay+0x98>
		Lcd_string(&lcd, "*");
 8002aba:	4913      	ldr	r1, [pc, #76]	; (8002b08 <updateDisplay+0xdc>)
 8002abc:	4811      	ldr	r0, [pc, #68]	; (8002b04 <updateDisplay+0xd8>)
 8002abe:	f7fe ff75 	bl	80019ac <Lcd_string>
 8002ac2:	e00c      	b.n	8002ade <updateDisplay+0xb2>
	}else{		//display an S if solo is enabled
		if(FO_CHB_Params.enSolo)
 8002ac4:	4b14      	ldr	r3, [pc, #80]	; (8002b18 <updateDisplay+0xec>)
 8002ac6:	7d1b      	ldrb	r3, [r3, #20]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d004      	beq.n	8002ad6 <updateDisplay+0xaa>
		{
			Lcd_string(&lcd, "S");
 8002acc:	4910      	ldr	r1, [pc, #64]	; (8002b10 <updateDisplay+0xe4>)
 8002ace:	480d      	ldr	r0, [pc, #52]	; (8002b04 <updateDisplay+0xd8>)
 8002ad0:	f7fe ff6c 	bl	80019ac <Lcd_string>
 8002ad4:	e003      	b.n	8002ade <updateDisplay+0xb2>
		}else{
			Lcd_string(&lcd, "O");
 8002ad6:	490f      	ldr	r1, [pc, #60]	; (8002b14 <updateDisplay+0xe8>)
 8002ad8:	480a      	ldr	r0, [pc, #40]	; (8002b04 <updateDisplay+0xd8>)
 8002ada:	f7fe ff67 	bl	80019ac <Lcd_string>
		}
	}

	updateDisplayFeedback();
 8002ade:	f000 f81f 	bl	8002b20 <updateDisplayFeedback>
	//Position of the cursor to indicate what is being edited.
	//Menu is indicated by the first character, parameter by the last.
	if(subMenuEditParam==1){
 8002ae2:	4b0e      	ldr	r3, [pc, #56]	; (8002b1c <updateDisplay+0xf0>)
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d105      	bne.n	8002af6 <updateDisplay+0xca>
		Lcd_cursor(&lcd, 1,15);
 8002aea:	220f      	movs	r2, #15
 8002aec:	2101      	movs	r1, #1
 8002aee:	4805      	ldr	r0, [pc, #20]	; (8002b04 <updateDisplay+0xd8>)
 8002af0:	f7fe ff7c 	bl	80019ec <Lcd_cursor>
	}else{
		Lcd_cursor(&lcd, 1,0);
	}

}
 8002af4:	e004      	b.n	8002b00 <updateDisplay+0xd4>
		Lcd_cursor(&lcd, 1,0);
 8002af6:	2200      	movs	r2, #0
 8002af8:	2101      	movs	r1, #1
 8002afa:	4802      	ldr	r0, [pc, #8]	; (8002b04 <updateDisplay+0xd8>)
 8002afc:	f7fe ff76 	bl	80019ec <Lcd_cursor>
}
 8002b00:	bf00      	nop
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	20000528 	.word	0x20000528
 8002b08:	0800d894 	.word	0x0800d894
 8002b0c:	20000544 	.word	0x20000544
 8002b10:	0800d898 	.word	0x0800d898
 8002b14:	0800d89c 	.word	0x0800d89c
 8002b18:	2000055c 	.word	0x2000055c
 8002b1c:	20000542 	.word	0x20000542

08002b20 <updateDisplayFeedback>:

void updateDisplayFeedback()
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
	if(currentMenuNO == 0){
 8002b24:	4b5d      	ldr	r3, [pc, #372]	; (8002c9c <updateDisplayFeedback+0x17c>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d15a      	bne.n	8002be2 <updateDisplayFeedback+0xc2>
		//Start of the 3rd Line
		Lcd_cursor(&lcd, 0,16);
 8002b2c:	2210      	movs	r2, #16
 8002b2e:	2100      	movs	r1, #0
 8002b30:	485b      	ldr	r0, [pc, #364]	; (8002ca0 <updateDisplayFeedback+0x180>)
 8002b32:	f7fe ff5b 	bl	80019ec <Lcd_cursor>
		Lcd_string(&lcd, "A");
 8002b36:	495b      	ldr	r1, [pc, #364]	; (8002ca4 <updateDisplayFeedback+0x184>)
 8002b38:	4859      	ldr	r0, [pc, #356]	; (8002ca0 <updateDisplayFeedback+0x180>)
 8002b3a:	f7fe ff37 	bl	80019ac <Lcd_string>
		Lcd_int(&lcd, FO_CHA_Params.FixedFrequency_1);
 8002b3e:	4b5a      	ldr	r3, [pc, #360]	; (8002ca8 <updateDisplayFeedback+0x188>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4619      	mov	r1, r3
 8002b44:	4856      	ldr	r0, [pc, #344]	; (8002ca0 <updateDisplayFeedback+0x180>)
 8002b46:	f7fe ff19 	bl	800197c <Lcd_int>
		Lcd_string(&lcd, "*");
 8002b4a:	4958      	ldr	r1, [pc, #352]	; (8002cac <updateDisplayFeedback+0x18c>)
 8002b4c:	4854      	ldr	r0, [pc, #336]	; (8002ca0 <updateDisplayFeedback+0x180>)
 8002b4e:	f7fe ff2d 	bl	80019ac <Lcd_string>
		Lcd_int(&lcd, FO_CHA_Params.FixedFrequency_2);
 8002b52:	4b55      	ldr	r3, [pc, #340]	; (8002ca8 <updateDisplayFeedback+0x188>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	4619      	mov	r1, r3
 8002b58:	4851      	ldr	r0, [pc, #324]	; (8002ca0 <updateDisplayFeedback+0x180>)
 8002b5a:	f7fe ff0f 	bl	800197c <Lcd_int>
		Lcd_string(&lcd, "*");
 8002b5e:	4953      	ldr	r1, [pc, #332]	; (8002cac <updateDisplayFeedback+0x18c>)
 8002b60:	484f      	ldr	r0, [pc, #316]	; (8002ca0 <updateDisplayFeedback+0x180>)
 8002b62:	f7fe ff23 	bl	80019ac <Lcd_string>
		Lcd_int(&lcd, FO_CHA_Params.onTime);
 8002b66:	4b50      	ldr	r3, [pc, #320]	; (8002ca8 <updateDisplayFeedback+0x188>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	484c      	ldr	r0, [pc, #304]	; (8002ca0 <updateDisplayFeedback+0x180>)
 8002b6e:	f7fe ff05 	bl	800197c <Lcd_int>
		Lcd_string(&lcd, "*");
 8002b72:	494e      	ldr	r1, [pc, #312]	; (8002cac <updateDisplayFeedback+0x18c>)
 8002b74:	484a      	ldr	r0, [pc, #296]	; (8002ca0 <updateDisplayFeedback+0x180>)
 8002b76:	f7fe ff19 	bl	80019ac <Lcd_string>
		Lcd_int(&lcd, FO_CHA_Params.dwellTime);
 8002b7a:	4b4b      	ldr	r3, [pc, #300]	; (8002ca8 <updateDisplayFeedback+0x188>)
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4847      	ldr	r0, [pc, #284]	; (8002ca0 <updateDisplayFeedback+0x180>)
 8002b82:	f7fe fefb 	bl	800197c <Lcd_int>
		//Start of the 4rd Line
		Lcd_cursor(&lcd, 1,16);
 8002b86:	2210      	movs	r2, #16
 8002b88:	2101      	movs	r1, #1
 8002b8a:	4845      	ldr	r0, [pc, #276]	; (8002ca0 <updateDisplayFeedback+0x180>)
 8002b8c:	f7fe ff2e 	bl	80019ec <Lcd_cursor>
		Lcd_string(&lcd, "B");
 8002b90:	4947      	ldr	r1, [pc, #284]	; (8002cb0 <updateDisplayFeedback+0x190>)
 8002b92:	4843      	ldr	r0, [pc, #268]	; (8002ca0 <updateDisplayFeedback+0x180>)
 8002b94:	f7fe ff0a 	bl	80019ac <Lcd_string>
		Lcd_int(&lcd, FO_CHB_Params.FixedFrequency_1);
 8002b98:	4b46      	ldr	r3, [pc, #280]	; (8002cb4 <updateDisplayFeedback+0x194>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4840      	ldr	r0, [pc, #256]	; (8002ca0 <updateDisplayFeedback+0x180>)
 8002ba0:	f7fe feec 	bl	800197c <Lcd_int>
		Lcd_string(&lcd, "*");
 8002ba4:	4941      	ldr	r1, [pc, #260]	; (8002cac <updateDisplayFeedback+0x18c>)
 8002ba6:	483e      	ldr	r0, [pc, #248]	; (8002ca0 <updateDisplayFeedback+0x180>)
 8002ba8:	f7fe ff00 	bl	80019ac <Lcd_string>
		Lcd_int(&lcd, FO_CHB_Params.FixedFrequency_2);
 8002bac:	4b41      	ldr	r3, [pc, #260]	; (8002cb4 <updateDisplayFeedback+0x194>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	483b      	ldr	r0, [pc, #236]	; (8002ca0 <updateDisplayFeedback+0x180>)
 8002bb4:	f7fe fee2 	bl	800197c <Lcd_int>
		Lcd_string(&lcd, "*");
 8002bb8:	493c      	ldr	r1, [pc, #240]	; (8002cac <updateDisplayFeedback+0x18c>)
 8002bba:	4839      	ldr	r0, [pc, #228]	; (8002ca0 <updateDisplayFeedback+0x180>)
 8002bbc:	f7fe fef6 	bl	80019ac <Lcd_string>
		Lcd_int(&lcd, FO_CHB_Params.onTime);
 8002bc0:	4b3c      	ldr	r3, [pc, #240]	; (8002cb4 <updateDisplayFeedback+0x194>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4836      	ldr	r0, [pc, #216]	; (8002ca0 <updateDisplayFeedback+0x180>)
 8002bc8:	f7fe fed8 	bl	800197c <Lcd_int>
		Lcd_string(&lcd, "*");
 8002bcc:	4937      	ldr	r1, [pc, #220]	; (8002cac <updateDisplayFeedback+0x18c>)
 8002bce:	4834      	ldr	r0, [pc, #208]	; (8002ca0 <updateDisplayFeedback+0x180>)
 8002bd0:	f7fe feec 	bl	80019ac <Lcd_string>
		Lcd_int(&lcd, FO_CHB_Params.dwellTime);
 8002bd4:	4b37      	ldr	r3, [pc, #220]	; (8002cb4 <updateDisplayFeedback+0x194>)
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4831      	ldr	r0, [pc, #196]	; (8002ca0 <updateDisplayFeedback+0x180>)
 8002bdc:	f7fe fece 	bl	800197c <Lcd_int>
		Lcd_int(&lcd, FO_CHB_Params.onTime);
		Lcd_string(&lcd, "*");
		Lcd_int(&lcd, FO_CHB_Params.dwellTime);
	}

}
 8002be0:	e059      	b.n	8002c96 <updateDisplayFeedback+0x176>
		Lcd_cursor(&lcd, 0,16);
 8002be2:	2210      	movs	r2, #16
 8002be4:	2100      	movs	r1, #0
 8002be6:	482e      	ldr	r0, [pc, #184]	; (8002ca0 <updateDisplayFeedback+0x180>)
 8002be8:	f7fe ff00 	bl	80019ec <Lcd_cursor>
		Lcd_string(&lcd, "A");
 8002bec:	492d      	ldr	r1, [pc, #180]	; (8002ca4 <updateDisplayFeedback+0x184>)
 8002bee:	482c      	ldr	r0, [pc, #176]	; (8002ca0 <updateDisplayFeedback+0x180>)
 8002bf0:	f7fe fedc 	bl	80019ac <Lcd_string>
		Lcd_int(&lcd, FO_CHA_Params.midiCh1);
 8002bf4:	4b2c      	ldr	r3, [pc, #176]	; (8002ca8 <updateDisplayFeedback+0x188>)
 8002bf6:	7a1b      	ldrb	r3, [r3, #8]
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4829      	ldr	r0, [pc, #164]	; (8002ca0 <updateDisplayFeedback+0x180>)
 8002bfc:	f7fe febe 	bl	800197c <Lcd_int>
		Lcd_string(&lcd, "*");
 8002c00:	492a      	ldr	r1, [pc, #168]	; (8002cac <updateDisplayFeedback+0x18c>)
 8002c02:	4827      	ldr	r0, [pc, #156]	; (8002ca0 <updateDisplayFeedback+0x180>)
 8002c04:	f7fe fed2 	bl	80019ac <Lcd_string>
		Lcd_int(&lcd, FO_CHA_Params.midiCh2);
 8002c08:	4b27      	ldr	r3, [pc, #156]	; (8002ca8 <updateDisplayFeedback+0x188>)
 8002c0a:	7a5b      	ldrb	r3, [r3, #9]
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4824      	ldr	r0, [pc, #144]	; (8002ca0 <updateDisplayFeedback+0x180>)
 8002c10:	f7fe feb4 	bl	800197c <Lcd_int>
		Lcd_string(&lcd, "*");
 8002c14:	4925      	ldr	r1, [pc, #148]	; (8002cac <updateDisplayFeedback+0x18c>)
 8002c16:	4822      	ldr	r0, [pc, #136]	; (8002ca0 <updateDisplayFeedback+0x180>)
 8002c18:	f7fe fec8 	bl	80019ac <Lcd_string>
		Lcd_int(&lcd, FO_CHA_Params.onTime);
 8002c1c:	4b22      	ldr	r3, [pc, #136]	; (8002ca8 <updateDisplayFeedback+0x188>)
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	4619      	mov	r1, r3
 8002c22:	481f      	ldr	r0, [pc, #124]	; (8002ca0 <updateDisplayFeedback+0x180>)
 8002c24:	f7fe feaa 	bl	800197c <Lcd_int>
		Lcd_string(&lcd, "*");
 8002c28:	4920      	ldr	r1, [pc, #128]	; (8002cac <updateDisplayFeedback+0x18c>)
 8002c2a:	481d      	ldr	r0, [pc, #116]	; (8002ca0 <updateDisplayFeedback+0x180>)
 8002c2c:	f7fe febe 	bl	80019ac <Lcd_string>
		Lcd_int(&lcd, FO_CHA_Params.dwellTime);
 8002c30:	4b1d      	ldr	r3, [pc, #116]	; (8002ca8 <updateDisplayFeedback+0x188>)
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	4619      	mov	r1, r3
 8002c36:	481a      	ldr	r0, [pc, #104]	; (8002ca0 <updateDisplayFeedback+0x180>)
 8002c38:	f7fe fea0 	bl	800197c <Lcd_int>
		Lcd_cursor(&lcd, 1,16);
 8002c3c:	2210      	movs	r2, #16
 8002c3e:	2101      	movs	r1, #1
 8002c40:	4817      	ldr	r0, [pc, #92]	; (8002ca0 <updateDisplayFeedback+0x180>)
 8002c42:	f7fe fed3 	bl	80019ec <Lcd_cursor>
		Lcd_string(&lcd, "B");
 8002c46:	491a      	ldr	r1, [pc, #104]	; (8002cb0 <updateDisplayFeedback+0x190>)
 8002c48:	4815      	ldr	r0, [pc, #84]	; (8002ca0 <updateDisplayFeedback+0x180>)
 8002c4a:	f7fe feaf 	bl	80019ac <Lcd_string>
		Lcd_int(&lcd, FO_CHB_Params.midiCh1);
 8002c4e:	4b19      	ldr	r3, [pc, #100]	; (8002cb4 <updateDisplayFeedback+0x194>)
 8002c50:	7a1b      	ldrb	r3, [r3, #8]
 8002c52:	4619      	mov	r1, r3
 8002c54:	4812      	ldr	r0, [pc, #72]	; (8002ca0 <updateDisplayFeedback+0x180>)
 8002c56:	f7fe fe91 	bl	800197c <Lcd_int>
		Lcd_string(&lcd, "*");
 8002c5a:	4914      	ldr	r1, [pc, #80]	; (8002cac <updateDisplayFeedback+0x18c>)
 8002c5c:	4810      	ldr	r0, [pc, #64]	; (8002ca0 <updateDisplayFeedback+0x180>)
 8002c5e:	f7fe fea5 	bl	80019ac <Lcd_string>
		Lcd_int(&lcd, FO_CHB_Params.midiCh2);
 8002c62:	4b14      	ldr	r3, [pc, #80]	; (8002cb4 <updateDisplayFeedback+0x194>)
 8002c64:	7a5b      	ldrb	r3, [r3, #9]
 8002c66:	4619      	mov	r1, r3
 8002c68:	480d      	ldr	r0, [pc, #52]	; (8002ca0 <updateDisplayFeedback+0x180>)
 8002c6a:	f7fe fe87 	bl	800197c <Lcd_int>
		Lcd_string(&lcd, "*");
 8002c6e:	490f      	ldr	r1, [pc, #60]	; (8002cac <updateDisplayFeedback+0x18c>)
 8002c70:	480b      	ldr	r0, [pc, #44]	; (8002ca0 <updateDisplayFeedback+0x180>)
 8002c72:	f7fe fe9b 	bl	80019ac <Lcd_string>
		Lcd_int(&lcd, FO_CHB_Params.onTime);
 8002c76:	4b0f      	ldr	r3, [pc, #60]	; (8002cb4 <updateDisplayFeedback+0x194>)
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4808      	ldr	r0, [pc, #32]	; (8002ca0 <updateDisplayFeedback+0x180>)
 8002c7e:	f7fe fe7d 	bl	800197c <Lcd_int>
		Lcd_string(&lcd, "*");
 8002c82:	490a      	ldr	r1, [pc, #40]	; (8002cac <updateDisplayFeedback+0x18c>)
 8002c84:	4806      	ldr	r0, [pc, #24]	; (8002ca0 <updateDisplayFeedback+0x180>)
 8002c86:	f7fe fe91 	bl	80019ac <Lcd_string>
		Lcd_int(&lcd, FO_CHB_Params.dwellTime);
 8002c8a:	4b0a      	ldr	r3, [pc, #40]	; (8002cb4 <updateDisplayFeedback+0x194>)
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4803      	ldr	r0, [pc, #12]	; (8002ca0 <updateDisplayFeedback+0x180>)
 8002c92:	f7fe fe73 	bl	800197c <Lcd_int>
}
 8002c96:	bf00      	nop
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	20000540 	.word	0x20000540
 8002ca0:	20000528 	.word	0x20000528
 8002ca4:	0800d8a0 	.word	0x0800d8a0
 8002ca8:	20000544 	.word	0x20000544
 8002cac:	0800d894 	.word	0x0800d894
 8002cb0:	0800d8a4 	.word	0x0800d8a4
 8002cb4:	2000055c 	.word	0x2000055c

08002cb8 <updateHardware>:
void updateHardware(){
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
	if(currentMenuNO == FIXED_F_MENU_NO)
 8002cbc:	4b49      	ldr	r3, [pc, #292]	; (8002de4 <updateHardware+0x12c>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d15a      	bne.n	8002d7a <updateHardware+0xc2>
	{
		//These Params come from the menu.'
		setCHAFreq1(FO_CHA_Params.FixedFrequency_1);
 8002cc4:	4b48      	ldr	r3, [pc, #288]	; (8002de8 <updateHardware+0x130>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	ee07 3a90 	vmov	s15, r3
 8002ccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cd0:	eeb0 0a67 	vmov.f32	s0, s15
 8002cd4:	f7fe fb9a 	bl	800140c <setCHAFreq1>
		setCHAFreq2(FO_CHA_Params.FixedFrequency_2);
 8002cd8:	4b43      	ldr	r3, [pc, #268]	; (8002de8 <updateHardware+0x130>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	ee07 3a90 	vmov	s15, r3
 8002ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ce4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ce8:	f7fe fba4 	bl	8001434 <setCHAFreq2>
		setCHAActivePeriod(FO_CHA_Params.onTime);
 8002cec:	4b3e      	ldr	r3, [pc, #248]	; (8002de8 <updateHardware+0x130>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	ee07 3a90 	vmov	s15, r3
 8002cf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cf8:	eeb0 0a67 	vmov.f32	s0, s15
 8002cfc:	f7fe f964 	bl	8000fc8 <setCHAActivePeriod>
		setCHADwellPeriod(FO_CHA_Params.dwellTime);
 8002d00:	4b39      	ldr	r3, [pc, #228]	; (8002de8 <updateHardware+0x130>)
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	ee07 3a90 	vmov	s15, r3
 8002d08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d0c:	eeb0 0a67 	vmov.f32	s0, s15
 8002d10:	f7fe f982 	bl	8001018 <setCHADwellPeriod>
		setCHASoloEnable(FO_CHA_Params.enSolo);
 8002d14:	4b34      	ldr	r3, [pc, #208]	; (8002de8 <updateHardware+0x130>)
 8002d16:	7d1b      	ldrb	r3, [r3, #20]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fe fc3b 	bl	8001594 <setCHASoloEnable>
		//These Params come from the menu.'
		setCHBFreq1(FO_CHB_Params.FixedFrequency_1);
 8002d1e:	4b33      	ldr	r3, [pc, #204]	; (8002dec <updateHardware+0x134>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	ee07 3a90 	vmov	s15, r3
 8002d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d2a:	eeb0 0a67 	vmov.f32	s0, s15
 8002d2e:	f7fe fb95 	bl	800145c <setCHBFreq1>
		setCHBFreq2(FO_CHB_Params.FixedFrequency_2);
 8002d32:	4b2e      	ldr	r3, [pc, #184]	; (8002dec <updateHardware+0x134>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	ee07 3a90 	vmov	s15, r3
 8002d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d3e:	eeb0 0a67 	vmov.f32	s0, s15
 8002d42:	f7fe fb9f 	bl	8001484 <setCHBFreq2>
		setCHBActivePeriod(FO_CHB_Params.onTime);
 8002d46:	4b29      	ldr	r3, [pc, #164]	; (8002dec <updateHardware+0x134>)
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	ee07 3a90 	vmov	s15, r3
 8002d4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d52:	eeb0 0a67 	vmov.f32	s0, s15
 8002d56:	f7fe f987 	bl	8001068 <setCHBActivePeriod>
		//setCHBActivePeriod(40);
		setCHBDwellPeriod(FO_CHB_Params.dwellTime);
 8002d5a:	4b24      	ldr	r3, [pc, #144]	; (8002dec <updateHardware+0x134>)
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	ee07 3a90 	vmov	s15, r3
 8002d62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d66:	eeb0 0a67 	vmov.f32	s0, s15
 8002d6a:	f7fe f9a5 	bl	80010b8 <setCHBDwellPeriod>
		setCHBSoloEnable(FO_CHB_Params.enSolo);
 8002d6e:	4b1f      	ldr	r3, [pc, #124]	; (8002dec <updateHardware+0x134>)
 8002d70:	7d1b      	ldrb	r3, [r3, #20]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fe fc24 	bl	80015c0 <setCHBSoloEnable>
		setCHBActivePeriod(FO_CHB_Params.onTime);
		setCHBDwellPeriod(FO_CHB_Params.dwellTime);
		setCHBSoloEnable(FO_CHB_Params.enSolo);
	}

}
 8002d78:	e031      	b.n	8002dde <updateHardware+0x126>
		setCHAActivePeriod(FO_CHA_Params.onTime);
 8002d7a:	4b1b      	ldr	r3, [pc, #108]	; (8002de8 <updateHardware+0x130>)
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	ee07 3a90 	vmov	s15, r3
 8002d82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d86:	eeb0 0a67 	vmov.f32	s0, s15
 8002d8a:	f7fe f91d 	bl	8000fc8 <setCHAActivePeriod>
		setCHADwellPeriod(FO_CHA_Params.dwellTime);
 8002d8e:	4b16      	ldr	r3, [pc, #88]	; (8002de8 <updateHardware+0x130>)
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	ee07 3a90 	vmov	s15, r3
 8002d96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d9a:	eeb0 0a67 	vmov.f32	s0, s15
 8002d9e:	f7fe f93b 	bl	8001018 <setCHADwellPeriod>
		setCHASoloEnable(FO_CHA_Params.enSolo);
 8002da2:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <updateHardware+0x130>)
 8002da4:	7d1b      	ldrb	r3, [r3, #20]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7fe fbf4 	bl	8001594 <setCHASoloEnable>
		setCHBActivePeriod(FO_CHB_Params.onTime);
 8002dac:	4b0f      	ldr	r3, [pc, #60]	; (8002dec <updateHardware+0x134>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	ee07 3a90 	vmov	s15, r3
 8002db4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002db8:	eeb0 0a67 	vmov.f32	s0, s15
 8002dbc:	f7fe f954 	bl	8001068 <setCHBActivePeriod>
		setCHBDwellPeriod(FO_CHB_Params.dwellTime);
 8002dc0:	4b0a      	ldr	r3, [pc, #40]	; (8002dec <updateHardware+0x134>)
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	ee07 3a90 	vmov	s15, r3
 8002dc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dcc:	eeb0 0a67 	vmov.f32	s0, s15
 8002dd0:	f7fe f972 	bl	80010b8 <setCHBDwellPeriod>
		setCHBSoloEnable(FO_CHB_Params.enSolo);
 8002dd4:	4b05      	ldr	r3, [pc, #20]	; (8002dec <updateHardware+0x134>)
 8002dd6:	7d1b      	ldrb	r3, [r3, #20]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7fe fbf1 	bl	80015c0 <setCHBSoloEnable>
}
 8002dde:	bf00      	nop
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	20000540 	.word	0x20000540
 8002de8:	20000544 	.word	0x20000544
 8002dec:	2000055c 	.word	0x2000055c

08002df0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002df4:	b672      	cpsid	i
}
 8002df6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002df8:	e7fe      	b.n	8002df8 <Error_Handler+0x8>
	...

08002dfc <initMenu>:


FO_SystemParams FO_CHA_Params;
FO_SystemParams FO_CHB_Params;

void initMenu(){
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
	//Default Params
	FO_CHA_Params.FixedFrequency_1 = 100;
 8002e00:	4b17      	ldr	r3, [pc, #92]	; (8002e60 <initMenu+0x64>)
 8002e02:	2264      	movs	r2, #100	; 0x64
 8002e04:	601a      	str	r2, [r3, #0]
	FO_CHA_Params.FixedFrequency_2 = 0;
 8002e06:	4b16      	ldr	r3, [pc, #88]	; (8002e60 <initMenu+0x64>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	605a      	str	r2, [r3, #4]
	FO_CHA_Params.midiCh1 = 1;
 8002e0c:	4b14      	ldr	r3, [pc, #80]	; (8002e60 <initMenu+0x64>)
 8002e0e:	2201      	movs	r2, #1
 8002e10:	721a      	strb	r2, [r3, #8]
	FO_CHA_Params.midiCh2 = 0;
 8002e12:	4b13      	ldr	r3, [pc, #76]	; (8002e60 <initMenu+0x64>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	725a      	strb	r2, [r3, #9]
	FO_CHA_Params.onTime = 20;
 8002e18:	4b11      	ldr	r3, [pc, #68]	; (8002e60 <initMenu+0x64>)
 8002e1a:	2214      	movs	r2, #20
 8002e1c:	60da      	str	r2, [r3, #12]
	FO_CHA_Params.dwellTime = 200;
 8002e1e:	4b10      	ldr	r3, [pc, #64]	; (8002e60 <initMenu+0x64>)
 8002e20:	22c8      	movs	r2, #200	; 0xc8
 8002e22:	611a      	str	r2, [r3, #16]
	FO_CHA_Params.enSolo = 0;
 8002e24:	4b0e      	ldr	r3, [pc, #56]	; (8002e60 <initMenu+0x64>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	751a      	strb	r2, [r3, #20]

	FO_CHB_Params.FixedFrequency_1 = 100;
 8002e2a:	4b0e      	ldr	r3, [pc, #56]	; (8002e64 <initMenu+0x68>)
 8002e2c:	2264      	movs	r2, #100	; 0x64
 8002e2e:	601a      	str	r2, [r3, #0]
	FO_CHB_Params.FixedFrequency_2 = 0;
 8002e30:	4b0c      	ldr	r3, [pc, #48]	; (8002e64 <initMenu+0x68>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	605a      	str	r2, [r3, #4]
	FO_CHB_Params.midiCh1 = 2;
 8002e36:	4b0b      	ldr	r3, [pc, #44]	; (8002e64 <initMenu+0x68>)
 8002e38:	2202      	movs	r2, #2
 8002e3a:	721a      	strb	r2, [r3, #8]
	FO_CHB_Params.midiCh2 = 3;
 8002e3c:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <initMenu+0x68>)
 8002e3e:	2203      	movs	r2, #3
 8002e40:	725a      	strb	r2, [r3, #9]
	FO_CHB_Params.onTime = 20;
 8002e42:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <initMenu+0x68>)
 8002e44:	2214      	movs	r2, #20
 8002e46:	60da      	str	r2, [r3, #12]
	FO_CHB_Params.dwellTime = 200;
 8002e48:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <initMenu+0x68>)
 8002e4a:	22c8      	movs	r2, #200	; 0xc8
 8002e4c:	611a      	str	r2, [r3, #16]
	FO_CHB_Params.enSolo = 0;
 8002e4e:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <initMenu+0x68>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	751a      	strb	r2, [r3, #20]


}
 8002e54:	bf00      	nop
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	20000544 	.word	0x20000544
 8002e64:	2000055c 	.word	0x2000055c

08002e68 <menuEncoderRotate>:

void menuEncoderRotate(int dir){
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
	if(subMenuEditParam==0)
 8002e70:	4b07      	ldr	r3, [pc, #28]	; (8002e90 <menuEncoderRotate+0x28>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d103      	bne.n	8002e80 <menuEncoderRotate+0x18>
	{
		advanceSubMenu(dir);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 f9c1 	bl	8003200 <advanceSubMenu>
	}else{
		advanceParam(dir);
	}

}
 8002e7e:	e002      	b.n	8002e86 <menuEncoderRotate+0x1e>
		advanceParam(dir);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 f807 	bl	8002e94 <advanceParam>
}
 8002e86:	bf00      	nop
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	20000542 	.word	0x20000542

08002e94 <advanceParam>:
void advanceParam(int dir)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
	switch(currentMenuNO){//Fixed Frequency
 8002e9c:	4b54      	ldr	r3, [pc, #336]	; (8002ff0 <advanceParam+0x15c>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d002      	beq.n	8002eaa <advanceParam+0x16>
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d04f      	beq.n	8002f48 <advanceParam+0xb4>
				break;
		}
		break;

		default:
			break;
 8002ea8:	e09e      	b.n	8002fe8 <advanceParam+0x154>
		switch(currentSubMenuNO){
 8002eaa:	4b52      	ldr	r3, [pc, #328]	; (8002ff4 <advanceParam+0x160>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b09      	cmp	r3, #9
 8002eb0:	d848      	bhi.n	8002f44 <advanceParam+0xb0>
 8002eb2:	a201      	add	r2, pc, #4	; (adr r2, 8002eb8 <advanceParam+0x24>)
 8002eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb8:	08002ee1 	.word	0x08002ee1
 8002ebc:	08002eeb 	.word	0x08002eeb
 8002ec0:	08002ef5 	.word	0x08002ef5
 8002ec4:	08002f01 	.word	0x08002f01
 8002ec8:	08002f0b 	.word	0x08002f0b
 8002ecc:	08002f13 	.word	0x08002f13
 8002ed0:	08002f1d 	.word	0x08002f1d
 8002ed4:	08002f27 	.word	0x08002f27
 8002ed8:	08002f33 	.word	0x08002f33
 8002edc:	08002f3d 	.word	0x08002f3d
				advanceF1(&FO_CHA_Params,dir);
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	4845      	ldr	r0, [pc, #276]	; (8002ff8 <advanceParam+0x164>)
 8002ee4:	f000 f8a6 	bl	8003034 <advanceF1>
				break;
 8002ee8:	e02d      	b.n	8002f46 <advanceParam+0xb2>
				advanceF2(&FO_CHA_Params,dir);
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	4842      	ldr	r0, [pc, #264]	; (8002ff8 <advanceParam+0x164>)
 8002eee:	f000 f8c0 	bl	8003072 <advanceF2>
				break;
 8002ef2:	e028      	b.n	8002f46 <advanceParam+0xb2>
				advanceDel(&FO_CHA_Params,dir,A_SIDE_DELAY);
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	483f      	ldr	r0, [pc, #252]	; (8002ff8 <advanceParam+0x164>)
 8002efa:	f000 f8d9 	bl	80030b0 <advanceDel>
				break;
 8002efe:	e022      	b.n	8002f46 <advanceParam+0xb2>
				advanceDwell(&FO_CHA_Params,dir);
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	483d      	ldr	r0, [pc, #244]	; (8002ff8 <advanceParam+0x164>)
 8002f04:	f000 f8fd 	bl	8003102 <advanceDwell>
				break;
 8002f08:	e01d      	b.n	8002f46 <advanceParam+0xb2>
				advanceSolo(&FO_CHA_Params);
 8002f0a:	483b      	ldr	r0, [pc, #236]	; (8002ff8 <advanceParam+0x164>)
 8002f0c:	f000 f94b 	bl	80031a6 <advanceSolo>
				break;
 8002f10:	e019      	b.n	8002f46 <advanceParam+0xb2>
				advanceF1(&FO_CHB_Params,dir);
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	4839      	ldr	r0, [pc, #228]	; (8002ffc <advanceParam+0x168>)
 8002f16:	f000 f88d 	bl	8003034 <advanceF1>
				break;
 8002f1a:	e014      	b.n	8002f46 <advanceParam+0xb2>
				advanceF2(&FO_CHB_Params,dir);
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	4837      	ldr	r0, [pc, #220]	; (8002ffc <advanceParam+0x168>)
 8002f20:	f000 f8a7 	bl	8003072 <advanceF2>
				break;
 8002f24:	e00f      	b.n	8002f46 <advanceParam+0xb2>
				advanceDel(&FO_CHB_Params,dir,B_SIDE_DELAY);
 8002f26:	2201      	movs	r2, #1
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	4834      	ldr	r0, [pc, #208]	; (8002ffc <advanceParam+0x168>)
 8002f2c:	f000 f8c0 	bl	80030b0 <advanceDel>
				break;
 8002f30:	e009      	b.n	8002f46 <advanceParam+0xb2>
				advanceDwell(&FO_CHB_Params,dir);
 8002f32:	6879      	ldr	r1, [r7, #4]
 8002f34:	4831      	ldr	r0, [pc, #196]	; (8002ffc <advanceParam+0x168>)
 8002f36:	f000 f8e4 	bl	8003102 <advanceDwell>
				break;
 8002f3a:	e004      	b.n	8002f46 <advanceParam+0xb2>
				advanceSolo(&FO_CHB_Params);
 8002f3c:	482f      	ldr	r0, [pc, #188]	; (8002ffc <advanceParam+0x168>)
 8002f3e:	f000 f932 	bl	80031a6 <advanceSolo>
				break;
 8002f42:	e000      	b.n	8002f46 <advanceParam+0xb2>
				break;
 8002f44:	bf00      	nop
		break;
 8002f46:	e04f      	b.n	8002fe8 <advanceParam+0x154>
		switch(currentSubMenuNO){
 8002f48:	4b2a      	ldr	r3, [pc, #168]	; (8002ff4 <advanceParam+0x160>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b09      	cmp	r3, #9
 8002f4e:	d849      	bhi.n	8002fe4 <advanceParam+0x150>
 8002f50:	a201      	add	r2, pc, #4	; (adr r2, 8002f58 <advanceParam+0xc4>)
 8002f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f56:	bf00      	nop
 8002f58:	08002f81 	.word	0x08002f81
 8002f5c:	08002f8b 	.word	0x08002f8b
 8002f60:	08002f95 	.word	0x08002f95
 8002f64:	08002fa1 	.word	0x08002fa1
 8002f68:	08002fab 	.word	0x08002fab
 8002f6c:	08002fb3 	.word	0x08002fb3
 8002f70:	08002fbd 	.word	0x08002fbd
 8002f74:	08002fc7 	.word	0x08002fc7
 8002f78:	08002fd3 	.word	0x08002fd3
 8002f7c:	08002fdd 	.word	0x08002fdd
			advanceCH1(&FO_CHA_Params,dir);
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	481d      	ldr	r0, [pc, #116]	; (8002ff8 <advanceParam+0x164>)
 8002f84:	f000 f8db 	bl	800313e <advanceCH1>
			break;
 8002f88:	e02d      	b.n	8002fe6 <advanceParam+0x152>
			advanceCH2(&FO_CHA_Params,dir);
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	481a      	ldr	r0, [pc, #104]	; (8002ff8 <advanceParam+0x164>)
 8002f8e:	f000 f8f0 	bl	8003172 <advanceCH2>
			break;
 8002f92:	e028      	b.n	8002fe6 <advanceParam+0x152>
			advanceDel(&FO_CHA_Params,dir,A_SIDE_DELAY);
 8002f94:	2200      	movs	r2, #0
 8002f96:	6879      	ldr	r1, [r7, #4]
 8002f98:	4817      	ldr	r0, [pc, #92]	; (8002ff8 <advanceParam+0x164>)
 8002f9a:	f000 f889 	bl	80030b0 <advanceDel>
			break;
 8002f9e:	e022      	b.n	8002fe6 <advanceParam+0x152>
			advanceDwell(&FO_CHA_Params,dir);
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	4815      	ldr	r0, [pc, #84]	; (8002ff8 <advanceParam+0x164>)
 8002fa4:	f000 f8ad 	bl	8003102 <advanceDwell>
			break;
 8002fa8:	e01d      	b.n	8002fe6 <advanceParam+0x152>
			advanceSolo(&FO_CHA_Params);
 8002faa:	4813      	ldr	r0, [pc, #76]	; (8002ff8 <advanceParam+0x164>)
 8002fac:	f000 f8fb 	bl	80031a6 <advanceSolo>
			break;
 8002fb0:	e019      	b.n	8002fe6 <advanceParam+0x152>
			advanceCH1(&FO_CHB_Params,dir);
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	4811      	ldr	r0, [pc, #68]	; (8002ffc <advanceParam+0x168>)
 8002fb6:	f000 f8c2 	bl	800313e <advanceCH1>
			break;
 8002fba:	e014      	b.n	8002fe6 <advanceParam+0x152>
			advanceCH2(&FO_CHB_Params,dir);
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	480f      	ldr	r0, [pc, #60]	; (8002ffc <advanceParam+0x168>)
 8002fc0:	f000 f8d7 	bl	8003172 <advanceCH2>
			break;
 8002fc4:	e00f      	b.n	8002fe6 <advanceParam+0x152>
			advanceDel(&FO_CHB_Params,dir,B_SIDE_DELAY);
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	480c      	ldr	r0, [pc, #48]	; (8002ffc <advanceParam+0x168>)
 8002fcc:	f000 f870 	bl	80030b0 <advanceDel>
			break;
 8002fd0:	e009      	b.n	8002fe6 <advanceParam+0x152>
			advanceDwell(&FO_CHB_Params,dir);
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	4809      	ldr	r0, [pc, #36]	; (8002ffc <advanceParam+0x168>)
 8002fd6:	f000 f894 	bl	8003102 <advanceDwell>
			break;
 8002fda:	e004      	b.n	8002fe6 <advanceParam+0x152>
			advanceSolo(&FO_CHB_Params);
 8002fdc:	4807      	ldr	r0, [pc, #28]	; (8002ffc <advanceParam+0x168>)
 8002fde:	f000 f8e2 	bl	80031a6 <advanceSolo>
			break;
 8002fe2:	e000      	b.n	8002fe6 <advanceParam+0x152>
				break;
 8002fe4:	bf00      	nop
		break;
 8002fe6:	bf00      	nop

	}
}
 8002fe8:	bf00      	nop
 8002fea:	3708      	adds	r7, #8
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	20000540 	.word	0x20000540
 8002ff4:	20000541 	.word	0x20000541
 8002ff8:	20000544 	.word	0x20000544
 8002ffc:	2000055c 	.word	0x2000055c

08003000 <limitValue>:
int limitValue(int val, int min, int max){
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
	if(val>max){
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	429a      	cmp	r2, r3
 8003012:	dd02      	ble.n	800301a <limitValue+0x1a>
		val=max;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	e005      	b.n	8003026 <limitValue+0x26>
	}else if(val<min){
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	429a      	cmp	r2, r3
 8003020:	da01      	bge.n	8003026 <limitValue+0x26>
		val=min;
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	60fb      	str	r3, [r7, #12]
	}
	return val;
 8003026:	68fb      	ldr	r3, [r7, #12]
}
 8003028:	4618      	mov	r0, r3
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <advanceF1>:



void advanceF1(FO_SystemParams* pParams, int dir){
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
	(*pParams).FixedFrequency_1+= dir*FREQ_STEP;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6819      	ldr	r1, [r3, #0]
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	4613      	mov	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	18ca      	adds	r2, r1, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	601a      	str	r2, [r3, #0]
	(*pParams).FixedFrequency_1 = limitValue((*pParams).FixedFrequency_1,FREQ_MIN,FREQ_MAX);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f240 32de 	movw	r2, #990	; 0x3de
 800305a:	2100      	movs	r1, #0
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff ffcf 	bl	8003000 <limitValue>
 8003062:	4603      	mov	r3, r0
 8003064:	461a      	mov	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	601a      	str	r2, [r3, #0]
}
 800306a:	bf00      	nop
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <advanceF2>:
void advanceF2(FO_SystemParams* pParams,int dir){
 8003072:	b580      	push	{r7, lr}
 8003074:	b082      	sub	sp, #8
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	6039      	str	r1, [r7, #0]
	(*pParams).FixedFrequency_2+= dir*FREQ_STEP;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6859      	ldr	r1, [r3, #4]
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	4613      	mov	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	18ca      	adds	r2, r1, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	605a      	str	r2, [r3, #4]
	(*pParams).FixedFrequency_2 = limitValue((*pParams).FixedFrequency_2,FREQ_MIN,FREQ_MAX);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f240 32de 	movw	r2, #990	; 0x3de
 8003098:	2100      	movs	r1, #0
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff ffb0 	bl	8003000 <limitValue>
 80030a0:	4603      	mov	r3, r0
 80030a2:	461a      	mov	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	605a      	str	r2, [r3, #4]
}
 80030a8:	bf00      	nop
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <advanceDel>:
void advanceDel(FO_SystemParams* pParams,int dir, int side){
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
	(*pParams).onTime+= dir*FO_DEL_STEP_SIZE;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	68da      	ldr	r2, [r3, #12]
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	441a      	add	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	60da      	str	r2, [r3, #12]
	if(side == A_SIDE_DELAY){
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10a      	bne.n	80030e6 <advanceDel+0x36>
		(*pParams).onTime = limitValue((*pParams).onTime,FO_MIN_DEL,FO_MAX_DEL_A);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	2232      	movs	r2, #50	; 0x32
 80030d6:	2106      	movs	r1, #6
 80030d8:	4618      	mov	r0, r3
 80030da:	f7ff ff91 	bl	8003000 <limitValue>
 80030de:	4602      	mov	r2, r0
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	60da      	str	r2, [r3, #12]
	}else{
		(*pParams).onTime = limitValue((*pParams).onTime,FO_MIN_DEL,FO_MAX_DEL_B);
	}
}
 80030e4:	e009      	b.n	80030fa <advanceDel+0x4a>
		(*pParams).onTime = limitValue((*pParams).onTime,FO_MIN_DEL,FO_MAX_DEL_B);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	2250      	movs	r2, #80	; 0x50
 80030ec:	2106      	movs	r1, #6
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7ff ff86 	bl	8003000 <limitValue>
 80030f4:	4602      	mov	r2, r0
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	60da      	str	r2, [r3, #12]
}
 80030fa:	bf00      	nop
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <advanceDwell>:
void advanceDwell(FO_SystemParams* pParams,int dir){
 8003102:	b580      	push	{r7, lr}
 8003104:	b082      	sub	sp, #8
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
 800310a:	6039      	str	r1, [r7, #0]
	(*pParams).dwellTime+= dir*FO_DWELL_STEP_SIZE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6919      	ldr	r1, [r3, #16]
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	4613      	mov	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	18ca      	adds	r2, r1, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	611a      	str	r2, [r3, #16]
	(*pParams).dwellTime = limitValue((*pParams).dwellTime,FO_MIN_DWELL,FO_MAX_DWELL);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	f240 32de 	movw	r2, #990	; 0x3de
 8003128:	21c8      	movs	r1, #200	; 0xc8
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff ff68 	bl	8003000 <limitValue>
 8003130:	4602      	mov	r2, r0
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	611a      	str	r2, [r3, #16]
}
 8003136:	bf00      	nop
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <advanceCH1>:
void advanceCH1(FO_SystemParams* pParams,int dir)
{
 800313e:	b480      	push	{r7}
 8003140:	b083      	sub	sp, #12
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
 8003146:	6039      	str	r1, [r7, #0]
	(*pParams).midiCh1+=dir;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	7a1a      	ldrb	r2, [r3, #8]
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	b2db      	uxtb	r3, r3
 8003150:	4413      	add	r3, r2
 8003152:	b2da      	uxtb	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	721a      	strb	r2, [r3, #8]
	if((*pParams).midiCh1>MIDI_MAX_CH){
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	7a1b      	ldrb	r3, [r3, #8]
 800315c:	2b14      	cmp	r3, #20
 800315e:	d902      	bls.n	8003166 <advanceCH1+0x28>
		(*pParams).midiCh1 = 0;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	721a      	strb	r2, [r3, #8]
	}
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <advanceCH2>:
void advanceCH2(FO_SystemParams* pParams,int dir)
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
 800317a:	6039      	str	r1, [r7, #0]
	(*pParams).midiCh2+=dir;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	7a5a      	ldrb	r2, [r3, #9]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	b2db      	uxtb	r3, r3
 8003184:	4413      	add	r3, r2
 8003186:	b2da      	uxtb	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	725a      	strb	r2, [r3, #9]
	if((*pParams).midiCh2>MIDI_MAX_CH){
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	7a5b      	ldrb	r3, [r3, #9]
 8003190:	2b14      	cmp	r3, #20
 8003192:	d902      	bls.n	800319a <advanceCH2+0x28>
		(*pParams).midiCh2 = 0;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	725a      	strb	r2, [r3, #9]
	}
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <advanceSolo>:
void advanceSolo(FO_SystemParams* pParams)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b083      	sub	sp, #12
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
	(*pParams).enSolo = (*pParams).enSolo^0x01;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	7d1b      	ldrb	r3, [r3, #20]
 80031b2:	f083 0301 	eor.w	r3, r3, #1
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	751a      	strb	r2, [r3, #20]
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <menuButPush>:



void menuButPush(void){
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
	subMenuEditParam ++;
 80031cc:	4b08      	ldr	r3, [pc, #32]	; (80031f0 <menuButPush+0x28>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	3301      	adds	r3, #1
 80031d2:	b2da      	uxtb	r2, r3
 80031d4:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <menuButPush+0x28>)
 80031d6:	701a      	strb	r2, [r3, #0]
	if(subMenuEditParam>1){subMenuEditParam=0;}
 80031d8:	4b05      	ldr	r3, [pc, #20]	; (80031f0 <menuButPush+0x28>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d902      	bls.n	80031e6 <menuButPush+0x1e>
 80031e0:	4b03      	ldr	r3, [pc, #12]	; (80031f0 <menuButPush+0x28>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	701a      	strb	r2, [r3, #0]
}
 80031e6:	bf00      	nop
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr
 80031f0:	20000542 	.word	0x20000542

080031f4 <menuButDoublePush>:
void menuButDoublePush(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
	advanceMenu();
 80031f8:	f000 f838 	bl	800326c <advanceMenu>
}
 80031fc:	bf00      	nop
 80031fe:	bd80      	pop	{r7, pc}

08003200 <advanceSubMenu>:
void menuButHold(void){}

void advanceSubMenu(int dir){
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
	currentSubMenuNO+= dir;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	b2da      	uxtb	r2, r3
 800320c:	4b14      	ldr	r3, [pc, #80]	; (8003260 <advanceSubMenu+0x60>)
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	4413      	add	r3, r2
 8003212:	b2da      	uxtb	r2, r3
 8003214:	4b12      	ldr	r3, [pc, #72]	; (8003260 <advanceSubMenu+0x60>)
 8003216:	701a      	strb	r2, [r3, #0]
	if(currentSubMenuNO==255){
 8003218:	4b11      	ldr	r3, [pc, #68]	; (8003260 <advanceSubMenu+0x60>)
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	2bff      	cmp	r3, #255	; 0xff
 800321e:	d10b      	bne.n	8003238 <advanceSubMenu+0x38>
		currentSubMenuNO = maxSubMenus[currentMenuNO]-1;
 8003220:	4b10      	ldr	r3, [pc, #64]	; (8003264 <advanceSubMenu+0x64>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	461a      	mov	r2, r3
 8003226:	4b10      	ldr	r3, [pc, #64]	; (8003268 <advanceSubMenu+0x68>)
 8003228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800322c:	b2db      	uxtb	r3, r3
 800322e:	3b01      	subs	r3, #1
 8003230:	b2da      	uxtb	r2, r3
 8003232:	4b0b      	ldr	r3, [pc, #44]	; (8003260 <advanceSubMenu+0x60>)
 8003234:	701a      	strb	r2, [r3, #0]
	}else if(currentSubMenuNO == maxSubMenus[currentMenuNO]){
		currentSubMenuNO = 0;
	}
}
 8003236:	e00d      	b.n	8003254 <advanceSubMenu+0x54>
	}else if(currentSubMenuNO == maxSubMenus[currentMenuNO]){
 8003238:	4b09      	ldr	r3, [pc, #36]	; (8003260 <advanceSubMenu+0x60>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	461a      	mov	r2, r3
 800323e:	4b09      	ldr	r3, [pc, #36]	; (8003264 <advanceSubMenu+0x64>)
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	4619      	mov	r1, r3
 8003244:	4b08      	ldr	r3, [pc, #32]	; (8003268 <advanceSubMenu+0x68>)
 8003246:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800324a:	429a      	cmp	r2, r3
 800324c:	d102      	bne.n	8003254 <advanceSubMenu+0x54>
		currentSubMenuNO = 0;
 800324e:	4b04      	ldr	r3, [pc, #16]	; (8003260 <advanceSubMenu+0x60>)
 8003250:	2200      	movs	r2, #0
 8003252:	701a      	strb	r2, [r3, #0]
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr
 8003260:	20000541 	.word	0x20000541
 8003264:	20000540 	.word	0x20000540
 8003268:	0800da20 	.word	0x0800da20

0800326c <advanceMenu>:
void advanceMenu(void){
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
	currentMenuNO++;
 8003270:	4b0e      	ldr	r3, [pc, #56]	; (80032ac <advanceMenu+0x40>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	3301      	adds	r3, #1
 8003276:	b2da      	uxtb	r2, r3
 8003278:	4b0c      	ldr	r3, [pc, #48]	; (80032ac <advanceMenu+0x40>)
 800327a:	701a      	strb	r2, [r3, #0]
	if(MAX_MENU_NO==currentMenuNO)
 800327c:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <advanceMenu+0x40>)
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	2b02      	cmp	r3, #2
 8003282:	d102      	bne.n	800328a <advanceMenu+0x1e>
	{
		currentMenuNO=0;
 8003284:	4b09      	ldr	r3, [pc, #36]	; (80032ac <advanceMenu+0x40>)
 8003286:	2200      	movs	r2, #0
 8003288:	701a      	strb	r2, [r3, #0]
	}

	currentSubMenuNO = 0;
 800328a:	4b09      	ldr	r3, [pc, #36]	; (80032b0 <advanceMenu+0x44>)
 800328c:	2200      	movs	r2, #0
 800328e:	701a      	strb	r2, [r3, #0]

	if(currentMenuNO != FIXED_F_MENU_NO)
 8003290:	4b06      	ldr	r3, [pc, #24]	; (80032ac <advanceMenu+0x40>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <advanceMenu+0x30>
	{
		shutdownFixedFreq();
 8003298:	f7ff fbb2 	bl	8002a00 <shutdownFixedFreq>
	}
	printf("Menu adv: %d",currentMenuNO);
 800329c:	4b03      	ldr	r3, [pc, #12]	; (80032ac <advanceMenu+0x40>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	4619      	mov	r1, r3
 80032a2:	4804      	ldr	r0, [pc, #16]	; (80032b4 <advanceMenu+0x48>)
 80032a4:	f008 fad4 	bl	800b850 <iprintf>
}
 80032a8:	bf00      	nop
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	20000540 	.word	0x20000540
 80032b0:	20000541 	.word	0x20000541
 80032b4:	0800d8a8 	.word	0x0800d8a8

080032b8 <currentMenuText>:

char * currentMenuText(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
	switch(currentMenuNO){
 80032bc:	4b08      	ldr	r3, [pc, #32]	; (80032e0 <currentMenuText+0x28>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d002      	beq.n	80032ca <currentMenuText+0x12>
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d002      	beq.n	80032ce <currentMenuText+0x16>
 80032c8:	e003      	b.n	80032d2 <currentMenuText+0x1a>
	case 0:
		return "Fixed Freq     ";
 80032ca:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <currentMenuText+0x2c>)
 80032cc:	e002      	b.n	80032d4 <currentMenuText+0x1c>
		break;

	case 1:
		return "Midi            ";
 80032ce:	4b06      	ldr	r3, [pc, #24]	; (80032e8 <currentMenuText+0x30>)
 80032d0:	e000      	b.n	80032d4 <currentMenuText+0x1c>
		break;

	default:
		return "Default Menu    ";
 80032d2:	4b06      	ldr	r3, [pc, #24]	; (80032ec <currentMenuText+0x34>)

		break;

	}
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	20000540 	.word	0x20000540
 80032e4:	0800d8b8 	.word	0x0800d8b8
 80032e8:	0800d8c8 	.word	0x0800d8c8
 80032ec:	0800d8dc 	.word	0x0800d8dc

080032f0 <currentSubMenuText>:

char * currentSubMenuText(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
	switch(currentMenuNO){
 80032f4:	4b37      	ldr	r3, [pc, #220]	; (80033d4 <currentSubMenuText+0xe4>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d002      	beq.n	8003302 <currentSubMenuText+0x12>
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d031      	beq.n	8003364 <currentSubMenuText+0x74>
 8003300:	e062      	b.n	80033c8 <currentSubMenuText+0xd8>
	case 0:

		switch(currentSubMenuNO){
 8003302:	4b35      	ldr	r3, [pc, #212]	; (80033d8 <currentSubMenuText+0xe8>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b09      	cmp	r3, #9
 8003308:	d82a      	bhi.n	8003360 <currentSubMenuText+0x70>
 800330a:	a201      	add	r2, pc, #4	; (adr r2, 8003310 <currentSubMenuText+0x20>)
 800330c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003310:	08003339 	.word	0x08003339
 8003314:	0800333d 	.word	0x0800333d
 8003318:	08003341 	.word	0x08003341
 800331c:	08003345 	.word	0x08003345
 8003320:	08003349 	.word	0x08003349
 8003324:	0800334d 	.word	0x0800334d
 8003328:	08003351 	.word	0x08003351
 800332c:	08003355 	.word	0x08003355
 8003330:	08003359 	.word	0x08003359
 8003334:	0800335d 	.word	0x0800335d
			case 0:
				return "Ca Freq1(Hz):";
 8003338:	4b28      	ldr	r3, [pc, #160]	; (80033dc <currentSubMenuText+0xec>)
 800333a:	e046      	b.n	80033ca <currentSubMenuText+0xda>
				break;
			case 1:
				return "Ca Freq2(Hz):";
 800333c:	4b28      	ldr	r3, [pc, #160]	; (80033e0 <currentSubMenuText+0xf0>)
 800333e:	e044      	b.n	80033ca <currentSubMenuText+0xda>
				break;
			case 2:
				return "Ca OnTim(us)";
 8003340:	4b28      	ldr	r3, [pc, #160]	; (80033e4 <currentSubMenuText+0xf4>)
 8003342:	e042      	b.n	80033ca <currentSubMenuText+0xda>
				break;
			case 3:
				return "Ca Dwell(us)";
 8003344:	4b28      	ldr	r3, [pc, #160]	; (80033e8 <currentSubMenuText+0xf8>)
 8003346:	e040      	b.n	80033ca <currentSubMenuText+0xda>
				break;
			case 4:
				return "Ca Solo (en)";
 8003348:	4b28      	ldr	r3, [pc, #160]	; (80033ec <currentSubMenuText+0xfc>)
 800334a:	e03e      	b.n	80033ca <currentSubMenuText+0xda>
				break;
			case 5:
				return "Cb Freq1(Hz):";
 800334c:	4b28      	ldr	r3, [pc, #160]	; (80033f0 <currentSubMenuText+0x100>)
 800334e:	e03c      	b.n	80033ca <currentSubMenuText+0xda>
				break;
			case 6:
				return "Cb Freq2(Hz):";
 8003350:	4b28      	ldr	r3, [pc, #160]	; (80033f4 <currentSubMenuText+0x104>)
 8003352:	e03a      	b.n	80033ca <currentSubMenuText+0xda>
				break;
			case 7:
				return "Cb OnTim(us)";
 8003354:	4b28      	ldr	r3, [pc, #160]	; (80033f8 <currentSubMenuText+0x108>)
 8003356:	e038      	b.n	80033ca <currentSubMenuText+0xda>
				break;
			case 8:
				return "Cb Dwell(us)";
 8003358:	4b28      	ldr	r3, [pc, #160]	; (80033fc <currentSubMenuText+0x10c>)
 800335a:	e036      	b.n	80033ca <currentSubMenuText+0xda>
				break;
			case 9:
				return "Cb Solo (en)";
 800335c:	4b28      	ldr	r3, [pc, #160]	; (8003400 <currentSubMenuText+0x110>)
 800335e:	e034      	b.n	80033ca <currentSubMenuText+0xda>
				break;
			default:
				return "DEF";
 8003360:	4b28      	ldr	r3, [pc, #160]	; (8003404 <currentSubMenuText+0x114>)
 8003362:	e032      	b.n	80033ca <currentSubMenuText+0xda>
				break;
			}
		break;

	case 1:
		switch(currentSubMenuNO){
 8003364:	4b1c      	ldr	r3, [pc, #112]	; (80033d8 <currentSubMenuText+0xe8>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	2b09      	cmp	r3, #9
 800336a:	d82b      	bhi.n	80033c4 <currentSubMenuText+0xd4>
 800336c:	a201      	add	r2, pc, #4	; (adr r2, 8003374 <currentSubMenuText+0x84>)
 800336e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003372:	bf00      	nop
 8003374:	0800339d 	.word	0x0800339d
 8003378:	080033a1 	.word	0x080033a1
 800337c:	080033a5 	.word	0x080033a5
 8003380:	080033a9 	.word	0x080033a9
 8003384:	080033ad 	.word	0x080033ad
 8003388:	080033b1 	.word	0x080033b1
 800338c:	080033b5 	.word	0x080033b5
 8003390:	080033b9 	.word	0x080033b9
 8003394:	080033bd 	.word	0x080033bd
 8003398:	080033c1 	.word	0x080033c1
			case 0:
				return "Ca Channel 1:";
 800339c:	4b1a      	ldr	r3, [pc, #104]	; (8003408 <currentSubMenuText+0x118>)
 800339e:	e014      	b.n	80033ca <currentSubMenuText+0xda>
				break;
			case 1:
				return "Ca Channel 2";
 80033a0:	4b1a      	ldr	r3, [pc, #104]	; (800340c <currentSubMenuText+0x11c>)
 80033a2:	e012      	b.n	80033ca <currentSubMenuText+0xda>
				break;
			case 2:
				return "Ca OnTim(us)";
 80033a4:	4b0f      	ldr	r3, [pc, #60]	; (80033e4 <currentSubMenuText+0xf4>)
 80033a6:	e010      	b.n	80033ca <currentSubMenuText+0xda>
				break;
			case 3:
				return "Ca Dwell(us)";
 80033a8:	4b0f      	ldr	r3, [pc, #60]	; (80033e8 <currentSubMenuText+0xf8>)
 80033aa:	e00e      	b.n	80033ca <currentSubMenuText+0xda>
				break;
			case 4:
				return "Ca Solo (en)";
 80033ac:	4b0f      	ldr	r3, [pc, #60]	; (80033ec <currentSubMenuText+0xfc>)
 80033ae:	e00c      	b.n	80033ca <currentSubMenuText+0xda>
				break;
			case 5:
				return "Cb Channel 1:";
 80033b0:	4b17      	ldr	r3, [pc, #92]	; (8003410 <currentSubMenuText+0x120>)
 80033b2:	e00a      	b.n	80033ca <currentSubMenuText+0xda>
				break;
			case 6:
				return "Cb Channel 2";
 80033b4:	4b17      	ldr	r3, [pc, #92]	; (8003414 <currentSubMenuText+0x124>)
 80033b6:	e008      	b.n	80033ca <currentSubMenuText+0xda>
				break;
			case 7:
				return "Cb OnTim(us)";
 80033b8:	4b0f      	ldr	r3, [pc, #60]	; (80033f8 <currentSubMenuText+0x108>)
 80033ba:	e006      	b.n	80033ca <currentSubMenuText+0xda>
				break;
			case 8:
				return "Cb Dwell(us)";
 80033bc:	4b0f      	ldr	r3, [pc, #60]	; (80033fc <currentSubMenuText+0x10c>)
 80033be:	e004      	b.n	80033ca <currentSubMenuText+0xda>
				break;
			case 9:
				return "Cb Solo (en)";
 80033c0:	4b0f      	ldr	r3, [pc, #60]	; (8003400 <currentSubMenuText+0x110>)
 80033c2:	e002      	b.n	80033ca <currentSubMenuText+0xda>
				break;
			default:
				return "DEF";
 80033c4:	4b0f      	ldr	r3, [pc, #60]	; (8003404 <currentSubMenuText+0x114>)
 80033c6:	e000      	b.n	80033ca <currentSubMenuText+0xda>
				break;
		}
		break;

	default:
		return "DEF";
 80033c8:	4b0e      	ldr	r3, [pc, #56]	; (8003404 <currentSubMenuText+0x114>)

		break;

	}
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	20000540 	.word	0x20000540
 80033d8:	20000541 	.word	0x20000541
 80033dc:	0800d8f0 	.word	0x0800d8f0
 80033e0:	0800d900 	.word	0x0800d900
 80033e4:	0800d910 	.word	0x0800d910
 80033e8:	0800d920 	.word	0x0800d920
 80033ec:	0800d930 	.word	0x0800d930
 80033f0:	0800d940 	.word	0x0800d940
 80033f4:	0800d950 	.word	0x0800d950
 80033f8:	0800d960 	.word	0x0800d960
 80033fc:	0800d970 	.word	0x0800d970
 8003400:	0800d980 	.word	0x0800d980
 8003404:	0800d990 	.word	0x0800d990
 8003408:	0800d994 	.word	0x0800d994
 800340c:	0800d9a4 	.word	0x0800d9a4
 8003410:	0800d9b4 	.word	0x0800d9b4
 8003414:	0800d9c4 	.word	0x0800d9c4

08003418 <currentMenuParameter>:

int currentMenuParameter(){
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
	switch(currentMenuNO){
 800341c:	4b42      	ldr	r3, [pc, #264]	; (8003528 <currentMenuParameter+0x110>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d002      	beq.n	800342a <currentMenuParameter+0x12>
 8003424:	2b01      	cmp	r3, #1
 8003426:	d03c      	beq.n	80034a2 <currentMenuParameter+0x8a>
 8003428:	e077      	b.n	800351a <currentMenuParameter+0x102>
	case 0:

		switch(currentSubMenuNO){
 800342a:	4b40      	ldr	r3, [pc, #256]	; (800352c <currentMenuParameter+0x114>)
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	2b09      	cmp	r3, #9
 8003430:	d834      	bhi.n	800349c <currentMenuParameter+0x84>
 8003432:	a201      	add	r2, pc, #4	; (adr r2, 8003438 <currentMenuParameter+0x20>)
 8003434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003438:	08003461 	.word	0x08003461
 800343c:	08003467 	.word	0x08003467
 8003440:	0800346d 	.word	0x0800346d
 8003444:	08003473 	.word	0x08003473
 8003448:	08003479 	.word	0x08003479
 800344c:	0800347f 	.word	0x0800347f
 8003450:	08003485 	.word	0x08003485
 8003454:	0800348b 	.word	0x0800348b
 8003458:	08003491 	.word	0x08003491
 800345c:	08003497 	.word	0x08003497
		case 0:
			return (int)(FO_CHA_Params.FixedFrequency_1);
 8003460:	4b33      	ldr	r3, [pc, #204]	; (8003530 <currentMenuParameter+0x118>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	e05b      	b.n	800351e <currentMenuParameter+0x106>
			break;
		case 1:
			return (int)(FO_CHA_Params.FixedFrequency_2);
 8003466:	4b32      	ldr	r3, [pc, #200]	; (8003530 <currentMenuParameter+0x118>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	e058      	b.n	800351e <currentMenuParameter+0x106>
			break;
		case 2:
			return FO_CHA_Params.onTime;
 800346c:	4b30      	ldr	r3, [pc, #192]	; (8003530 <currentMenuParameter+0x118>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	e055      	b.n	800351e <currentMenuParameter+0x106>
			break;
		case 3:
			return FO_CHA_Params.dwellTime;
 8003472:	4b2f      	ldr	r3, [pc, #188]	; (8003530 <currentMenuParameter+0x118>)
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	e052      	b.n	800351e <currentMenuParameter+0x106>
			break;
		case 4:
			return FO_CHA_Params.enSolo;
 8003478:	4b2d      	ldr	r3, [pc, #180]	; (8003530 <currentMenuParameter+0x118>)
 800347a:	7d1b      	ldrb	r3, [r3, #20]
 800347c:	e04f      	b.n	800351e <currentMenuParameter+0x106>
			break;
		case 5:
			return (int)(FO_CHB_Params.FixedFrequency_1);
 800347e:	4b2d      	ldr	r3, [pc, #180]	; (8003534 <currentMenuParameter+0x11c>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	e04c      	b.n	800351e <currentMenuParameter+0x106>
			break;
		case 6:
			return (int)(FO_CHB_Params.FixedFrequency_2);
 8003484:	4b2b      	ldr	r3, [pc, #172]	; (8003534 <currentMenuParameter+0x11c>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	e049      	b.n	800351e <currentMenuParameter+0x106>
			break;
		case 7:
			return FO_CHB_Params.onTime;
 800348a:	4b2a      	ldr	r3, [pc, #168]	; (8003534 <currentMenuParameter+0x11c>)
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	e046      	b.n	800351e <currentMenuParameter+0x106>
			break;
		case 8:
			return FO_CHB_Params.dwellTime;
 8003490:	4b28      	ldr	r3, [pc, #160]	; (8003534 <currentMenuParameter+0x11c>)
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	e043      	b.n	800351e <currentMenuParameter+0x106>
			break;
		case 9:
			return FO_CHB_Params.enSolo;
 8003496:	4b27      	ldr	r3, [pc, #156]	; (8003534 <currentMenuParameter+0x11c>)
 8003498:	7d1b      	ldrb	r3, [r3, #20]
 800349a:	e040      	b.n	800351e <currentMenuParameter+0x106>
			break;
			default:
				return -1;
 800349c:	f04f 33ff 	mov.w	r3, #4294967295
 80034a0:	e03d      	b.n	800351e <currentMenuParameter+0x106>
				break;
			}
		break;

	case 1://MIDI menu
		switch(currentSubMenuNO){
 80034a2:	4b22      	ldr	r3, [pc, #136]	; (800352c <currentMenuParameter+0x114>)
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b09      	cmp	r3, #9
 80034a8:	d834      	bhi.n	8003514 <currentMenuParameter+0xfc>
 80034aa:	a201      	add	r2, pc, #4	; (adr r2, 80034b0 <currentMenuParameter+0x98>)
 80034ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b0:	080034d9 	.word	0x080034d9
 80034b4:	080034df 	.word	0x080034df
 80034b8:	080034e5 	.word	0x080034e5
 80034bc:	080034eb 	.word	0x080034eb
 80034c0:	080034f1 	.word	0x080034f1
 80034c4:	080034f7 	.word	0x080034f7
 80034c8:	080034fd 	.word	0x080034fd
 80034cc:	08003503 	.word	0x08003503
 80034d0:	08003509 	.word	0x08003509
 80034d4:	0800350f 	.word	0x0800350f
		case 0:
			return (int)(FO_CHA_Params.midiCh1);
 80034d8:	4b15      	ldr	r3, [pc, #84]	; (8003530 <currentMenuParameter+0x118>)
 80034da:	7a1b      	ldrb	r3, [r3, #8]
 80034dc:	e01f      	b.n	800351e <currentMenuParameter+0x106>
			break;
		case 1:
			return (int)(FO_CHA_Params.midiCh2);
 80034de:	4b14      	ldr	r3, [pc, #80]	; (8003530 <currentMenuParameter+0x118>)
 80034e0:	7a5b      	ldrb	r3, [r3, #9]
 80034e2:	e01c      	b.n	800351e <currentMenuParameter+0x106>
			break;
		case 2:
			return FO_CHA_Params.onTime;
 80034e4:	4b12      	ldr	r3, [pc, #72]	; (8003530 <currentMenuParameter+0x118>)
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	e019      	b.n	800351e <currentMenuParameter+0x106>
			break;
		case 3:
			return FO_CHA_Params.dwellTime;
 80034ea:	4b11      	ldr	r3, [pc, #68]	; (8003530 <currentMenuParameter+0x118>)
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	e016      	b.n	800351e <currentMenuParameter+0x106>
			break;
		case 4:
			return FO_CHA_Params.enSolo;
 80034f0:	4b0f      	ldr	r3, [pc, #60]	; (8003530 <currentMenuParameter+0x118>)
 80034f2:	7d1b      	ldrb	r3, [r3, #20]
 80034f4:	e013      	b.n	800351e <currentMenuParameter+0x106>
			break;
		case 5:
			return (int)(FO_CHB_Params.midiCh1);
 80034f6:	4b0f      	ldr	r3, [pc, #60]	; (8003534 <currentMenuParameter+0x11c>)
 80034f8:	7a1b      	ldrb	r3, [r3, #8]
 80034fa:	e010      	b.n	800351e <currentMenuParameter+0x106>
			break;
		case 6:
			return (int)(FO_CHB_Params.midiCh2);
 80034fc:	4b0d      	ldr	r3, [pc, #52]	; (8003534 <currentMenuParameter+0x11c>)
 80034fe:	7a5b      	ldrb	r3, [r3, #9]
 8003500:	e00d      	b.n	800351e <currentMenuParameter+0x106>
			break;
		case 7:
			return FO_CHB_Params.onTime;
 8003502:	4b0c      	ldr	r3, [pc, #48]	; (8003534 <currentMenuParameter+0x11c>)
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	e00a      	b.n	800351e <currentMenuParameter+0x106>
			break;
		case 8:
			return FO_CHB_Params.dwellTime;
 8003508:	4b0a      	ldr	r3, [pc, #40]	; (8003534 <currentMenuParameter+0x11c>)
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	e007      	b.n	800351e <currentMenuParameter+0x106>
			break;
		case 9:
			return FO_CHB_Params.enSolo;
 800350e:	4b09      	ldr	r3, [pc, #36]	; (8003534 <currentMenuParameter+0x11c>)
 8003510:	7d1b      	ldrb	r3, [r3, #20]
 8003512:	e004      	b.n	800351e <currentMenuParameter+0x106>
			break;
			default:
				return -1;
 8003514:	f04f 33ff 	mov.w	r3, #4294967295
 8003518:	e001      	b.n	800351e <currentMenuParameter+0x106>
				break;
		}
		break;

	default:
		return -1;
 800351a:	f04f 33ff 	mov.w	r3, #4294967295

		break;

	}
}
 800351e:	4618      	mov	r0, r3
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	20000540 	.word	0x20000540
 800352c:	20000541 	.word	0x20000541
 8003530:	20000544 	.word	0x20000544
 8003534:	2000055c 	.word	0x2000055c

08003538 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800353e:	2300      	movs	r3, #0
 8003540:	607b      	str	r3, [r7, #4]
 8003542:	4b10      	ldr	r3, [pc, #64]	; (8003584 <HAL_MspInit+0x4c>)
 8003544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003546:	4a0f      	ldr	r2, [pc, #60]	; (8003584 <HAL_MspInit+0x4c>)
 8003548:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800354c:	6453      	str	r3, [r2, #68]	; 0x44
 800354e:	4b0d      	ldr	r3, [pc, #52]	; (8003584 <HAL_MspInit+0x4c>)
 8003550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003556:	607b      	str	r3, [r7, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800355a:	2300      	movs	r3, #0
 800355c:	603b      	str	r3, [r7, #0]
 800355e:	4b09      	ldr	r3, [pc, #36]	; (8003584 <HAL_MspInit+0x4c>)
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	4a08      	ldr	r2, [pc, #32]	; (8003584 <HAL_MspInit+0x4c>)
 8003564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003568:	6413      	str	r3, [r2, #64]	; 0x40
 800356a:	4b06      	ldr	r3, [pc, #24]	; (8003584 <HAL_MspInit+0x4c>)
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003572:	603b      	str	r3, [r7, #0]
 8003574:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	40023800 	.word	0x40023800

08003588 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b08a      	sub	sp, #40	; 0x28
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a78      	ldr	r2, [pc, #480]	; (8003778 <HAL_TIM_Base_MspInit+0x1f0>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d126      	bne.n	80035e8 <HAL_TIM_Base_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800359a:	2300      	movs	r3, #0
 800359c:	627b      	str	r3, [r7, #36]	; 0x24
 800359e:	4b77      	ldr	r3, [pc, #476]	; (800377c <HAL_TIM_Base_MspInit+0x1f4>)
 80035a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a2:	4a76      	ldr	r2, [pc, #472]	; (800377c <HAL_TIM_Base_MspInit+0x1f4>)
 80035a4:	f043 0301 	orr.w	r3, r3, #1
 80035a8:	6453      	str	r3, [r2, #68]	; 0x44
 80035aa:	4b74      	ldr	r3, [pc, #464]	; (800377c <HAL_TIM_Base_MspInit+0x1f4>)
 80035ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	627b      	str	r3, [r7, #36]	; 0x24
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 80035b6:	2200      	movs	r2, #0
 80035b8:	2105      	movs	r1, #5
 80035ba:	2018      	movs	r0, #24
 80035bc:	f000 fc3f 	bl	8003e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80035c0:	2018      	movs	r0, #24
 80035c2:	f000 fc58 	bl	8003e76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80035c6:	2200      	movs	r2, #0
 80035c8:	2105      	movs	r1, #5
 80035ca:	2019      	movs	r0, #25
 80035cc:	f000 fc37 	bl	8003e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80035d0:	2019      	movs	r0, #25
 80035d2:	f000 fc50 	bl	8003e76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 80035d6:	2200      	movs	r2, #0
 80035d8:	2105      	movs	r1, #5
 80035da:	201a      	movs	r0, #26
 80035dc:	f000 fc2f 	bl	8003e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80035e0:	201a      	movs	r0, #26
 80035e2:	f000 fc48 	bl	8003e76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80035e6:	e0c2      	b.n	800376e <HAL_TIM_Base_MspInit+0x1e6>
  else if(htim_base->Instance==TIM2)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f0:	d116      	bne.n	8003620 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035f2:	2300      	movs	r3, #0
 80035f4:	623b      	str	r3, [r7, #32]
 80035f6:	4b61      	ldr	r3, [pc, #388]	; (800377c <HAL_TIM_Base_MspInit+0x1f4>)
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	4a60      	ldr	r2, [pc, #384]	; (800377c <HAL_TIM_Base_MspInit+0x1f4>)
 80035fc:	f043 0301 	orr.w	r3, r3, #1
 8003600:	6413      	str	r3, [r2, #64]	; 0x40
 8003602:	4b5e      	ldr	r3, [pc, #376]	; (800377c <HAL_TIM_Base_MspInit+0x1f4>)
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	623b      	str	r3, [r7, #32]
 800360c:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800360e:	2200      	movs	r2, #0
 8003610:	2105      	movs	r1, #5
 8003612:	201c      	movs	r0, #28
 8003614:	f000 fc13 	bl	8003e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003618:	201c      	movs	r0, #28
 800361a:	f000 fc2c 	bl	8003e76 <HAL_NVIC_EnableIRQ>
}
 800361e:	e0a6      	b.n	800376e <HAL_TIM_Base_MspInit+0x1e6>
  else if(htim_base->Instance==TIM3)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a56      	ldr	r2, [pc, #344]	; (8003780 <HAL_TIM_Base_MspInit+0x1f8>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d116      	bne.n	8003658 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800362a:	2300      	movs	r3, #0
 800362c:	61fb      	str	r3, [r7, #28]
 800362e:	4b53      	ldr	r3, [pc, #332]	; (800377c <HAL_TIM_Base_MspInit+0x1f4>)
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	4a52      	ldr	r2, [pc, #328]	; (800377c <HAL_TIM_Base_MspInit+0x1f4>)
 8003634:	f043 0302 	orr.w	r3, r3, #2
 8003638:	6413      	str	r3, [r2, #64]	; 0x40
 800363a:	4b50      	ldr	r3, [pc, #320]	; (800377c <HAL_TIM_Base_MspInit+0x1f4>)
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	61fb      	str	r3, [r7, #28]
 8003644:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003646:	2200      	movs	r2, #0
 8003648:	2100      	movs	r1, #0
 800364a:	201d      	movs	r0, #29
 800364c:	f000 fbf7 	bl	8003e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003650:	201d      	movs	r0, #29
 8003652:	f000 fc10 	bl	8003e76 <HAL_NVIC_EnableIRQ>
}
 8003656:	e08a      	b.n	800376e <HAL_TIM_Base_MspInit+0x1e6>
  else if(htim_base->Instance==TIM4)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a49      	ldr	r2, [pc, #292]	; (8003784 <HAL_TIM_Base_MspInit+0x1fc>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d116      	bne.n	8003690 <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003662:	2300      	movs	r3, #0
 8003664:	61bb      	str	r3, [r7, #24]
 8003666:	4b45      	ldr	r3, [pc, #276]	; (800377c <HAL_TIM_Base_MspInit+0x1f4>)
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	4a44      	ldr	r2, [pc, #272]	; (800377c <HAL_TIM_Base_MspInit+0x1f4>)
 800366c:	f043 0304 	orr.w	r3, r3, #4
 8003670:	6413      	str	r3, [r2, #64]	; 0x40
 8003672:	4b42      	ldr	r3, [pc, #264]	; (800377c <HAL_TIM_Base_MspInit+0x1f4>)
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	f003 0304 	and.w	r3, r3, #4
 800367a:	61bb      	str	r3, [r7, #24]
 800367c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800367e:	2200      	movs	r2, #0
 8003680:	2100      	movs	r1, #0
 8003682:	201e      	movs	r0, #30
 8003684:	f000 fbdb 	bl	8003e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003688:	201e      	movs	r0, #30
 800368a:	f000 fbf4 	bl	8003e76 <HAL_NVIC_EnableIRQ>
}
 800368e:	e06e      	b.n	800376e <HAL_TIM_Base_MspInit+0x1e6>
  else if(htim_base->Instance==TIM5)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a3c      	ldr	r2, [pc, #240]	; (8003788 <HAL_TIM_Base_MspInit+0x200>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d116      	bne.n	80036c8 <HAL_TIM_Base_MspInit+0x140>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800369a:	2300      	movs	r3, #0
 800369c:	617b      	str	r3, [r7, #20]
 800369e:	4b37      	ldr	r3, [pc, #220]	; (800377c <HAL_TIM_Base_MspInit+0x1f4>)
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	4a36      	ldr	r2, [pc, #216]	; (800377c <HAL_TIM_Base_MspInit+0x1f4>)
 80036a4:	f043 0308 	orr.w	r3, r3, #8
 80036a8:	6413      	str	r3, [r2, #64]	; 0x40
 80036aa:	4b34      	ldr	r3, [pc, #208]	; (800377c <HAL_TIM_Base_MspInit+0x1f4>)
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	f003 0308 	and.w	r3, r3, #8
 80036b2:	617b      	str	r3, [r7, #20]
 80036b4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80036b6:	2200      	movs	r2, #0
 80036b8:	2100      	movs	r1, #0
 80036ba:	2032      	movs	r0, #50	; 0x32
 80036bc:	f000 fbbf 	bl	8003e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80036c0:	2032      	movs	r0, #50	; 0x32
 80036c2:	f000 fbd8 	bl	8003e76 <HAL_NVIC_EnableIRQ>
}
 80036c6:	e052      	b.n	800376e <HAL_TIM_Base_MspInit+0x1e6>
  else if(htim_base->Instance==TIM9)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a2f      	ldr	r2, [pc, #188]	; (800378c <HAL_TIM_Base_MspInit+0x204>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d116      	bne.n	8003700 <HAL_TIM_Base_MspInit+0x178>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80036d2:	2300      	movs	r3, #0
 80036d4:	613b      	str	r3, [r7, #16]
 80036d6:	4b29      	ldr	r3, [pc, #164]	; (800377c <HAL_TIM_Base_MspInit+0x1f4>)
 80036d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036da:	4a28      	ldr	r2, [pc, #160]	; (800377c <HAL_TIM_Base_MspInit+0x1f4>)
 80036dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e0:	6453      	str	r3, [r2, #68]	; 0x44
 80036e2:	4b26      	ldr	r3, [pc, #152]	; (800377c <HAL_TIM_Base_MspInit+0x1f4>)
 80036e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ea:	613b      	str	r3, [r7, #16]
 80036ec:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 80036ee:	2200      	movs	r2, #0
 80036f0:	2105      	movs	r1, #5
 80036f2:	2018      	movs	r0, #24
 80036f4:	f000 fba3 	bl	8003e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80036f8:	2018      	movs	r0, #24
 80036fa:	f000 fbbc 	bl	8003e76 <HAL_NVIC_EnableIRQ>
}
 80036fe:	e036      	b.n	800376e <HAL_TIM_Base_MspInit+0x1e6>
  else if(htim_base->Instance==TIM10)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a22      	ldr	r2, [pc, #136]	; (8003790 <HAL_TIM_Base_MspInit+0x208>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d116      	bne.n	8003738 <HAL_TIM_Base_MspInit+0x1b0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800370a:	2300      	movs	r3, #0
 800370c:	60fb      	str	r3, [r7, #12]
 800370e:	4b1b      	ldr	r3, [pc, #108]	; (800377c <HAL_TIM_Base_MspInit+0x1f4>)
 8003710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003712:	4a1a      	ldr	r2, [pc, #104]	; (800377c <HAL_TIM_Base_MspInit+0x1f4>)
 8003714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003718:	6453      	str	r3, [r2, #68]	; 0x44
 800371a:	4b18      	ldr	r3, [pc, #96]	; (800377c <HAL_TIM_Base_MspInit+0x1f4>)
 800371c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8003726:	2200      	movs	r2, #0
 8003728:	2105      	movs	r1, #5
 800372a:	2019      	movs	r0, #25
 800372c:	f000 fb87 	bl	8003e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003730:	2019      	movs	r0, #25
 8003732:	f000 fba0 	bl	8003e76 <HAL_NVIC_EnableIRQ>
}
 8003736:	e01a      	b.n	800376e <HAL_TIM_Base_MspInit+0x1e6>
  else if(htim_base->Instance==TIM11)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a15      	ldr	r2, [pc, #84]	; (8003794 <HAL_TIM_Base_MspInit+0x20c>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d115      	bne.n	800376e <HAL_TIM_Base_MspInit+0x1e6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003742:	2300      	movs	r3, #0
 8003744:	60bb      	str	r3, [r7, #8]
 8003746:	4b0d      	ldr	r3, [pc, #52]	; (800377c <HAL_TIM_Base_MspInit+0x1f4>)
 8003748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374a:	4a0c      	ldr	r2, [pc, #48]	; (800377c <HAL_TIM_Base_MspInit+0x1f4>)
 800374c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003750:	6453      	str	r3, [r2, #68]	; 0x44
 8003752:	4b0a      	ldr	r3, [pc, #40]	; (800377c <HAL_TIM_Base_MspInit+0x1f4>)
 8003754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003756:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800375a:	60bb      	str	r3, [r7, #8]
 800375c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 800375e:	2200      	movs	r2, #0
 8003760:	2105      	movs	r1, #5
 8003762:	201a      	movs	r0, #26
 8003764:	f000 fb6b 	bl	8003e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003768:	201a      	movs	r0, #26
 800376a:	f000 fb84 	bl	8003e76 <HAL_NVIC_EnableIRQ>
}
 800376e:	bf00      	nop
 8003770:	3728      	adds	r7, #40	; 0x28
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	40010000 	.word	0x40010000
 800377c:	40023800 	.word	0x40023800
 8003780:	40000400 	.word	0x40000400
 8003784:	40000800 	.word	0x40000800
 8003788:	40000c00 	.word	0x40000c00
 800378c:	40014000 	.word	0x40014000
 8003790:	40014400 	.word	0x40014400
 8003794:	40014800 	.word	0x40014800

08003798 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b08a      	sub	sp, #40	; 0x28
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037a0:	f107 0314 	add.w	r3, r7, #20
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]
 80037a8:	605a      	str	r2, [r3, #4]
 80037aa:	609a      	str	r2, [r3, #8]
 80037ac:	60da      	str	r2, [r3, #12]
 80037ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a37      	ldr	r2, [pc, #220]	; (8003894 <HAL_TIM_MspPostInit+0xfc>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d11f      	bne.n	80037fa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ba:	2300      	movs	r3, #0
 80037bc:	613b      	str	r3, [r7, #16]
 80037be:	4b36      	ldr	r3, [pc, #216]	; (8003898 <HAL_TIM_MspPostInit+0x100>)
 80037c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c2:	4a35      	ldr	r2, [pc, #212]	; (8003898 <HAL_TIM_MspPostInit+0x100>)
 80037c4:	f043 0301 	orr.w	r3, r3, #1
 80037c8:	6313      	str	r3, [r2, #48]	; 0x30
 80037ca:	4b33      	ldr	r3, [pc, #204]	; (8003898 <HAL_TIM_MspPostInit+0x100>)
 80037cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	613b      	str	r3, [r7, #16]
 80037d4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = LCD_Backlight_PWM_Pin;
 80037d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037dc:	2302      	movs	r3, #2
 80037de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e0:	2300      	movs	r3, #0
 80037e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037e4:	2303      	movs	r3, #3
 80037e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80037e8:	2301      	movs	r3, #1
 80037ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LCD_Backlight_PWM_GPIO_Port, &GPIO_InitStruct);
 80037ec:	f107 0314 	add.w	r3, r7, #20
 80037f0:	4619      	mov	r1, r3
 80037f2:	482a      	ldr	r0, [pc, #168]	; (800389c <HAL_TIM_MspPostInit+0x104>)
 80037f4:	f000 fb5a 	bl	8003eac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80037f8:	e047      	b.n	800388a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a28      	ldr	r2, [pc, #160]	; (80038a0 <HAL_TIM_MspPostInit+0x108>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d11e      	bne.n	8003842 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003804:	2300      	movs	r3, #0
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	4b23      	ldr	r3, [pc, #140]	; (8003898 <HAL_TIM_MspPostInit+0x100>)
 800380a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380c:	4a22      	ldr	r2, [pc, #136]	; (8003898 <HAL_TIM_MspPostInit+0x100>)
 800380e:	f043 0302 	orr.w	r3, r3, #2
 8003812:	6313      	str	r3, [r2, #48]	; 0x30
 8003814:	4b20      	ldr	r3, [pc, #128]	; (8003898 <HAL_TIM_MspPostInit+0x100>)
 8003816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	60fb      	str	r3, [r7, #12]
 800381e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FO_OUTPUT_CH1_Pin;
 8003820:	2310      	movs	r3, #16
 8003822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003824:	2302      	movs	r3, #2
 8003826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003828:	2302      	movs	r3, #2
 800382a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800382c:	2303      	movs	r3, #3
 800382e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003830:	2302      	movs	r3, #2
 8003832:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FO_OUTPUT_CH1_GPIO_Port, &GPIO_InitStruct);
 8003834:	f107 0314 	add.w	r3, r7, #20
 8003838:	4619      	mov	r1, r3
 800383a:	481a      	ldr	r0, [pc, #104]	; (80038a4 <HAL_TIM_MspPostInit+0x10c>)
 800383c:	f000 fb36 	bl	8003eac <HAL_GPIO_Init>
}
 8003840:	e023      	b.n	800388a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM4)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a18      	ldr	r2, [pc, #96]	; (80038a8 <HAL_TIM_MspPostInit+0x110>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d11e      	bne.n	800388a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800384c:	2300      	movs	r3, #0
 800384e:	60bb      	str	r3, [r7, #8]
 8003850:	4b11      	ldr	r3, [pc, #68]	; (8003898 <HAL_TIM_MspPostInit+0x100>)
 8003852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003854:	4a10      	ldr	r2, [pc, #64]	; (8003898 <HAL_TIM_MspPostInit+0x100>)
 8003856:	f043 0302 	orr.w	r3, r3, #2
 800385a:	6313      	str	r3, [r2, #48]	; 0x30
 800385c:	4b0e      	ldr	r3, [pc, #56]	; (8003898 <HAL_TIM_MspPostInit+0x100>)
 800385e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	60bb      	str	r3, [r7, #8]
 8003866:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FO_OUTPUT_CH2_Pin;
 8003868:	f44f 7380 	mov.w	r3, #256	; 0x100
 800386c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800386e:	2302      	movs	r3, #2
 8003870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003872:	2302      	movs	r3, #2
 8003874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003876:	2303      	movs	r3, #3
 8003878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800387a:	2302      	movs	r3, #2
 800387c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FO_OUTPUT_CH2_GPIO_Port, &GPIO_InitStruct);
 800387e:	f107 0314 	add.w	r3, r7, #20
 8003882:	4619      	mov	r1, r3
 8003884:	4807      	ldr	r0, [pc, #28]	; (80038a4 <HAL_TIM_MspPostInit+0x10c>)
 8003886:	f000 fb11 	bl	8003eac <HAL_GPIO_Init>
}
 800388a:	bf00      	nop
 800388c:	3728      	adds	r7, #40	; 0x28
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	40010000 	.word	0x40010000
 8003898:	40023800 	.word	0x40023800
 800389c:	40020000 	.word	0x40020000
 80038a0:	40000400 	.word	0x40000400
 80038a4:	40020400 	.word	0x40020400
 80038a8:	40000800 	.word	0x40000800

080038ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80038b0:	e7fe      	b.n	80038b0 <NMI_Handler+0x4>

080038b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038b2:	b480      	push	{r7}
 80038b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038b6:	e7fe      	b.n	80038b6 <HardFault_Handler+0x4>

080038b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038bc:	e7fe      	b.n	80038bc <MemManage_Handler+0x4>

080038be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038be:	b480      	push	{r7}
 80038c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038c2:	e7fe      	b.n	80038c2 <BusFault_Handler+0x4>

080038c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038c8:	e7fe      	b.n	80038c8 <UsageFault_Handler+0x4>

080038ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038ca:	b480      	push	{r7}
 80038cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038ce:	bf00      	nop
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038dc:	bf00      	nop
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038e6:	b480      	push	{r7}
 80038e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038ea:	bf00      	nop
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038f8:	f000 f982 	bl	8003c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038fc:	bf00      	nop
 80038fe:	bd80      	pop	{r7, pc}

08003900 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_A_Pin);
 8003904:	2040      	movs	r0, #64	; 0x40
 8003906:	f000 fc87 	bl	8004218 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_B_Pin);
 800390a:	2080      	movs	r0, #128	; 0x80
 800390c:	f000 fc84 	bl	8004218 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_BUT_Pin);
 8003910:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003914:	f000 fc80 	bl	8004218 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003918:	bf00      	nop
 800391a:	bd80      	pop	{r7, pc}

0800391c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003920:	4803      	ldr	r0, [pc, #12]	; (8003930 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8003922:	f002 fedd 	bl	80066e0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8003926:	4803      	ldr	r0, [pc, #12]	; (8003934 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8003928:	f002 feda 	bl	80066e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800392c:	bf00      	nop
 800392e:	bd80      	pop	{r7, pc}
 8003930:	200002b8 	.word	0x200002b8
 8003934:	20000420 	.word	0x20000420

08003938 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800393c:	4803      	ldr	r0, [pc, #12]	; (800394c <TIM1_UP_TIM10_IRQHandler+0x14>)
 800393e:	f002 fecf 	bl	80066e0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8003942:	4803      	ldr	r0, [pc, #12]	; (8003950 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8003944:	f002 fecc 	bl	80066e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003948:	bf00      	nop
 800394a:	bd80      	pop	{r7, pc}
 800394c:	200002b8 	.word	0x200002b8
 8003950:	20000468 	.word	0x20000468

08003954 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003958:	4803      	ldr	r0, [pc, #12]	; (8003968 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800395a:	f002 fec1 	bl	80066e0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800395e:	4803      	ldr	r0, [pc, #12]	; (800396c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8003960:	f002 febe 	bl	80066e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003964:	bf00      	nop
 8003966:	bd80      	pop	{r7, pc}
 8003968:	200002b8 	.word	0x200002b8
 800396c:	200004b0 	.word	0x200004b0

08003970 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003974:	4802      	ldr	r0, [pc, #8]	; (8003980 <TIM2_IRQHandler+0x10>)
 8003976:	f002 feb3 	bl	80066e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800397a:	bf00      	nop
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	20000300 	.word	0x20000300

08003984 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003988:	4802      	ldr	r0, [pc, #8]	; (8003994 <TIM3_IRQHandler+0x10>)
 800398a:	f002 fea9 	bl	80066e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800398e:	bf00      	nop
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	20000348 	.word	0x20000348

08003998 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800399c:	4802      	ldr	r0, [pc, #8]	; (80039a8 <TIM4_IRQHandler+0x10>)
 800399e:	f002 fe9f 	bl	80066e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80039a2:	bf00      	nop
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	20000390 	.word	0x20000390

080039ac <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80039b0:	4802      	ldr	r0, [pc, #8]	; (80039bc <TIM5_IRQHandler+0x10>)
 80039b2:	f002 fe95 	bl	80066e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80039b6:	bf00      	nop
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	200003d8 	.word	0x200003d8

080039c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80039c4:	4802      	ldr	r0, [pc, #8]	; (80039d0 <OTG_FS_IRQHandler+0x10>)
 80039c6:	f000 fd8f 	bl	80044e8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80039ca:	bf00      	nop
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	20001a5c 	.word	0x20001a5c

080039d4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039e0:	2300      	movs	r3, #0
 80039e2:	617b      	str	r3, [r7, #20]
 80039e4:	e00a      	b.n	80039fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80039e6:	f3af 8000 	nop.w
 80039ea:	4601      	mov	r1, r0
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	1c5a      	adds	r2, r3, #1
 80039f0:	60ba      	str	r2, [r7, #8]
 80039f2:	b2ca      	uxtb	r2, r1
 80039f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	3301      	adds	r3, #1
 80039fa:	617b      	str	r3, [r7, #20]
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	dbf0      	blt.n	80039e6 <_read+0x12>
	}

return len;
 8003a04:	687b      	ldr	r3, [r7, #4]
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3718      	adds	r7, #24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <_close>:
	}
	return len;
}

int _close(int file)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b083      	sub	sp, #12
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
	return -1;
 8003a16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr

08003a26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b083      	sub	sp, #12
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
 8003a2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a36:	605a      	str	r2, [r3, #4]
	return 0;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <_isatty>:

int _isatty(int file)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
	return 1;
 8003a4e:	2301      	movs	r3, #1
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
	return 0;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3714      	adds	r7, #20
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
	...

08003a78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a80:	4a14      	ldr	r2, [pc, #80]	; (8003ad4 <_sbrk+0x5c>)
 8003a82:	4b15      	ldr	r3, [pc, #84]	; (8003ad8 <_sbrk+0x60>)
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a8c:	4b13      	ldr	r3, [pc, #76]	; (8003adc <_sbrk+0x64>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d102      	bne.n	8003a9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a94:	4b11      	ldr	r3, [pc, #68]	; (8003adc <_sbrk+0x64>)
 8003a96:	4a12      	ldr	r2, [pc, #72]	; (8003ae0 <_sbrk+0x68>)
 8003a98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a9a:	4b10      	ldr	r3, [pc, #64]	; (8003adc <_sbrk+0x64>)
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d207      	bcs.n	8003ab8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003aa8:	f008 f886 	bl	800bbb8 <__errno>
 8003aac:	4603      	mov	r3, r0
 8003aae:	220c      	movs	r2, #12
 8003ab0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ab6:	e009      	b.n	8003acc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ab8:	4b08      	ldr	r3, [pc, #32]	; (8003adc <_sbrk+0x64>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003abe:	4b07      	ldr	r3, [pc, #28]	; (8003adc <_sbrk+0x64>)
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	4a05      	ldr	r2, [pc, #20]	; (8003adc <_sbrk+0x64>)
 8003ac8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003aca:	68fb      	ldr	r3, [r7, #12]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3718      	adds	r7, #24
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	20020000 	.word	0x20020000
 8003ad8:	00000400 	.word	0x00000400
 8003adc:	20000574 	.word	0x20000574
 8003ae0:	200022d8 	.word	0x200022d8

08003ae4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ae8:	4b06      	ldr	r3, [pc, #24]	; (8003b04 <SystemInit+0x20>)
 8003aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aee:	4a05      	ldr	r2, [pc, #20]	; (8003b04 <SystemInit+0x20>)
 8003af0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003af4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003af8:	bf00      	nop
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	e000ed00 	.word	0xe000ed00

08003b08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003b08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003b0c:	480d      	ldr	r0, [pc, #52]	; (8003b44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003b0e:	490e      	ldr	r1, [pc, #56]	; (8003b48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003b10:	4a0e      	ldr	r2, [pc, #56]	; (8003b4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b14:	e002      	b.n	8003b1c <LoopCopyDataInit>

08003b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b1a:	3304      	adds	r3, #4

08003b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b20:	d3f9      	bcc.n	8003b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b22:	4a0b      	ldr	r2, [pc, #44]	; (8003b50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003b24:	4c0b      	ldr	r4, [pc, #44]	; (8003b54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b28:	e001      	b.n	8003b2e <LoopFillZerobss>

08003b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b2c:	3204      	adds	r2, #4

08003b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b30:	d3fb      	bcc.n	8003b2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003b32:	f7ff ffd7 	bl	8003ae4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b36:	f008 f845 	bl	800bbc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b3a:	f7fe f811 	bl	8001b60 <main>
  bx  lr    
 8003b3e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003b40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b48:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8003b4c:	0800dab0 	.word	0x0800dab0
  ldr r2, =_sbss
 8003b50:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8003b54:	200022d4 	.word	0x200022d4

08003b58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b58:	e7fe      	b.n	8003b58 <ADC_IRQHandler>
	...

08003b5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b60:	4b0e      	ldr	r3, [pc, #56]	; (8003b9c <HAL_Init+0x40>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a0d      	ldr	r2, [pc, #52]	; (8003b9c <HAL_Init+0x40>)
 8003b66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b6c:	4b0b      	ldr	r3, [pc, #44]	; (8003b9c <HAL_Init+0x40>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a0a      	ldr	r2, [pc, #40]	; (8003b9c <HAL_Init+0x40>)
 8003b72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b78:	4b08      	ldr	r3, [pc, #32]	; (8003b9c <HAL_Init+0x40>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a07      	ldr	r2, [pc, #28]	; (8003b9c <HAL_Init+0x40>)
 8003b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b84:	2003      	movs	r0, #3
 8003b86:	f000 f94f 	bl	8003e28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b8a:	200f      	movs	r0, #15
 8003b8c:	f000 f808 	bl	8003ba0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b90:	f7ff fcd2 	bl	8003538 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	40023c00 	.word	0x40023c00

08003ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ba8:	4b12      	ldr	r3, [pc, #72]	; (8003bf4 <HAL_InitTick+0x54>)
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	4b12      	ldr	r3, [pc, #72]	; (8003bf8 <HAL_InitTick+0x58>)
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f000 f967 	bl	8003e92 <HAL_SYSTICK_Config>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e00e      	b.n	8003bec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b0f      	cmp	r3, #15
 8003bd2:	d80a      	bhi.n	8003bea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	6879      	ldr	r1, [r7, #4]
 8003bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bdc:	f000 f92f 	bl	8003e3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003be0:	4a06      	ldr	r2, [pc, #24]	; (8003bfc <HAL_InitTick+0x5c>)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
 8003be8:	e000      	b.n	8003bec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3708      	adds	r7, #8
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	20000000 	.word	0x20000000
 8003bf8:	20000008 	.word	0x20000008
 8003bfc:	20000004 	.word	0x20000004

08003c00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c04:	4b06      	ldr	r3, [pc, #24]	; (8003c20 <HAL_IncTick+0x20>)
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	461a      	mov	r2, r3
 8003c0a:	4b06      	ldr	r3, [pc, #24]	; (8003c24 <HAL_IncTick+0x24>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4413      	add	r3, r2
 8003c10:	4a04      	ldr	r2, [pc, #16]	; (8003c24 <HAL_IncTick+0x24>)
 8003c12:	6013      	str	r3, [r2, #0]
}
 8003c14:	bf00      	nop
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	20000008 	.word	0x20000008
 8003c24:	20000578 	.word	0x20000578

08003c28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8003c2c:	4b03      	ldr	r3, [pc, #12]	; (8003c3c <HAL_GetTick+0x14>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	20000578 	.word	0x20000578

08003c40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c48:	f7ff ffee 	bl	8003c28 <HAL_GetTick>
 8003c4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c58:	d005      	beq.n	8003c66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c5a:	4b0a      	ldr	r3, [pc, #40]	; (8003c84 <HAL_Delay+0x44>)
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	461a      	mov	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4413      	add	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c66:	bf00      	nop
 8003c68:	f7ff ffde 	bl	8003c28 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d8f7      	bhi.n	8003c68 <HAL_Delay+0x28>
  {
  }
}
 8003c78:	bf00      	nop
 8003c7a:	bf00      	nop
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	20000008 	.word	0x20000008

08003c88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f003 0307 	and.w	r3, r3, #7
 8003c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c98:	4b0c      	ldr	r3, [pc, #48]	; (8003ccc <__NVIC_SetPriorityGrouping+0x44>)
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cba:	4a04      	ldr	r2, [pc, #16]	; (8003ccc <__NVIC_SetPriorityGrouping+0x44>)
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	60d3      	str	r3, [r2, #12]
}
 8003cc0:	bf00      	nop
 8003cc2:	3714      	adds	r7, #20
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr
 8003ccc:	e000ed00 	.word	0xe000ed00

08003cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cd4:	4b04      	ldr	r3, [pc, #16]	; (8003ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	0a1b      	lsrs	r3, r3, #8
 8003cda:	f003 0307 	and.w	r3, r3, #7
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr
 8003ce8:	e000ed00 	.word	0xe000ed00

08003cec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	db0b      	blt.n	8003d16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cfe:	79fb      	ldrb	r3, [r7, #7]
 8003d00:	f003 021f 	and.w	r2, r3, #31
 8003d04:	4907      	ldr	r1, [pc, #28]	; (8003d24 <__NVIC_EnableIRQ+0x38>)
 8003d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d0a:	095b      	lsrs	r3, r3, #5
 8003d0c:	2001      	movs	r0, #1
 8003d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	e000e100 	.word	0xe000e100

08003d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	4603      	mov	r3, r0
 8003d30:	6039      	str	r1, [r7, #0]
 8003d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	db0a      	blt.n	8003d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	490c      	ldr	r1, [pc, #48]	; (8003d74 <__NVIC_SetPriority+0x4c>)
 8003d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d46:	0112      	lsls	r2, r2, #4
 8003d48:	b2d2      	uxtb	r2, r2
 8003d4a:	440b      	add	r3, r1
 8003d4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d50:	e00a      	b.n	8003d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	4908      	ldr	r1, [pc, #32]	; (8003d78 <__NVIC_SetPriority+0x50>)
 8003d58:	79fb      	ldrb	r3, [r7, #7]
 8003d5a:	f003 030f 	and.w	r3, r3, #15
 8003d5e:	3b04      	subs	r3, #4
 8003d60:	0112      	lsls	r2, r2, #4
 8003d62:	b2d2      	uxtb	r2, r2
 8003d64:	440b      	add	r3, r1
 8003d66:	761a      	strb	r2, [r3, #24]
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	e000e100 	.word	0xe000e100
 8003d78:	e000ed00 	.word	0xe000ed00

08003d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b089      	sub	sp, #36	; 0x24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f003 0307 	and.w	r3, r3, #7
 8003d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	f1c3 0307 	rsb	r3, r3, #7
 8003d96:	2b04      	cmp	r3, #4
 8003d98:	bf28      	it	cs
 8003d9a:	2304      	movcs	r3, #4
 8003d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	3304      	adds	r3, #4
 8003da2:	2b06      	cmp	r3, #6
 8003da4:	d902      	bls.n	8003dac <NVIC_EncodePriority+0x30>
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	3b03      	subs	r3, #3
 8003daa:	e000      	b.n	8003dae <NVIC_EncodePriority+0x32>
 8003dac:	2300      	movs	r3, #0
 8003dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003db0:	f04f 32ff 	mov.w	r2, #4294967295
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dba:	43da      	mvns	r2, r3
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	401a      	ands	r2, r3
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	fa01 f303 	lsl.w	r3, r1, r3
 8003dce:	43d9      	mvns	r1, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dd4:	4313      	orrs	r3, r2
         );
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3724      	adds	r7, #36	; 0x24
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
	...

08003de4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	3b01      	subs	r3, #1
 8003df0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003df4:	d301      	bcc.n	8003dfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003df6:	2301      	movs	r3, #1
 8003df8:	e00f      	b.n	8003e1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dfa:	4a0a      	ldr	r2, [pc, #40]	; (8003e24 <SysTick_Config+0x40>)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e02:	210f      	movs	r1, #15
 8003e04:	f04f 30ff 	mov.w	r0, #4294967295
 8003e08:	f7ff ff8e 	bl	8003d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e0c:	4b05      	ldr	r3, [pc, #20]	; (8003e24 <SysTick_Config+0x40>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e12:	4b04      	ldr	r3, [pc, #16]	; (8003e24 <SysTick_Config+0x40>)
 8003e14:	2207      	movs	r2, #7
 8003e16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	e000e010 	.word	0xe000e010

08003e28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f7ff ff29 	bl	8003c88 <__NVIC_SetPriorityGrouping>
}
 8003e36:	bf00      	nop
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b086      	sub	sp, #24
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	4603      	mov	r3, r0
 8003e46:	60b9      	str	r1, [r7, #8]
 8003e48:	607a      	str	r2, [r7, #4]
 8003e4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e50:	f7ff ff3e 	bl	8003cd0 <__NVIC_GetPriorityGrouping>
 8003e54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	68b9      	ldr	r1, [r7, #8]
 8003e5a:	6978      	ldr	r0, [r7, #20]
 8003e5c:	f7ff ff8e 	bl	8003d7c <NVIC_EncodePriority>
 8003e60:	4602      	mov	r2, r0
 8003e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e66:	4611      	mov	r1, r2
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff ff5d 	bl	8003d28 <__NVIC_SetPriority>
}
 8003e6e:	bf00      	nop
 8003e70:	3718      	adds	r7, #24
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b082      	sub	sp, #8
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7ff ff31 	bl	8003cec <__NVIC_EnableIRQ>
}
 8003e8a:	bf00      	nop
 8003e8c:	3708      	adds	r7, #8
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b082      	sub	sp, #8
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7ff ffa2 	bl	8003de4 <SysTick_Config>
 8003ea0:	4603      	mov	r3, r0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3708      	adds	r7, #8
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
	...

08003eac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b089      	sub	sp, #36	; 0x24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	61fb      	str	r3, [r7, #28]
 8003ec6:	e159      	b.n	800417c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ec8:	2201      	movs	r2, #1
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	f040 8148 	bne.w	8004176 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f003 0303 	and.w	r3, r3, #3
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d005      	beq.n	8003efe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d130      	bne.n	8003f60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	2203      	movs	r2, #3
 8003f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0e:	43db      	mvns	r3, r3
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	4013      	ands	r3, r2
 8003f14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	68da      	ldr	r2, [r3, #12]
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f22:	69ba      	ldr	r2, [r7, #24]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f34:	2201      	movs	r2, #1
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	4013      	ands	r3, r2
 8003f42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	091b      	lsrs	r3, r3, #4
 8003f4a:	f003 0201 	and.w	r2, r3, #1
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f003 0303 	and.w	r3, r3, #3
 8003f68:	2b03      	cmp	r3, #3
 8003f6a:	d017      	beq.n	8003f9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	2203      	movs	r2, #3
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	4013      	ands	r3, r2
 8003f82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	689a      	ldr	r2, [r3, #8]
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	005b      	lsls	r3, r3, #1
 8003f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f003 0303 	and.w	r3, r3, #3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d123      	bne.n	8003ff0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	08da      	lsrs	r2, r3, #3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3208      	adds	r2, #8
 8003fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	f003 0307 	and.w	r3, r3, #7
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	220f      	movs	r2, #15
 8003fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc4:	43db      	mvns	r3, r3
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	691a      	ldr	r2, [r3, #16]
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	08da      	lsrs	r2, r3, #3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	3208      	adds	r2, #8
 8003fea:	69b9      	ldr	r1, [r7, #24]
 8003fec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	2203      	movs	r2, #3
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	43db      	mvns	r3, r3
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	4013      	ands	r3, r2
 8004006:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f003 0203 	and.w	r2, r3, #3
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	fa02 f303 	lsl.w	r3, r2, r3
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	4313      	orrs	r3, r2
 800401c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 80a2 	beq.w	8004176 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004032:	2300      	movs	r3, #0
 8004034:	60fb      	str	r3, [r7, #12]
 8004036:	4b57      	ldr	r3, [pc, #348]	; (8004194 <HAL_GPIO_Init+0x2e8>)
 8004038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403a:	4a56      	ldr	r2, [pc, #344]	; (8004194 <HAL_GPIO_Init+0x2e8>)
 800403c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004040:	6453      	str	r3, [r2, #68]	; 0x44
 8004042:	4b54      	ldr	r3, [pc, #336]	; (8004194 <HAL_GPIO_Init+0x2e8>)
 8004044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800404a:	60fb      	str	r3, [r7, #12]
 800404c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800404e:	4a52      	ldr	r2, [pc, #328]	; (8004198 <HAL_GPIO_Init+0x2ec>)
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	089b      	lsrs	r3, r3, #2
 8004054:	3302      	adds	r3, #2
 8004056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800405a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	f003 0303 	and.w	r3, r3, #3
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	220f      	movs	r2, #15
 8004066:	fa02 f303 	lsl.w	r3, r2, r3
 800406a:	43db      	mvns	r3, r3
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	4013      	ands	r3, r2
 8004070:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a49      	ldr	r2, [pc, #292]	; (800419c <HAL_GPIO_Init+0x2f0>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d019      	beq.n	80040ae <HAL_GPIO_Init+0x202>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a48      	ldr	r2, [pc, #288]	; (80041a0 <HAL_GPIO_Init+0x2f4>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d013      	beq.n	80040aa <HAL_GPIO_Init+0x1fe>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a47      	ldr	r2, [pc, #284]	; (80041a4 <HAL_GPIO_Init+0x2f8>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d00d      	beq.n	80040a6 <HAL_GPIO_Init+0x1fa>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a46      	ldr	r2, [pc, #280]	; (80041a8 <HAL_GPIO_Init+0x2fc>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d007      	beq.n	80040a2 <HAL_GPIO_Init+0x1f6>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a45      	ldr	r2, [pc, #276]	; (80041ac <HAL_GPIO_Init+0x300>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d101      	bne.n	800409e <HAL_GPIO_Init+0x1f2>
 800409a:	2304      	movs	r3, #4
 800409c:	e008      	b.n	80040b0 <HAL_GPIO_Init+0x204>
 800409e:	2307      	movs	r3, #7
 80040a0:	e006      	b.n	80040b0 <HAL_GPIO_Init+0x204>
 80040a2:	2303      	movs	r3, #3
 80040a4:	e004      	b.n	80040b0 <HAL_GPIO_Init+0x204>
 80040a6:	2302      	movs	r3, #2
 80040a8:	e002      	b.n	80040b0 <HAL_GPIO_Init+0x204>
 80040aa:	2301      	movs	r3, #1
 80040ac:	e000      	b.n	80040b0 <HAL_GPIO_Init+0x204>
 80040ae:	2300      	movs	r3, #0
 80040b0:	69fa      	ldr	r2, [r7, #28]
 80040b2:	f002 0203 	and.w	r2, r2, #3
 80040b6:	0092      	lsls	r2, r2, #2
 80040b8:	4093      	lsls	r3, r2
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	4313      	orrs	r3, r2
 80040be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040c0:	4935      	ldr	r1, [pc, #212]	; (8004198 <HAL_GPIO_Init+0x2ec>)
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	089b      	lsrs	r3, r3, #2
 80040c6:	3302      	adds	r3, #2
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040ce:	4b38      	ldr	r3, [pc, #224]	; (80041b0 <HAL_GPIO_Init+0x304>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	43db      	mvns	r3, r3
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	4013      	ands	r3, r2
 80040dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040f2:	4a2f      	ldr	r2, [pc, #188]	; (80041b0 <HAL_GPIO_Init+0x304>)
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040f8:	4b2d      	ldr	r3, [pc, #180]	; (80041b0 <HAL_GPIO_Init+0x304>)
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	43db      	mvns	r3, r3
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	4013      	ands	r3, r2
 8004106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	4313      	orrs	r3, r2
 800411a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800411c:	4a24      	ldr	r2, [pc, #144]	; (80041b0 <HAL_GPIO_Init+0x304>)
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004122:	4b23      	ldr	r3, [pc, #140]	; (80041b0 <HAL_GPIO_Init+0x304>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	43db      	mvns	r3, r3
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	4013      	ands	r3, r2
 8004130:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	4313      	orrs	r3, r2
 8004144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004146:	4a1a      	ldr	r2, [pc, #104]	; (80041b0 <HAL_GPIO_Init+0x304>)
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800414c:	4b18      	ldr	r3, [pc, #96]	; (80041b0 <HAL_GPIO_Init+0x304>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	43db      	mvns	r3, r3
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	4013      	ands	r3, r2
 800415a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d003      	beq.n	8004170 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	4313      	orrs	r3, r2
 800416e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004170:	4a0f      	ldr	r2, [pc, #60]	; (80041b0 <HAL_GPIO_Init+0x304>)
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	3301      	adds	r3, #1
 800417a:	61fb      	str	r3, [r7, #28]
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	2b0f      	cmp	r3, #15
 8004180:	f67f aea2 	bls.w	8003ec8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004184:	bf00      	nop
 8004186:	bf00      	nop
 8004188:	3724      	adds	r7, #36	; 0x24
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	40023800 	.word	0x40023800
 8004198:	40013800 	.word	0x40013800
 800419c:	40020000 	.word	0x40020000
 80041a0:	40020400 	.word	0x40020400
 80041a4:	40020800 	.word	0x40020800
 80041a8:	40020c00 	.word	0x40020c00
 80041ac:	40021000 	.word	0x40021000
 80041b0:	40013c00 	.word	0x40013c00

080041b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	460b      	mov	r3, r1
 80041be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	691a      	ldr	r2, [r3, #16]
 80041c4:	887b      	ldrh	r3, [r7, #2]
 80041c6:	4013      	ands	r3, r2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d002      	beq.n	80041d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041cc:	2301      	movs	r3, #1
 80041ce:	73fb      	strb	r3, [r7, #15]
 80041d0:	e001      	b.n	80041d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041d2:	2300      	movs	r3, #0
 80041d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3714      	adds	r7, #20
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	460b      	mov	r3, r1
 80041ee:	807b      	strh	r3, [r7, #2]
 80041f0:	4613      	mov	r3, r2
 80041f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041f4:	787b      	ldrb	r3, [r7, #1]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041fa:	887a      	ldrh	r2, [r7, #2]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004200:	e003      	b.n	800420a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004202:	887b      	ldrh	r3, [r7, #2]
 8004204:	041a      	lsls	r2, r3, #16
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	619a      	str	r2, [r3, #24]
}
 800420a:	bf00      	nop
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
	...

08004218 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	4603      	mov	r3, r0
 8004220:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004222:	4b08      	ldr	r3, [pc, #32]	; (8004244 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004224:	695a      	ldr	r2, [r3, #20]
 8004226:	88fb      	ldrh	r3, [r7, #6]
 8004228:	4013      	ands	r3, r2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d006      	beq.n	800423c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800422e:	4a05      	ldr	r2, [pc, #20]	; (8004244 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004230:	88fb      	ldrh	r3, [r7, #6]
 8004232:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004234:	88fb      	ldrh	r3, [r7, #6]
 8004236:	4618      	mov	r0, r3
 8004238:	f7fe fb24 	bl	8002884 <HAL_GPIO_EXTI_Callback>
  }
}
 800423c:	bf00      	nop
 800423e:	3708      	adds	r7, #8
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	40013c00 	.word	0x40013c00

08004248 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800424a:	b08f      	sub	sp, #60	; 0x3c
 800424c:	af0a      	add	r7, sp, #40	; 0x28
 800424e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e10f      	b.n	800447a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	d106      	bne.n	800427a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f006 ff1f 	bl	800b0b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2203      	movs	r2, #3
 800427e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428a:	2b00      	cmp	r3, #0
 800428c:	d102      	bne.n	8004294 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4618      	mov	r0, r3
 800429a:	f003 f9ec 	bl	8007676 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	603b      	str	r3, [r7, #0]
 80042a4:	687e      	ldr	r6, [r7, #4]
 80042a6:	466d      	mov	r5, sp
 80042a8:	f106 0410 	add.w	r4, r6, #16
 80042ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80042b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80042bc:	1d33      	adds	r3, r6, #4
 80042be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042c0:	6838      	ldr	r0, [r7, #0]
 80042c2:	f003 f8c3 	bl	800744c <USB_CoreInit>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d005      	beq.n	80042d8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2202      	movs	r2, #2
 80042d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e0d0      	b.n	800447a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2100      	movs	r1, #0
 80042de:	4618      	mov	r0, r3
 80042e0:	f003 f9da 	bl	8007698 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042e4:	2300      	movs	r3, #0
 80042e6:	73fb      	strb	r3, [r7, #15]
 80042e8:	e04a      	b.n	8004380 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80042ea:	7bfa      	ldrb	r2, [r7, #15]
 80042ec:	6879      	ldr	r1, [r7, #4]
 80042ee:	4613      	mov	r3, r2
 80042f0:	00db      	lsls	r3, r3, #3
 80042f2:	4413      	add	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	440b      	add	r3, r1
 80042f8:	333d      	adds	r3, #61	; 0x3d
 80042fa:	2201      	movs	r2, #1
 80042fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80042fe:	7bfa      	ldrb	r2, [r7, #15]
 8004300:	6879      	ldr	r1, [r7, #4]
 8004302:	4613      	mov	r3, r2
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	4413      	add	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	440b      	add	r3, r1
 800430c:	333c      	adds	r3, #60	; 0x3c
 800430e:	7bfa      	ldrb	r2, [r7, #15]
 8004310:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004312:	7bfa      	ldrb	r2, [r7, #15]
 8004314:	7bfb      	ldrb	r3, [r7, #15]
 8004316:	b298      	uxth	r0, r3
 8004318:	6879      	ldr	r1, [r7, #4]
 800431a:	4613      	mov	r3, r2
 800431c:	00db      	lsls	r3, r3, #3
 800431e:	4413      	add	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	440b      	add	r3, r1
 8004324:	3344      	adds	r3, #68	; 0x44
 8004326:	4602      	mov	r2, r0
 8004328:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800432a:	7bfa      	ldrb	r2, [r7, #15]
 800432c:	6879      	ldr	r1, [r7, #4]
 800432e:	4613      	mov	r3, r2
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	4413      	add	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	440b      	add	r3, r1
 8004338:	3340      	adds	r3, #64	; 0x40
 800433a:	2200      	movs	r2, #0
 800433c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800433e:	7bfa      	ldrb	r2, [r7, #15]
 8004340:	6879      	ldr	r1, [r7, #4]
 8004342:	4613      	mov	r3, r2
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	4413      	add	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	440b      	add	r3, r1
 800434c:	3348      	adds	r3, #72	; 0x48
 800434e:	2200      	movs	r2, #0
 8004350:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004352:	7bfa      	ldrb	r2, [r7, #15]
 8004354:	6879      	ldr	r1, [r7, #4]
 8004356:	4613      	mov	r3, r2
 8004358:	00db      	lsls	r3, r3, #3
 800435a:	4413      	add	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	440b      	add	r3, r1
 8004360:	334c      	adds	r3, #76	; 0x4c
 8004362:	2200      	movs	r2, #0
 8004364:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004366:	7bfa      	ldrb	r2, [r7, #15]
 8004368:	6879      	ldr	r1, [r7, #4]
 800436a:	4613      	mov	r3, r2
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	4413      	add	r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	440b      	add	r3, r1
 8004374:	3354      	adds	r3, #84	; 0x54
 8004376:	2200      	movs	r2, #0
 8004378:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800437a:	7bfb      	ldrb	r3, [r7, #15]
 800437c:	3301      	adds	r3, #1
 800437e:	73fb      	strb	r3, [r7, #15]
 8004380:	7bfa      	ldrb	r2, [r7, #15]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	429a      	cmp	r2, r3
 8004388:	d3af      	bcc.n	80042ea <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800438a:	2300      	movs	r3, #0
 800438c:	73fb      	strb	r3, [r7, #15]
 800438e:	e044      	b.n	800441a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004390:	7bfa      	ldrb	r2, [r7, #15]
 8004392:	6879      	ldr	r1, [r7, #4]
 8004394:	4613      	mov	r3, r2
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	4413      	add	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	440b      	add	r3, r1
 800439e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80043a2:	2200      	movs	r2, #0
 80043a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80043a6:	7bfa      	ldrb	r2, [r7, #15]
 80043a8:	6879      	ldr	r1, [r7, #4]
 80043aa:	4613      	mov	r3, r2
 80043ac:	00db      	lsls	r3, r3, #3
 80043ae:	4413      	add	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	440b      	add	r3, r1
 80043b4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80043b8:	7bfa      	ldrb	r2, [r7, #15]
 80043ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80043bc:	7bfa      	ldrb	r2, [r7, #15]
 80043be:	6879      	ldr	r1, [r7, #4]
 80043c0:	4613      	mov	r3, r2
 80043c2:	00db      	lsls	r3, r3, #3
 80043c4:	4413      	add	r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	440b      	add	r3, r1
 80043ca:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80043ce:	2200      	movs	r2, #0
 80043d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80043d2:	7bfa      	ldrb	r2, [r7, #15]
 80043d4:	6879      	ldr	r1, [r7, #4]
 80043d6:	4613      	mov	r3, r2
 80043d8:	00db      	lsls	r3, r3, #3
 80043da:	4413      	add	r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	440b      	add	r3, r1
 80043e0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80043e4:	2200      	movs	r2, #0
 80043e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80043e8:	7bfa      	ldrb	r2, [r7, #15]
 80043ea:	6879      	ldr	r1, [r7, #4]
 80043ec:	4613      	mov	r3, r2
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	4413      	add	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	440b      	add	r3, r1
 80043f6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80043fa:	2200      	movs	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80043fe:	7bfa      	ldrb	r2, [r7, #15]
 8004400:	6879      	ldr	r1, [r7, #4]
 8004402:	4613      	mov	r3, r2
 8004404:	00db      	lsls	r3, r3, #3
 8004406:	4413      	add	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	440b      	add	r3, r1
 800440c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004410:	2200      	movs	r2, #0
 8004412:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004414:	7bfb      	ldrb	r3, [r7, #15]
 8004416:	3301      	adds	r3, #1
 8004418:	73fb      	strb	r3, [r7, #15]
 800441a:	7bfa      	ldrb	r2, [r7, #15]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	429a      	cmp	r2, r3
 8004422:	d3b5      	bcc.n	8004390 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	603b      	str	r3, [r7, #0]
 800442a:	687e      	ldr	r6, [r7, #4]
 800442c:	466d      	mov	r5, sp
 800442e:	f106 0410 	add.w	r4, r6, #16
 8004432:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004434:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004436:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004438:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800443a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800443e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004442:	1d33      	adds	r3, r6, #4
 8004444:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004446:	6838      	ldr	r0, [r7, #0]
 8004448:	f003 f972 	bl	8007730 <USB_DevInit>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d005      	beq.n	800445e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2202      	movs	r2, #2
 8004456:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e00d      	b.n	800447a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4618      	mov	r0, r3
 8004474:	f004 fac1 	bl	80089fa <USB_DevDisconnect>

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004482 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b084      	sub	sp, #16
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004496:	2b01      	cmp	r3, #1
 8004498:	d101      	bne.n	800449e <HAL_PCD_Start+0x1c>
 800449a:	2302      	movs	r3, #2
 800449c:	e020      	b.n	80044e0 <HAL_PCD_Start+0x5e>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d109      	bne.n	80044c2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d005      	beq.n	80044c2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f003 f8c4 	bl	8007654 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f004 fa71 	bl	80089b8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80044e8:	b590      	push	{r4, r7, lr}
 80044ea:	b08d      	sub	sp, #52	; 0x34
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044f6:	6a3b      	ldr	r3, [r7, #32]
 80044f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4618      	mov	r0, r3
 8004500:	f004 fb2f 	bl	8008b62 <USB_GetMode>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	f040 848a 	bne.w	8004e20 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4618      	mov	r0, r3
 8004512:	f004 fa93 	bl	8008a3c <USB_ReadInterrupts>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 8480 	beq.w	8004e1e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	0a1b      	lsrs	r3, r3, #8
 8004528:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4618      	mov	r0, r3
 8004538:	f004 fa80 	bl	8008a3c <USB_ReadInterrupts>
 800453c:	4603      	mov	r3, r0
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b02      	cmp	r3, #2
 8004544:	d107      	bne.n	8004556 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	695a      	ldr	r2, [r3, #20]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f002 0202 	and.w	r2, r2, #2
 8004554:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4618      	mov	r0, r3
 800455c:	f004 fa6e 	bl	8008a3c <USB_ReadInterrupts>
 8004560:	4603      	mov	r3, r0
 8004562:	f003 0310 	and.w	r3, r3, #16
 8004566:	2b10      	cmp	r3, #16
 8004568:	d161      	bne.n	800462e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	699a      	ldr	r2, [r3, #24]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 0210 	bic.w	r2, r2, #16
 8004578:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800457a:	6a3b      	ldr	r3, [r7, #32]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	f003 020f 	and.w	r2, r3, #15
 8004586:	4613      	mov	r3, r2
 8004588:	00db      	lsls	r3, r3, #3
 800458a:	4413      	add	r3, r2
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	4413      	add	r3, r2
 8004596:	3304      	adds	r3, #4
 8004598:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	0c5b      	lsrs	r3, r3, #17
 800459e:	f003 030f 	and.w	r3, r3, #15
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d124      	bne.n	80045f0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80045ac:	4013      	ands	r3, r2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d035      	beq.n	800461e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	091b      	lsrs	r3, r3, #4
 80045ba:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80045bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	461a      	mov	r2, r3
 80045c4:	6a38      	ldr	r0, [r7, #32]
 80045c6:	f004 f8a5 	bl	8008714 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	691a      	ldr	r2, [r3, #16]
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	091b      	lsrs	r3, r3, #4
 80045d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045d6:	441a      	add	r2, r3
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	6a1a      	ldr	r2, [r3, #32]
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	091b      	lsrs	r3, r3, #4
 80045e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045e8:	441a      	add	r2, r3
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	621a      	str	r2, [r3, #32]
 80045ee:	e016      	b.n	800461e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	0c5b      	lsrs	r3, r3, #17
 80045f4:	f003 030f 	and.w	r3, r3, #15
 80045f8:	2b06      	cmp	r3, #6
 80045fa:	d110      	bne.n	800461e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004602:	2208      	movs	r2, #8
 8004604:	4619      	mov	r1, r3
 8004606:	6a38      	ldr	r0, [r7, #32]
 8004608:	f004 f884 	bl	8008714 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	6a1a      	ldr	r2, [r3, #32]
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	091b      	lsrs	r3, r3, #4
 8004614:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004618:	441a      	add	r2, r3
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	699a      	ldr	r2, [r3, #24]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f042 0210 	orr.w	r2, r2, #16
 800462c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4618      	mov	r0, r3
 8004634:	f004 fa02 	bl	8008a3c <USB_ReadInterrupts>
 8004638:	4603      	mov	r3, r0
 800463a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800463e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004642:	f040 80a7 	bne.w	8004794 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004646:	2300      	movs	r3, #0
 8004648:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4618      	mov	r0, r3
 8004650:	f004 fa07 	bl	8008a62 <USB_ReadDevAllOutEpInterrupt>
 8004654:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004656:	e099      	b.n	800478c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	f000 808e 	beq.w	8004780 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800466a:	b2d2      	uxtb	r2, r2
 800466c:	4611      	mov	r1, r2
 800466e:	4618      	mov	r0, r3
 8004670:	f004 fa2b 	bl	8008aca <USB_ReadDevOutEPInterrupt>
 8004674:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00c      	beq.n	800469a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	015a      	lsls	r2, r3, #5
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	4413      	add	r3, r2
 8004688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800468c:	461a      	mov	r2, r3
 800468e:	2301      	movs	r3, #1
 8004690:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004692:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 fec3 	bl	8005420 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	f003 0308 	and.w	r3, r3, #8
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00c      	beq.n	80046be <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80046a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a6:	015a      	lsls	r2, r3, #5
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	4413      	add	r3, r2
 80046ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b0:	461a      	mov	r2, r3
 80046b2:	2308      	movs	r3, #8
 80046b4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80046b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 ff99 	bl	80055f0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	f003 0310 	and.w	r3, r3, #16
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d008      	beq.n	80046da <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80046c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ca:	015a      	lsls	r2, r3, #5
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d4:	461a      	mov	r2, r3
 80046d6:	2310      	movs	r3, #16
 80046d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d030      	beq.n	8004746 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80046e4:	6a3b      	ldr	r3, [r7, #32]
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ec:	2b80      	cmp	r3, #128	; 0x80
 80046ee:	d109      	bne.n	8004704 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	69fa      	ldr	r2, [r7, #28]
 80046fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004702:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004706:	4613      	mov	r3, r2
 8004708:	00db      	lsls	r3, r3, #3
 800470a:	4413      	add	r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	4413      	add	r3, r2
 8004716:	3304      	adds	r3, #4
 8004718:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	78db      	ldrb	r3, [r3, #3]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d108      	bne.n	8004734 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	2200      	movs	r2, #0
 8004726:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472a:	b2db      	uxtb	r3, r3
 800472c:	4619      	mov	r1, r3
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f006 fdbe 	bl	800b2b0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	4413      	add	r3, r2
 800473c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004740:	461a      	mov	r2, r3
 8004742:	2302      	movs	r3, #2
 8004744:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	f003 0320 	and.w	r3, r3, #32
 800474c:	2b00      	cmp	r3, #0
 800474e:	d008      	beq.n	8004762 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	015a      	lsls	r2, r3, #5
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	4413      	add	r3, r2
 8004758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800475c:	461a      	mov	r2, r3
 800475e:	2320      	movs	r3, #32
 8004760:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d009      	beq.n	8004780 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476e:	015a      	lsls	r2, r3, #5
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	4413      	add	r3, r2
 8004774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004778:	461a      	mov	r2, r3
 800477a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800477e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004782:	3301      	adds	r3, #1
 8004784:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004788:	085b      	lsrs	r3, r3, #1
 800478a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800478c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478e:	2b00      	cmp	r3, #0
 8004790:	f47f af62 	bne.w	8004658 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4618      	mov	r0, r3
 800479a:	f004 f94f 	bl	8008a3c <USB_ReadInterrupts>
 800479e:	4603      	mov	r3, r0
 80047a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80047a8:	f040 80db 	bne.w	8004962 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f004 f970 	bl	8008a96 <USB_ReadDevAllInEpInterrupt>
 80047b6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80047b8:	2300      	movs	r3, #0
 80047ba:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80047bc:	e0cd      	b.n	800495a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80047be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 80c2 	beq.w	800494e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047d0:	b2d2      	uxtb	r2, r2
 80047d2:	4611      	mov	r1, r2
 80047d4:	4618      	mov	r0, r3
 80047d6:	f004 f996 	bl	8008b06 <USB_ReadDevInEPInterrupt>
 80047da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d057      	beq.n	8004896 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	f003 030f 	and.w	r3, r3, #15
 80047ec:	2201      	movs	r2, #1
 80047ee:	fa02 f303 	lsl.w	r3, r2, r3
 80047f2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	43db      	mvns	r3, r3
 8004800:	69f9      	ldr	r1, [r7, #28]
 8004802:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004806:	4013      	ands	r3, r2
 8004808:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480c:	015a      	lsls	r2, r3, #5
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	4413      	add	r3, r2
 8004812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004816:	461a      	mov	r2, r3
 8004818:	2301      	movs	r3, #1
 800481a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d132      	bne.n	800488a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004824:	6879      	ldr	r1, [r7, #4]
 8004826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004828:	4613      	mov	r3, r2
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	4413      	add	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	440b      	add	r3, r1
 8004832:	334c      	adds	r3, #76	; 0x4c
 8004834:	6819      	ldr	r1, [r3, #0]
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800483a:	4613      	mov	r3, r2
 800483c:	00db      	lsls	r3, r3, #3
 800483e:	4413      	add	r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	4403      	add	r3, r0
 8004844:	3348      	adds	r3, #72	; 0x48
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4419      	add	r1, r3
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800484e:	4613      	mov	r3, r2
 8004850:	00db      	lsls	r3, r3, #3
 8004852:	4413      	add	r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	4403      	add	r3, r0
 8004858:	334c      	adds	r3, #76	; 0x4c
 800485a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800485c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485e:	2b00      	cmp	r3, #0
 8004860:	d113      	bne.n	800488a <HAL_PCD_IRQHandler+0x3a2>
 8004862:	6879      	ldr	r1, [r7, #4]
 8004864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004866:	4613      	mov	r3, r2
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	4413      	add	r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	440b      	add	r3, r1
 8004870:	3354      	adds	r3, #84	; 0x54
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d108      	bne.n	800488a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6818      	ldr	r0, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004882:	461a      	mov	r2, r3
 8004884:	2101      	movs	r1, #1
 8004886:	f004 f99d 	bl	8008bc4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	b2db      	uxtb	r3, r3
 800488e:	4619      	mov	r1, r3
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f006 fc92 	bl	800b1ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	f003 0308 	and.w	r3, r3, #8
 800489c:	2b00      	cmp	r3, #0
 800489e:	d008      	beq.n	80048b2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80048a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a2:	015a      	lsls	r2, r3, #5
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	4413      	add	r3, r2
 80048a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ac:	461a      	mov	r2, r3
 80048ae:	2308      	movs	r3, #8
 80048b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	f003 0310 	and.w	r3, r3, #16
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d008      	beq.n	80048ce <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80048bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048be:	015a      	lsls	r2, r3, #5
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	4413      	add	r3, r2
 80048c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c8:	461a      	mov	r2, r3
 80048ca:	2310      	movs	r3, #16
 80048cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d008      	beq.n	80048ea <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80048d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048da:	015a      	lsls	r2, r3, #5
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	4413      	add	r3, r2
 80048e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e4:	461a      	mov	r2, r3
 80048e6:	2340      	movs	r3, #64	; 0x40
 80048e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	f003 0302 	and.w	r3, r3, #2
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d023      	beq.n	800493c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80048f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048f6:	6a38      	ldr	r0, [r7, #32]
 80048f8:	f003 f87e 	bl	80079f8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80048fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048fe:	4613      	mov	r3, r2
 8004900:	00db      	lsls	r3, r3, #3
 8004902:	4413      	add	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	3338      	adds	r3, #56	; 0x38
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	4413      	add	r3, r2
 800490c:	3304      	adds	r3, #4
 800490e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	78db      	ldrb	r3, [r3, #3]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d108      	bne.n	800492a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	2200      	movs	r2, #0
 800491c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	b2db      	uxtb	r3, r3
 8004922:	4619      	mov	r1, r3
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f006 fcd5 	bl	800b2d4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	015a      	lsls	r2, r3, #5
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	4413      	add	r3, r2
 8004932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004936:	461a      	mov	r2, r3
 8004938:	2302      	movs	r3, #2
 800493a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004942:	2b00      	cmp	r3, #0
 8004944:	d003      	beq.n	800494e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004946:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 fcdb 	bl	8005304 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	3301      	adds	r3, #1
 8004952:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004956:	085b      	lsrs	r3, r3, #1
 8004958:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800495a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495c:	2b00      	cmp	r3, #0
 800495e:	f47f af2e 	bne.w	80047be <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4618      	mov	r0, r3
 8004968:	f004 f868 	bl	8008a3c <USB_ReadInterrupts>
 800496c:	4603      	mov	r3, r0
 800496e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004972:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004976:	d122      	bne.n	80049be <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	69fa      	ldr	r2, [r7, #28]
 8004982:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004986:	f023 0301 	bic.w	r3, r3, #1
 800498a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004992:	2b01      	cmp	r3, #1
 8004994:	d108      	bne.n	80049a8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800499e:	2100      	movs	r1, #0
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 fec3 	bl	800572c <HAL_PCDEx_LPM_Callback>
 80049a6:	e002      	b.n	80049ae <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f006 fc73 	bl	800b294 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	695a      	ldr	r2, [r3, #20]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80049bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f004 f83a 	bl	8008a3c <USB_ReadInterrupts>
 80049c8:	4603      	mov	r3, r0
 80049ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049d2:	d112      	bne.n	80049fa <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d102      	bne.n	80049ea <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f006 fc2f 	bl	800b248 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	695a      	ldr	r2, [r3, #20]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80049f8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f004 f81c 	bl	8008a3c <USB_ReadInterrupts>
 8004a04:	4603      	mov	r3, r0
 8004a06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a0e:	f040 80b7 	bne.w	8004b80 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	69fa      	ldr	r2, [r7, #28]
 8004a1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a20:	f023 0301 	bic.w	r3, r3, #1
 8004a24:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2110      	movs	r1, #16
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f002 ffe3 	bl	80079f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a32:	2300      	movs	r3, #0
 8004a34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a36:	e046      	b.n	8004ac6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a3a:	015a      	lsls	r2, r3, #5
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	4413      	add	r3, r2
 8004a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a44:	461a      	mov	r2, r3
 8004a46:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a4a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a4e:	015a      	lsls	r2, r3, #5
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	4413      	add	r3, r2
 8004a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a5c:	0151      	lsls	r1, r2, #5
 8004a5e:	69fa      	ldr	r2, [r7, #28]
 8004a60:	440a      	add	r2, r1
 8004a62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a6a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a6e:	015a      	lsls	r2, r3, #5
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a78:	461a      	mov	r2, r3
 8004a7a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a7e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a82:	015a      	lsls	r2, r3, #5
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	4413      	add	r3, r2
 8004a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a90:	0151      	lsls	r1, r2, #5
 8004a92:	69fa      	ldr	r2, [r7, #28]
 8004a94:	440a      	add	r2, r1
 8004a96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a9e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa2:	015a      	lsls	r2, r3, #5
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ab0:	0151      	lsls	r1, r2, #5
 8004ab2:	69fa      	ldr	r2, [r7, #28]
 8004ab4:	440a      	add	r2, r1
 8004ab6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004abe:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d3b3      	bcc.n	8004a38 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ad6:	69db      	ldr	r3, [r3, #28]
 8004ad8:	69fa      	ldr	r2, [r7, #28]
 8004ada:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ade:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004ae2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d016      	beq.n	8004b1a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004af6:	69fa      	ldr	r2, [r7, #28]
 8004af8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004afc:	f043 030b 	orr.w	r3, r3, #11
 8004b00:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b0c:	69fa      	ldr	r2, [r7, #28]
 8004b0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b12:	f043 030b 	orr.w	r3, r3, #11
 8004b16:	6453      	str	r3, [r2, #68]	; 0x44
 8004b18:	e015      	b.n	8004b46 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	69fa      	ldr	r2, [r7, #28]
 8004b24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004b2c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004b30:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	69fa      	ldr	r2, [r7, #28]
 8004b3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b40:	f043 030b 	orr.w	r3, r3, #11
 8004b44:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	69fa      	ldr	r2, [r7, #28]
 8004b50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b54:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004b58:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6818      	ldr	r0, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	f004 f82a 	bl	8008bc4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	695a      	ldr	r2, [r3, #20]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004b7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f003 ff59 	bl	8008a3c <USB_ReadInterrupts>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b94:	d124      	bne.n	8004be0 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f003 ffef 	bl	8008b7e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f002 ffa4 	bl	8007af2 <USB_GetDevSpeed>
 8004baa:	4603      	mov	r3, r0
 8004bac:	461a      	mov	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681c      	ldr	r4, [r3, #0]
 8004bb6:	f001 f9e9 	bl	8005f8c <HAL_RCC_GetHCLKFreq>
 8004bba:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	4620      	mov	r0, r4
 8004bc6:	f002 fca3 	bl	8007510 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f006 fb1d 	bl	800b20a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	695a      	ldr	r2, [r3, #20]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004bde:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f003 ff29 	bl	8008a3c <USB_ReadInterrupts>
 8004bea:	4603      	mov	r3, r0
 8004bec:	f003 0308 	and.w	r3, r3, #8
 8004bf0:	2b08      	cmp	r3, #8
 8004bf2:	d10a      	bne.n	8004c0a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f006 fafa 	bl	800b1ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	695a      	ldr	r2, [r3, #20]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f002 0208 	and.w	r2, r2, #8
 8004c08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f003 ff14 	bl	8008a3c <USB_ReadInterrupts>
 8004c14:	4603      	mov	r3, r0
 8004c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c1a:	2b80      	cmp	r3, #128	; 0x80
 8004c1c:	d122      	bne.n	8004c64 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004c1e:	6a3b      	ldr	r3, [r7, #32]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c26:	6a3b      	ldr	r3, [r7, #32]
 8004c28:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c2e:	e014      	b.n	8004c5a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004c30:	6879      	ldr	r1, [r7, #4]
 8004c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c34:	4613      	mov	r3, r2
 8004c36:	00db      	lsls	r3, r3, #3
 8004c38:	4413      	add	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	440b      	add	r3, r1
 8004c3e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d105      	bne.n	8004c54 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 fb27 	bl	80052a2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c56:	3301      	adds	r3, #1
 8004c58:	627b      	str	r3, [r7, #36]	; 0x24
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d3e5      	bcc.n	8004c30 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f003 fee7 	bl	8008a3c <USB_ReadInterrupts>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c78:	d13b      	bne.n	8004cf2 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c7e:	e02b      	b.n	8004cd8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c82:	015a      	lsls	r2, r3, #5
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	4413      	add	r3, r2
 8004c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c90:	6879      	ldr	r1, [r7, #4]
 8004c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c94:	4613      	mov	r3, r2
 8004c96:	00db      	lsls	r3, r3, #3
 8004c98:	4413      	add	r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	440b      	add	r3, r1
 8004c9e:	3340      	adds	r3, #64	; 0x40
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d115      	bne.n	8004cd2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004ca6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	da12      	bge.n	8004cd2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004cac:	6879      	ldr	r1, [r7, #4]
 8004cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	00db      	lsls	r3, r3, #3
 8004cb4:	4413      	add	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	440b      	add	r3, r1
 8004cba:	333f      	adds	r3, #63	; 0x3f
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	4619      	mov	r1, r3
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 fae8 	bl	80052a2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d3ce      	bcc.n	8004c80 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	695a      	ldr	r2, [r3, #20]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004cf0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f003 fea0 	bl	8008a3c <USB_ReadInterrupts>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d06:	d155      	bne.n	8004db4 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d08:	2301      	movs	r3, #1
 8004d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d0c:	e045      	b.n	8004d9a <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d10:	015a      	lsls	r2, r3, #5
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	4413      	add	r3, r2
 8004d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004d1e:	6879      	ldr	r1, [r7, #4]
 8004d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d22:	4613      	mov	r3, r2
 8004d24:	00db      	lsls	r3, r3, #3
 8004d26:	4413      	add	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	440b      	add	r3, r1
 8004d2c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d12e      	bne.n	8004d94 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004d36:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	da2b      	bge.n	8004d94 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004d48:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d121      	bne.n	8004d94 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004d50:	6879      	ldr	r1, [r7, #4]
 8004d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d54:	4613      	mov	r3, r2
 8004d56:	00db      	lsls	r3, r3, #3
 8004d58:	4413      	add	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	440b      	add	r3, r1
 8004d5e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004d62:	2201      	movs	r2, #1
 8004d64:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004d66:	6a3b      	ldr	r3, [r7, #32]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004d6e:	6a3b      	ldr	r3, [r7, #32]
 8004d70:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004d72:	6a3b      	ldr	r3, [r7, #32]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10a      	bne.n	8004d94 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	69fa      	ldr	r2, [r7, #28]
 8004d88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d90:	6053      	str	r3, [r2, #4]
            break;
 8004d92:	e007      	b.n	8004da4 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d96:	3301      	adds	r3, #1
 8004d98:	627b      	str	r3, [r7, #36]	; 0x24
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d3b4      	bcc.n	8004d0e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	695a      	ldr	r2, [r3, #20]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004db2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4618      	mov	r0, r3
 8004dba:	f003 fe3f 	bl	8008a3c <USB_ReadInterrupts>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dc8:	d10a      	bne.n	8004de0 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f006 fa94 	bl	800b2f8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	695a      	ldr	r2, [r3, #20]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004dde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f003 fe29 	bl	8008a3c <USB_ReadInterrupts>
 8004dea:	4603      	mov	r3, r0
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	2b04      	cmp	r3, #4
 8004df2:	d115      	bne.n	8004e20 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	f003 0304 	and.w	r3, r3, #4
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d002      	beq.n	8004e0c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f006 fa84 	bl	800b314 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6859      	ldr	r1, [r3, #4]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	69ba      	ldr	r2, [r7, #24]
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	605a      	str	r2, [r3, #4]
 8004e1c:	e000      	b.n	8004e20 <HAL_PCD_IRQHandler+0x938>
      return;
 8004e1e:	bf00      	nop
    }
  }
}
 8004e20:	3734      	adds	r7, #52	; 0x34
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd90      	pop	{r4, r7, pc}

08004e26 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b082      	sub	sp, #8
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
 8004e2e:	460b      	mov	r3, r1
 8004e30:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d101      	bne.n	8004e40 <HAL_PCD_SetAddress+0x1a>
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	e013      	b.n	8004e68 <HAL_PCD_SetAddress+0x42>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	78fa      	ldrb	r2, [r7, #3]
 8004e4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	78fa      	ldrb	r2, [r7, #3]
 8004e56:	4611      	mov	r1, r2
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f003 fd87 	bl	800896c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3708      	adds	r7, #8
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	4608      	mov	r0, r1
 8004e7a:	4611      	mov	r1, r2
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	4603      	mov	r3, r0
 8004e80:	70fb      	strb	r3, [r7, #3]
 8004e82:	460b      	mov	r3, r1
 8004e84:	803b      	strh	r3, [r7, #0]
 8004e86:	4613      	mov	r3, r2
 8004e88:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	da0f      	bge.n	8004eb6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e96:	78fb      	ldrb	r3, [r7, #3]
 8004e98:	f003 020f 	and.w	r2, r3, #15
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	4413      	add	r3, r2
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	3338      	adds	r3, #56	; 0x38
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	3304      	adds	r3, #4
 8004eac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	705a      	strb	r2, [r3, #1]
 8004eb4:	e00f      	b.n	8004ed6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004eb6:	78fb      	ldrb	r3, [r7, #3]
 8004eb8:	f003 020f 	and.w	r2, r3, #15
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	4413      	add	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	4413      	add	r3, r2
 8004ecc:	3304      	adds	r3, #4
 8004ece:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004ed6:	78fb      	ldrb	r3, [r7, #3]
 8004ed8:	f003 030f 	and.w	r3, r3, #15
 8004edc:	b2da      	uxtb	r2, r3
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004ee2:	883a      	ldrh	r2, [r7, #0]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	78ba      	ldrb	r2, [r7, #2]
 8004eec:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	785b      	ldrb	r3, [r3, #1]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d004      	beq.n	8004f00 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004f00:	78bb      	ldrb	r3, [r7, #2]
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d102      	bne.n	8004f0c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d101      	bne.n	8004f1a <HAL_PCD_EP_Open+0xaa>
 8004f16:	2302      	movs	r3, #2
 8004f18:	e00e      	b.n	8004f38 <HAL_PCD_EP_Open+0xc8>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68f9      	ldr	r1, [r7, #12]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f002 fe07 	bl	8007b3c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004f36:	7afb      	ldrb	r3, [r7, #11]
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	460b      	mov	r3, r1
 8004f4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004f4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	da0f      	bge.n	8004f74 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f54:	78fb      	ldrb	r3, [r7, #3]
 8004f56:	f003 020f 	and.w	r2, r3, #15
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	00db      	lsls	r3, r3, #3
 8004f5e:	4413      	add	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	3338      	adds	r3, #56	; 0x38
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	4413      	add	r3, r2
 8004f68:	3304      	adds	r3, #4
 8004f6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	705a      	strb	r2, [r3, #1]
 8004f72:	e00f      	b.n	8004f94 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f74:	78fb      	ldrb	r3, [r7, #3]
 8004f76:	f003 020f 	and.w	r2, r3, #15
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	00db      	lsls	r3, r3, #3
 8004f7e:	4413      	add	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	4413      	add	r3, r2
 8004f8a:	3304      	adds	r3, #4
 8004f8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004f94:	78fb      	ldrb	r3, [r7, #3]
 8004f96:	f003 030f 	and.w	r3, r3, #15
 8004f9a:	b2da      	uxtb	r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d101      	bne.n	8004fae <HAL_PCD_EP_Close+0x6e>
 8004faa:	2302      	movs	r3, #2
 8004fac:	e00e      	b.n	8004fcc <HAL_PCD_EP_Close+0x8c>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68f9      	ldr	r1, [r7, #12]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f002 fe45 	bl	8007c4c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	607a      	str	r2, [r7, #4]
 8004fde:	603b      	str	r3, [r7, #0]
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004fe4:	7afb      	ldrb	r3, [r7, #11]
 8004fe6:	f003 020f 	and.w	r2, r3, #15
 8004fea:	4613      	mov	r3, r2
 8004fec:	00db      	lsls	r3, r3, #3
 8004fee:	4413      	add	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	3304      	adds	r3, #4
 8004ffc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	2200      	movs	r2, #0
 800500e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	2200      	movs	r2, #0
 8005014:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005016:	7afb      	ldrb	r3, [r7, #11]
 8005018:	f003 030f 	and.w	r3, r3, #15
 800501c:	b2da      	uxtb	r2, r3
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d102      	bne.n	8005030 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005030:	7afb      	ldrb	r3, [r7, #11]
 8005032:	f003 030f 	and.w	r3, r3, #15
 8005036:	2b00      	cmp	r3, #0
 8005038:	d109      	bne.n	800504e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6818      	ldr	r0, [r3, #0]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	b2db      	uxtb	r3, r3
 8005044:	461a      	mov	r2, r3
 8005046:	6979      	ldr	r1, [r7, #20]
 8005048:	f003 f924 	bl	8008294 <USB_EP0StartXfer>
 800504c:	e008      	b.n	8005060 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6818      	ldr	r0, [r3, #0]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	b2db      	uxtb	r3, r3
 8005058:	461a      	mov	r2, r3
 800505a:	6979      	ldr	r1, [r7, #20]
 800505c:	f002 fed2 	bl	8007e04 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3718      	adds	r7, #24
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800506a:	b480      	push	{r7}
 800506c:	b083      	sub	sp, #12
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
 8005072:	460b      	mov	r3, r1
 8005074:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005076:	78fb      	ldrb	r3, [r7, #3]
 8005078:	f003 020f 	and.w	r2, r3, #15
 800507c:	6879      	ldr	r1, [r7, #4]
 800507e:	4613      	mov	r3, r2
 8005080:	00db      	lsls	r3, r3, #3
 8005082:	4413      	add	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	440b      	add	r3, r1
 8005088:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800508c:	681b      	ldr	r3, [r3, #0]
}
 800508e:	4618      	mov	r0, r3
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b086      	sub	sp, #24
 800509e:	af00      	add	r7, sp, #0
 80050a0:	60f8      	str	r0, [r7, #12]
 80050a2:	607a      	str	r2, [r7, #4]
 80050a4:	603b      	str	r3, [r7, #0]
 80050a6:	460b      	mov	r3, r1
 80050a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050aa:	7afb      	ldrb	r3, [r7, #11]
 80050ac:	f003 020f 	and.w	r2, r3, #15
 80050b0:	4613      	mov	r3, r2
 80050b2:	00db      	lsls	r3, r3, #3
 80050b4:	4413      	add	r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	3338      	adds	r3, #56	; 0x38
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	4413      	add	r3, r2
 80050be:	3304      	adds	r3, #4
 80050c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	2200      	movs	r2, #0
 80050d2:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	2201      	movs	r2, #1
 80050d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050da:	7afb      	ldrb	r3, [r7, #11]
 80050dc:	f003 030f 	and.w	r3, r3, #15
 80050e0:	b2da      	uxtb	r2, r3
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d102      	bne.n	80050f4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80050f4:	7afb      	ldrb	r3, [r7, #11]
 80050f6:	f003 030f 	and.w	r3, r3, #15
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d109      	bne.n	8005112 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6818      	ldr	r0, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	b2db      	uxtb	r3, r3
 8005108:	461a      	mov	r2, r3
 800510a:	6979      	ldr	r1, [r7, #20]
 800510c:	f003 f8c2 	bl	8008294 <USB_EP0StartXfer>
 8005110:	e008      	b.n	8005124 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6818      	ldr	r0, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	b2db      	uxtb	r3, r3
 800511c:	461a      	mov	r2, r3
 800511e:	6979      	ldr	r1, [r7, #20]
 8005120:	f002 fe70 	bl	8007e04 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3718      	adds	r7, #24
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b084      	sub	sp, #16
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
 8005136:	460b      	mov	r3, r1
 8005138:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800513a:	78fb      	ldrb	r3, [r7, #3]
 800513c:	f003 020f 	and.w	r2, r3, #15
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	429a      	cmp	r2, r3
 8005146:	d901      	bls.n	800514c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e050      	b.n	80051ee <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800514c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005150:	2b00      	cmp	r3, #0
 8005152:	da0f      	bge.n	8005174 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005154:	78fb      	ldrb	r3, [r7, #3]
 8005156:	f003 020f 	and.w	r2, r3, #15
 800515a:	4613      	mov	r3, r2
 800515c:	00db      	lsls	r3, r3, #3
 800515e:	4413      	add	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	3338      	adds	r3, #56	; 0x38
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	4413      	add	r3, r2
 8005168:	3304      	adds	r3, #4
 800516a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2201      	movs	r2, #1
 8005170:	705a      	strb	r2, [r3, #1]
 8005172:	e00d      	b.n	8005190 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005174:	78fa      	ldrb	r2, [r7, #3]
 8005176:	4613      	mov	r3, r2
 8005178:	00db      	lsls	r3, r3, #3
 800517a:	4413      	add	r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	4413      	add	r3, r2
 8005186:	3304      	adds	r3, #4
 8005188:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2201      	movs	r2, #1
 8005194:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005196:	78fb      	ldrb	r3, [r7, #3]
 8005198:	f003 030f 	and.w	r3, r3, #15
 800519c:	b2da      	uxtb	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d101      	bne.n	80051b0 <HAL_PCD_EP_SetStall+0x82>
 80051ac:	2302      	movs	r3, #2
 80051ae:	e01e      	b.n	80051ee <HAL_PCD_EP_SetStall+0xc0>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68f9      	ldr	r1, [r7, #12]
 80051be:	4618      	mov	r0, r3
 80051c0:	f003 fb00 	bl	80087c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80051c4:	78fb      	ldrb	r3, [r7, #3]
 80051c6:	f003 030f 	and.w	r3, r3, #15
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d10a      	bne.n	80051e4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6818      	ldr	r0, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	b2d9      	uxtb	r1, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80051de:	461a      	mov	r2, r3
 80051e0:	f003 fcf0 	bl	8008bc4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b084      	sub	sp, #16
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
 80051fe:	460b      	mov	r3, r1
 8005200:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005202:	78fb      	ldrb	r3, [r7, #3]
 8005204:	f003 020f 	and.w	r2, r3, #15
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	429a      	cmp	r2, r3
 800520e:	d901      	bls.n	8005214 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e042      	b.n	800529a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005214:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005218:	2b00      	cmp	r3, #0
 800521a:	da0f      	bge.n	800523c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800521c:	78fb      	ldrb	r3, [r7, #3]
 800521e:	f003 020f 	and.w	r2, r3, #15
 8005222:	4613      	mov	r3, r2
 8005224:	00db      	lsls	r3, r3, #3
 8005226:	4413      	add	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	3338      	adds	r3, #56	; 0x38
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	4413      	add	r3, r2
 8005230:	3304      	adds	r3, #4
 8005232:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2201      	movs	r2, #1
 8005238:	705a      	strb	r2, [r3, #1]
 800523a:	e00f      	b.n	800525c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800523c:	78fb      	ldrb	r3, [r7, #3]
 800523e:	f003 020f 	and.w	r2, r3, #15
 8005242:	4613      	mov	r3, r2
 8005244:	00db      	lsls	r3, r3, #3
 8005246:	4413      	add	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	4413      	add	r3, r2
 8005252:	3304      	adds	r3, #4
 8005254:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005262:	78fb      	ldrb	r3, [r7, #3]
 8005264:	f003 030f 	and.w	r3, r3, #15
 8005268:	b2da      	uxtb	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005274:	2b01      	cmp	r3, #1
 8005276:	d101      	bne.n	800527c <HAL_PCD_EP_ClrStall+0x86>
 8005278:	2302      	movs	r3, #2
 800527a:	e00e      	b.n	800529a <HAL_PCD_EP_ClrStall+0xa4>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68f9      	ldr	r1, [r7, #12]
 800528a:	4618      	mov	r0, r3
 800528c:	f003 fb08 	bl	80088a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b084      	sub	sp, #16
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
 80052aa:	460b      	mov	r3, r1
 80052ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80052ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	da0c      	bge.n	80052d0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052b6:	78fb      	ldrb	r3, [r7, #3]
 80052b8:	f003 020f 	and.w	r2, r3, #15
 80052bc:	4613      	mov	r3, r2
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	4413      	add	r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	3338      	adds	r3, #56	; 0x38
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	4413      	add	r3, r2
 80052ca:	3304      	adds	r3, #4
 80052cc:	60fb      	str	r3, [r7, #12]
 80052ce:	e00c      	b.n	80052ea <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052d0:	78fb      	ldrb	r3, [r7, #3]
 80052d2:	f003 020f 	and.w	r2, r3, #15
 80052d6:	4613      	mov	r3, r2
 80052d8:	00db      	lsls	r3, r3, #3
 80052da:	4413      	add	r3, r2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	4413      	add	r3, r2
 80052e6:	3304      	adds	r3, #4
 80052e8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68f9      	ldr	r1, [r7, #12]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f003 f927 	bl	8008544 <USB_EPStopXfer>
 80052f6:	4603      	mov	r3, r0
 80052f8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80052fa:	7afb      	ldrb	r3, [r7, #11]
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b08a      	sub	sp, #40	; 0x28
 8005308:	af02      	add	r7, sp, #8
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005318:	683a      	ldr	r2, [r7, #0]
 800531a:	4613      	mov	r3, r2
 800531c:	00db      	lsls	r3, r3, #3
 800531e:	4413      	add	r3, r2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	3338      	adds	r3, #56	; 0x38
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	4413      	add	r3, r2
 8005328:	3304      	adds	r3, #4
 800532a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6a1a      	ldr	r2, [r3, #32]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	429a      	cmp	r2, r3
 8005336:	d901      	bls.n	800533c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e06c      	b.n	8005416 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	699a      	ldr	r2, [r3, #24]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	69fa      	ldr	r2, [r7, #28]
 800534e:	429a      	cmp	r2, r3
 8005350:	d902      	bls.n	8005358 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	3303      	adds	r3, #3
 800535c:	089b      	lsrs	r3, r3, #2
 800535e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005360:	e02b      	b.n	80053ba <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	699a      	ldr	r2, [r3, #24]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	69fa      	ldr	r2, [r7, #28]
 8005374:	429a      	cmp	r2, r3
 8005376:	d902      	bls.n	800537e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	3303      	adds	r3, #3
 8005382:	089b      	lsrs	r3, r3, #2
 8005384:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6919      	ldr	r1, [r3, #16]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	b2da      	uxtb	r2, r3
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005396:	b2db      	uxtb	r3, r3
 8005398:	9300      	str	r3, [sp, #0]
 800539a:	4603      	mov	r3, r0
 800539c:	6978      	ldr	r0, [r7, #20]
 800539e:	f003 f97b 	bl	8008698 <USB_WritePacket>

    ep->xfer_buff  += len;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	691a      	ldr	r2, [r3, #16]
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	441a      	add	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6a1a      	ldr	r2, [r3, #32]
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	441a      	add	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	015a      	lsls	r2, r3, #5
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	4413      	add	r3, r2
 80053c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80053ca:	69ba      	ldr	r2, [r7, #24]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d809      	bhi.n	80053e4 <PCD_WriteEmptyTxFifo+0xe0>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6a1a      	ldr	r2, [r3, #32]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80053d8:	429a      	cmp	r2, r3
 80053da:	d203      	bcs.n	80053e4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1be      	bne.n	8005362 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	699a      	ldr	r2, [r3, #24]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d811      	bhi.n	8005414 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	f003 030f 	and.w	r3, r3, #15
 80053f6:	2201      	movs	r2, #1
 80053f8:	fa02 f303 	lsl.w	r3, r2, r3
 80053fc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	43db      	mvns	r3, r3
 800540a:	6939      	ldr	r1, [r7, #16]
 800540c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005410:	4013      	ands	r3, r2
 8005412:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3720      	adds	r7, #32
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
	...

08005420 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b088      	sub	sp, #32
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	333c      	adds	r3, #60	; 0x3c
 8005438:	3304      	adds	r3, #4
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	015a      	lsls	r2, r3, #5
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	4413      	add	r3, r2
 8005446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	2b01      	cmp	r3, #1
 8005454:	d17b      	bne.n	800554e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	f003 0308 	and.w	r3, r3, #8
 800545c:	2b00      	cmp	r3, #0
 800545e:	d015      	beq.n	800548c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	4a61      	ldr	r2, [pc, #388]	; (80055e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005464:	4293      	cmp	r3, r2
 8005466:	f240 80b9 	bls.w	80055dc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005470:	2b00      	cmp	r3, #0
 8005472:	f000 80b3 	beq.w	80055dc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	015a      	lsls	r2, r3, #5
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	4413      	add	r3, r2
 800547e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005482:	461a      	mov	r2, r3
 8005484:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005488:	6093      	str	r3, [r2, #8]
 800548a:	e0a7      	b.n	80055dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	f003 0320 	and.w	r3, r3, #32
 8005492:	2b00      	cmp	r3, #0
 8005494:	d009      	beq.n	80054aa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	015a      	lsls	r2, r3, #5
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	4413      	add	r3, r2
 800549e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a2:	461a      	mov	r2, r3
 80054a4:	2320      	movs	r3, #32
 80054a6:	6093      	str	r3, [r2, #8]
 80054a8:	e098      	b.n	80055dc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	f040 8093 	bne.w	80055dc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	4a4b      	ldr	r2, [pc, #300]	; (80055e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d90f      	bls.n	80054de <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00a      	beq.n	80054de <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d4:	461a      	mov	r2, r3
 80054d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054da:	6093      	str	r3, [r2, #8]
 80054dc:	e07e      	b.n	80055dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80054de:	683a      	ldr	r2, [r7, #0]
 80054e0:	4613      	mov	r3, r2
 80054e2:	00db      	lsls	r3, r3, #3
 80054e4:	4413      	add	r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	4413      	add	r3, r2
 80054f0:	3304      	adds	r3, #4
 80054f2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	69da      	ldr	r2, [r3, #28]
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	0159      	lsls	r1, r3, #5
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	440b      	add	r3, r1
 8005500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800550a:	1ad2      	subs	r2, r2, r3
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d114      	bne.n	8005540 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d109      	bne.n	8005532 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6818      	ldr	r0, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005528:	461a      	mov	r2, r3
 800552a:	2101      	movs	r1, #1
 800552c:	f003 fb4a 	bl	8008bc4 <USB_EP0_OutStart>
 8005530:	e006      	b.n	8005540 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	691a      	ldr	r2, [r3, #16]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6a1b      	ldr	r3, [r3, #32]
 800553a:	441a      	add	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	b2db      	uxtb	r3, r3
 8005544:	4619      	mov	r1, r3
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f005 fe1c 	bl	800b184 <HAL_PCD_DataOutStageCallback>
 800554c:	e046      	b.n	80055dc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	4a26      	ldr	r2, [pc, #152]	; (80055ec <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d124      	bne.n	80055a0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00a      	beq.n	8005576 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	015a      	lsls	r2, r3, #5
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	4413      	add	r3, r2
 8005568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800556c:	461a      	mov	r2, r3
 800556e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005572:	6093      	str	r3, [r2, #8]
 8005574:	e032      	b.n	80055dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	f003 0320 	and.w	r3, r3, #32
 800557c:	2b00      	cmp	r3, #0
 800557e:	d008      	beq.n	8005592 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	015a      	lsls	r2, r3, #5
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	4413      	add	r3, r2
 8005588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800558c:	461a      	mov	r2, r3
 800558e:	2320      	movs	r3, #32
 8005590:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	b2db      	uxtb	r3, r3
 8005596:	4619      	mov	r1, r3
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f005 fdf3 	bl	800b184 <HAL_PCD_DataOutStageCallback>
 800559e:	e01d      	b.n	80055dc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d114      	bne.n	80055d0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80055a6:	6879      	ldr	r1, [r7, #4]
 80055a8:	683a      	ldr	r2, [r7, #0]
 80055aa:	4613      	mov	r3, r2
 80055ac:	00db      	lsls	r3, r3, #3
 80055ae:	4413      	add	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	440b      	add	r3, r1
 80055b4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d108      	bne.n	80055d0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6818      	ldr	r0, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80055c8:	461a      	mov	r2, r3
 80055ca:	2100      	movs	r1, #0
 80055cc:	f003 fafa 	bl	8008bc4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	4619      	mov	r1, r3
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f005 fdd4 	bl	800b184 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3720      	adds	r7, #32
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	4f54300a 	.word	0x4f54300a
 80055ec:	4f54310a 	.word	0x4f54310a

080055f0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b086      	sub	sp, #24
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	333c      	adds	r3, #60	; 0x3c
 8005608:	3304      	adds	r3, #4
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	015a      	lsls	r2, r3, #5
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	4413      	add	r3, r2
 8005616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	4a15      	ldr	r2, [pc, #84]	; (8005678 <PCD_EP_OutSetupPacket_int+0x88>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d90e      	bls.n	8005644 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800562c:	2b00      	cmp	r3, #0
 800562e:	d009      	beq.n	8005644 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	015a      	lsls	r2, r3, #5
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	4413      	add	r3, r2
 8005638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800563c:	461a      	mov	r2, r3
 800563e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005642:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f005 fd8b 	bl	800b160 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	4a0a      	ldr	r2, [pc, #40]	; (8005678 <PCD_EP_OutSetupPacket_int+0x88>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d90c      	bls.n	800566c <PCD_EP_OutSetupPacket_int+0x7c>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	2b01      	cmp	r3, #1
 8005658:	d108      	bne.n	800566c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6818      	ldr	r0, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005664:	461a      	mov	r2, r3
 8005666:	2101      	movs	r1, #1
 8005668:	f003 faac 	bl	8008bc4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3718      	adds	r7, #24
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	4f54300a 	.word	0x4f54300a

0800567c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	460b      	mov	r3, r1
 8005686:	70fb      	strb	r3, [r7, #3]
 8005688:	4613      	mov	r3, r2
 800568a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005692:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005694:	78fb      	ldrb	r3, [r7, #3]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d107      	bne.n	80056aa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800569a:	883b      	ldrh	r3, [r7, #0]
 800569c:	0419      	lsls	r1, r3, #16
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	430a      	orrs	r2, r1
 80056a6:	629a      	str	r2, [r3, #40]	; 0x28
 80056a8:	e028      	b.n	80056fc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b0:	0c1b      	lsrs	r3, r3, #16
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	4413      	add	r3, r2
 80056b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80056b8:	2300      	movs	r3, #0
 80056ba:	73fb      	strb	r3, [r7, #15]
 80056bc:	e00d      	b.n	80056da <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	7bfb      	ldrb	r3, [r7, #15]
 80056c4:	3340      	adds	r3, #64	; 0x40
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	4413      	add	r3, r2
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	0c1b      	lsrs	r3, r3, #16
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	4413      	add	r3, r2
 80056d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80056d4:	7bfb      	ldrb	r3, [r7, #15]
 80056d6:	3301      	adds	r3, #1
 80056d8:	73fb      	strb	r3, [r7, #15]
 80056da:	7bfa      	ldrb	r2, [r7, #15]
 80056dc:	78fb      	ldrb	r3, [r7, #3]
 80056de:	3b01      	subs	r3, #1
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d3ec      	bcc.n	80056be <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80056e4:	883b      	ldrh	r3, [r7, #0]
 80056e6:	0418      	lsls	r0, r3, #16
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6819      	ldr	r1, [r3, #0]
 80056ec:	78fb      	ldrb	r3, [r7, #3]
 80056ee:	3b01      	subs	r3, #1
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	4302      	orrs	r2, r0
 80056f4:	3340      	adds	r3, #64	; 0x40
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	440b      	add	r3, r1
 80056fa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3714      	adds	r7, #20
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr

0800570a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800570a:	b480      	push	{r7}
 800570c:	b083      	sub	sp, #12
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
 8005712:	460b      	mov	r3, r1
 8005714:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	887a      	ldrh	r2, [r7, #2]
 800571c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	460b      	mov	r3, r1
 8005736:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005738:	bf00      	nop
 800573a:	370c      	adds	r7, #12
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d101      	bne.n	8005756 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e267      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b00      	cmp	r3, #0
 8005760:	d075      	beq.n	800584e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005762:	4b88      	ldr	r3, [pc, #544]	; (8005984 <HAL_RCC_OscConfig+0x240>)
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f003 030c 	and.w	r3, r3, #12
 800576a:	2b04      	cmp	r3, #4
 800576c:	d00c      	beq.n	8005788 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800576e:	4b85      	ldr	r3, [pc, #532]	; (8005984 <HAL_RCC_OscConfig+0x240>)
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005776:	2b08      	cmp	r3, #8
 8005778:	d112      	bne.n	80057a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800577a:	4b82      	ldr	r3, [pc, #520]	; (8005984 <HAL_RCC_OscConfig+0x240>)
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005782:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005786:	d10b      	bne.n	80057a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005788:	4b7e      	ldr	r3, [pc, #504]	; (8005984 <HAL_RCC_OscConfig+0x240>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d05b      	beq.n	800584c <HAL_RCC_OscConfig+0x108>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d157      	bne.n	800584c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e242      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057a8:	d106      	bne.n	80057b8 <HAL_RCC_OscConfig+0x74>
 80057aa:	4b76      	ldr	r3, [pc, #472]	; (8005984 <HAL_RCC_OscConfig+0x240>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a75      	ldr	r2, [pc, #468]	; (8005984 <HAL_RCC_OscConfig+0x240>)
 80057b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057b4:	6013      	str	r3, [r2, #0]
 80057b6:	e01d      	b.n	80057f4 <HAL_RCC_OscConfig+0xb0>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057c0:	d10c      	bne.n	80057dc <HAL_RCC_OscConfig+0x98>
 80057c2:	4b70      	ldr	r3, [pc, #448]	; (8005984 <HAL_RCC_OscConfig+0x240>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a6f      	ldr	r2, [pc, #444]	; (8005984 <HAL_RCC_OscConfig+0x240>)
 80057c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057cc:	6013      	str	r3, [r2, #0]
 80057ce:	4b6d      	ldr	r3, [pc, #436]	; (8005984 <HAL_RCC_OscConfig+0x240>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a6c      	ldr	r2, [pc, #432]	; (8005984 <HAL_RCC_OscConfig+0x240>)
 80057d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057d8:	6013      	str	r3, [r2, #0]
 80057da:	e00b      	b.n	80057f4 <HAL_RCC_OscConfig+0xb0>
 80057dc:	4b69      	ldr	r3, [pc, #420]	; (8005984 <HAL_RCC_OscConfig+0x240>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a68      	ldr	r2, [pc, #416]	; (8005984 <HAL_RCC_OscConfig+0x240>)
 80057e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057e6:	6013      	str	r3, [r2, #0]
 80057e8:	4b66      	ldr	r3, [pc, #408]	; (8005984 <HAL_RCC_OscConfig+0x240>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a65      	ldr	r2, [pc, #404]	; (8005984 <HAL_RCC_OscConfig+0x240>)
 80057ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d013      	beq.n	8005824 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057fc:	f7fe fa14 	bl	8003c28 <HAL_GetTick>
 8005800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005802:	e008      	b.n	8005816 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005804:	f7fe fa10 	bl	8003c28 <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	2b64      	cmp	r3, #100	; 0x64
 8005810:	d901      	bls.n	8005816 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e207      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005816:	4b5b      	ldr	r3, [pc, #364]	; (8005984 <HAL_RCC_OscConfig+0x240>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d0f0      	beq.n	8005804 <HAL_RCC_OscConfig+0xc0>
 8005822:	e014      	b.n	800584e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005824:	f7fe fa00 	bl	8003c28 <HAL_GetTick>
 8005828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800582a:	e008      	b.n	800583e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800582c:	f7fe f9fc 	bl	8003c28 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	2b64      	cmp	r3, #100	; 0x64
 8005838:	d901      	bls.n	800583e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e1f3      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800583e:	4b51      	ldr	r3, [pc, #324]	; (8005984 <HAL_RCC_OscConfig+0x240>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1f0      	bne.n	800582c <HAL_RCC_OscConfig+0xe8>
 800584a:	e000      	b.n	800584e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800584c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d063      	beq.n	8005922 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800585a:	4b4a      	ldr	r3, [pc, #296]	; (8005984 <HAL_RCC_OscConfig+0x240>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f003 030c 	and.w	r3, r3, #12
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00b      	beq.n	800587e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005866:	4b47      	ldr	r3, [pc, #284]	; (8005984 <HAL_RCC_OscConfig+0x240>)
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800586e:	2b08      	cmp	r3, #8
 8005870:	d11c      	bne.n	80058ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005872:	4b44      	ldr	r3, [pc, #272]	; (8005984 <HAL_RCC_OscConfig+0x240>)
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d116      	bne.n	80058ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800587e:	4b41      	ldr	r3, [pc, #260]	; (8005984 <HAL_RCC_OscConfig+0x240>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0302 	and.w	r3, r3, #2
 8005886:	2b00      	cmp	r3, #0
 8005888:	d005      	beq.n	8005896 <HAL_RCC_OscConfig+0x152>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d001      	beq.n	8005896 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e1c7      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005896:	4b3b      	ldr	r3, [pc, #236]	; (8005984 <HAL_RCC_OscConfig+0x240>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	00db      	lsls	r3, r3, #3
 80058a4:	4937      	ldr	r1, [pc, #220]	; (8005984 <HAL_RCC_OscConfig+0x240>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058aa:	e03a      	b.n	8005922 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d020      	beq.n	80058f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058b4:	4b34      	ldr	r3, [pc, #208]	; (8005988 <HAL_RCC_OscConfig+0x244>)
 80058b6:	2201      	movs	r2, #1
 80058b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ba:	f7fe f9b5 	bl	8003c28 <HAL_GetTick>
 80058be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058c0:	e008      	b.n	80058d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058c2:	f7fe f9b1 	bl	8003c28 <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d901      	bls.n	80058d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e1a8      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058d4:	4b2b      	ldr	r3, [pc, #172]	; (8005984 <HAL_RCC_OscConfig+0x240>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d0f0      	beq.n	80058c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058e0:	4b28      	ldr	r3, [pc, #160]	; (8005984 <HAL_RCC_OscConfig+0x240>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	00db      	lsls	r3, r3, #3
 80058ee:	4925      	ldr	r1, [pc, #148]	; (8005984 <HAL_RCC_OscConfig+0x240>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	600b      	str	r3, [r1, #0]
 80058f4:	e015      	b.n	8005922 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058f6:	4b24      	ldr	r3, [pc, #144]	; (8005988 <HAL_RCC_OscConfig+0x244>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058fc:	f7fe f994 	bl	8003c28 <HAL_GetTick>
 8005900:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005902:	e008      	b.n	8005916 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005904:	f7fe f990 	bl	8003c28 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	2b02      	cmp	r3, #2
 8005910:	d901      	bls.n	8005916 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e187      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005916:	4b1b      	ldr	r3, [pc, #108]	; (8005984 <HAL_RCC_OscConfig+0x240>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0302 	and.w	r3, r3, #2
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1f0      	bne.n	8005904 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0308 	and.w	r3, r3, #8
 800592a:	2b00      	cmp	r3, #0
 800592c:	d036      	beq.n	800599c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d016      	beq.n	8005964 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005936:	4b15      	ldr	r3, [pc, #84]	; (800598c <HAL_RCC_OscConfig+0x248>)
 8005938:	2201      	movs	r2, #1
 800593a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800593c:	f7fe f974 	bl	8003c28 <HAL_GetTick>
 8005940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005942:	e008      	b.n	8005956 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005944:	f7fe f970 	bl	8003c28 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	2b02      	cmp	r3, #2
 8005950:	d901      	bls.n	8005956 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e167      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005956:	4b0b      	ldr	r3, [pc, #44]	; (8005984 <HAL_RCC_OscConfig+0x240>)
 8005958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b00      	cmp	r3, #0
 8005960:	d0f0      	beq.n	8005944 <HAL_RCC_OscConfig+0x200>
 8005962:	e01b      	b.n	800599c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005964:	4b09      	ldr	r3, [pc, #36]	; (800598c <HAL_RCC_OscConfig+0x248>)
 8005966:	2200      	movs	r2, #0
 8005968:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800596a:	f7fe f95d 	bl	8003c28 <HAL_GetTick>
 800596e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005970:	e00e      	b.n	8005990 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005972:	f7fe f959 	bl	8003c28 <HAL_GetTick>
 8005976:	4602      	mov	r2, r0
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	2b02      	cmp	r3, #2
 800597e:	d907      	bls.n	8005990 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e150      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
 8005984:	40023800 	.word	0x40023800
 8005988:	42470000 	.word	0x42470000
 800598c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005990:	4b88      	ldr	r3, [pc, #544]	; (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005994:	f003 0302 	and.w	r3, r3, #2
 8005998:	2b00      	cmp	r3, #0
 800599a:	d1ea      	bne.n	8005972 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0304 	and.w	r3, r3, #4
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f000 8097 	beq.w	8005ad8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059aa:	2300      	movs	r3, #0
 80059ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059ae:	4b81      	ldr	r3, [pc, #516]	; (8005bb4 <HAL_RCC_OscConfig+0x470>)
 80059b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10f      	bne.n	80059da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059ba:	2300      	movs	r3, #0
 80059bc:	60bb      	str	r3, [r7, #8]
 80059be:	4b7d      	ldr	r3, [pc, #500]	; (8005bb4 <HAL_RCC_OscConfig+0x470>)
 80059c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c2:	4a7c      	ldr	r2, [pc, #496]	; (8005bb4 <HAL_RCC_OscConfig+0x470>)
 80059c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059c8:	6413      	str	r3, [r2, #64]	; 0x40
 80059ca:	4b7a      	ldr	r3, [pc, #488]	; (8005bb4 <HAL_RCC_OscConfig+0x470>)
 80059cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059d2:	60bb      	str	r3, [r7, #8]
 80059d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059d6:	2301      	movs	r3, #1
 80059d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059da:	4b77      	ldr	r3, [pc, #476]	; (8005bb8 <HAL_RCC_OscConfig+0x474>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d118      	bne.n	8005a18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059e6:	4b74      	ldr	r3, [pc, #464]	; (8005bb8 <HAL_RCC_OscConfig+0x474>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a73      	ldr	r2, [pc, #460]	; (8005bb8 <HAL_RCC_OscConfig+0x474>)
 80059ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059f2:	f7fe f919 	bl	8003c28 <HAL_GetTick>
 80059f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059f8:	e008      	b.n	8005a0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059fa:	f7fe f915 	bl	8003c28 <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d901      	bls.n	8005a0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e10c      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a0c:	4b6a      	ldr	r3, [pc, #424]	; (8005bb8 <HAL_RCC_OscConfig+0x474>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d0f0      	beq.n	80059fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d106      	bne.n	8005a2e <HAL_RCC_OscConfig+0x2ea>
 8005a20:	4b64      	ldr	r3, [pc, #400]	; (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a24:	4a63      	ldr	r2, [pc, #396]	; (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005a26:	f043 0301 	orr.w	r3, r3, #1
 8005a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8005a2c:	e01c      	b.n	8005a68 <HAL_RCC_OscConfig+0x324>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	2b05      	cmp	r3, #5
 8005a34:	d10c      	bne.n	8005a50 <HAL_RCC_OscConfig+0x30c>
 8005a36:	4b5f      	ldr	r3, [pc, #380]	; (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a3a:	4a5e      	ldr	r2, [pc, #376]	; (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005a3c:	f043 0304 	orr.w	r3, r3, #4
 8005a40:	6713      	str	r3, [r2, #112]	; 0x70
 8005a42:	4b5c      	ldr	r3, [pc, #368]	; (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a46:	4a5b      	ldr	r2, [pc, #364]	; (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005a48:	f043 0301 	orr.w	r3, r3, #1
 8005a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8005a4e:	e00b      	b.n	8005a68 <HAL_RCC_OscConfig+0x324>
 8005a50:	4b58      	ldr	r3, [pc, #352]	; (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a54:	4a57      	ldr	r2, [pc, #348]	; (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005a56:	f023 0301 	bic.w	r3, r3, #1
 8005a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8005a5c:	4b55      	ldr	r3, [pc, #340]	; (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a60:	4a54      	ldr	r2, [pc, #336]	; (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005a62:	f023 0304 	bic.w	r3, r3, #4
 8005a66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d015      	beq.n	8005a9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a70:	f7fe f8da 	bl	8003c28 <HAL_GetTick>
 8005a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a76:	e00a      	b.n	8005a8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a78:	f7fe f8d6 	bl	8003c28 <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d901      	bls.n	8005a8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e0cb      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a8e:	4b49      	ldr	r3, [pc, #292]	; (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a92:	f003 0302 	and.w	r3, r3, #2
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d0ee      	beq.n	8005a78 <HAL_RCC_OscConfig+0x334>
 8005a9a:	e014      	b.n	8005ac6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a9c:	f7fe f8c4 	bl	8003c28 <HAL_GetTick>
 8005aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005aa2:	e00a      	b.n	8005aba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005aa4:	f7fe f8c0 	bl	8003c28 <HAL_GetTick>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d901      	bls.n	8005aba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e0b5      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005aba:	4b3e      	ldr	r3, [pc, #248]	; (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005abe:	f003 0302 	and.w	r3, r3, #2
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1ee      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ac6:	7dfb      	ldrb	r3, [r7, #23]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d105      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005acc:	4b39      	ldr	r3, [pc, #228]	; (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad0:	4a38      	ldr	r2, [pc, #224]	; (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005ad2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ad6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f000 80a1 	beq.w	8005c24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ae2:	4b34      	ldr	r3, [pc, #208]	; (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f003 030c 	and.w	r3, r3, #12
 8005aea:	2b08      	cmp	r3, #8
 8005aec:	d05c      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d141      	bne.n	8005b7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005af6:	4b31      	ldr	r3, [pc, #196]	; (8005bbc <HAL_RCC_OscConfig+0x478>)
 8005af8:	2200      	movs	r2, #0
 8005afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005afc:	f7fe f894 	bl	8003c28 <HAL_GetTick>
 8005b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b02:	e008      	b.n	8005b16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b04:	f7fe f890 	bl	8003c28 <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d901      	bls.n	8005b16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e087      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b16:	4b27      	ldr	r3, [pc, #156]	; (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1f0      	bne.n	8005b04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	69da      	ldr	r2, [r3, #28]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b30:	019b      	lsls	r3, r3, #6
 8005b32:	431a      	orrs	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b38:	085b      	lsrs	r3, r3, #1
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	041b      	lsls	r3, r3, #16
 8005b3e:	431a      	orrs	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b44:	061b      	lsls	r3, r3, #24
 8005b46:	491b      	ldr	r1, [pc, #108]	; (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b4c:	4b1b      	ldr	r3, [pc, #108]	; (8005bbc <HAL_RCC_OscConfig+0x478>)
 8005b4e:	2201      	movs	r2, #1
 8005b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b52:	f7fe f869 	bl	8003c28 <HAL_GetTick>
 8005b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b58:	e008      	b.n	8005b6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b5a:	f7fe f865 	bl	8003c28 <HAL_GetTick>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d901      	bls.n	8005b6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e05c      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b6c:	4b11      	ldr	r3, [pc, #68]	; (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d0f0      	beq.n	8005b5a <HAL_RCC_OscConfig+0x416>
 8005b78:	e054      	b.n	8005c24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b7a:	4b10      	ldr	r3, [pc, #64]	; (8005bbc <HAL_RCC_OscConfig+0x478>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b80:	f7fe f852 	bl	8003c28 <HAL_GetTick>
 8005b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b86:	e008      	b.n	8005b9a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b88:	f7fe f84e 	bl	8003c28 <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d901      	bls.n	8005b9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e045      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b9a:	4b06      	ldr	r3, [pc, #24]	; (8005bb4 <HAL_RCC_OscConfig+0x470>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1f0      	bne.n	8005b88 <HAL_RCC_OscConfig+0x444>
 8005ba6:	e03d      	b.n	8005c24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	699b      	ldr	r3, [r3, #24]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d107      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e038      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
 8005bb4:	40023800 	.word	0x40023800
 8005bb8:	40007000 	.word	0x40007000
 8005bbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005bc0:	4b1b      	ldr	r3, [pc, #108]	; (8005c30 <HAL_RCC_OscConfig+0x4ec>)
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d028      	beq.n	8005c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d121      	bne.n	8005c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d11a      	bne.n	8005c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005bf6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d111      	bne.n	8005c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c06:	085b      	lsrs	r3, r3, #1
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d107      	bne.n	8005c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d001      	beq.n	8005c24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e000      	b.n	8005c26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3718      	adds	r7, #24
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	40023800 	.word	0x40023800

08005c34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d101      	bne.n	8005c48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e0cc      	b.n	8005de2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c48:	4b68      	ldr	r3, [pc, #416]	; (8005dec <HAL_RCC_ClockConfig+0x1b8>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0307 	and.w	r3, r3, #7
 8005c50:	683a      	ldr	r2, [r7, #0]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d90c      	bls.n	8005c70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c56:	4b65      	ldr	r3, [pc, #404]	; (8005dec <HAL_RCC_ClockConfig+0x1b8>)
 8005c58:	683a      	ldr	r2, [r7, #0]
 8005c5a:	b2d2      	uxtb	r2, r2
 8005c5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c5e:	4b63      	ldr	r3, [pc, #396]	; (8005dec <HAL_RCC_ClockConfig+0x1b8>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0307 	and.w	r3, r3, #7
 8005c66:	683a      	ldr	r2, [r7, #0]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d001      	beq.n	8005c70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e0b8      	b.n	8005de2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0302 	and.w	r3, r3, #2
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d020      	beq.n	8005cbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0304 	and.w	r3, r3, #4
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d005      	beq.n	8005c94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c88:	4b59      	ldr	r3, [pc, #356]	; (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	4a58      	ldr	r2, [pc, #352]	; (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0308 	and.w	r3, r3, #8
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d005      	beq.n	8005cac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ca0:	4b53      	ldr	r3, [pc, #332]	; (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	4a52      	ldr	r2, [pc, #328]	; (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ca6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005caa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cac:	4b50      	ldr	r3, [pc, #320]	; (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	494d      	ldr	r1, [pc, #308]	; (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0301 	and.w	r3, r3, #1
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d044      	beq.n	8005d54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d107      	bne.n	8005ce2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cd2:	4b47      	ldr	r3, [pc, #284]	; (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d119      	bne.n	8005d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e07f      	b.n	8005de2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d003      	beq.n	8005cf2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cee:	2b03      	cmp	r3, #3
 8005cf0:	d107      	bne.n	8005d02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cf2:	4b3f      	ldr	r3, [pc, #252]	; (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d109      	bne.n	8005d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e06f      	b.n	8005de2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d02:	4b3b      	ldr	r3, [pc, #236]	; (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0302 	and.w	r3, r3, #2
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d101      	bne.n	8005d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e067      	b.n	8005de2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d12:	4b37      	ldr	r3, [pc, #220]	; (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f023 0203 	bic.w	r2, r3, #3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	4934      	ldr	r1, [pc, #208]	; (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d20:	4313      	orrs	r3, r2
 8005d22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d24:	f7fd ff80 	bl	8003c28 <HAL_GetTick>
 8005d28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d2a:	e00a      	b.n	8005d42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d2c:	f7fd ff7c 	bl	8003c28 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d901      	bls.n	8005d42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e04f      	b.n	8005de2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d42:	4b2b      	ldr	r3, [pc, #172]	; (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f003 020c 	and.w	r2, r3, #12
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d1eb      	bne.n	8005d2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d54:	4b25      	ldr	r3, [pc, #148]	; (8005dec <HAL_RCC_ClockConfig+0x1b8>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0307 	and.w	r3, r3, #7
 8005d5c:	683a      	ldr	r2, [r7, #0]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d20c      	bcs.n	8005d7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d62:	4b22      	ldr	r3, [pc, #136]	; (8005dec <HAL_RCC_ClockConfig+0x1b8>)
 8005d64:	683a      	ldr	r2, [r7, #0]
 8005d66:	b2d2      	uxtb	r2, r2
 8005d68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d6a:	4b20      	ldr	r3, [pc, #128]	; (8005dec <HAL_RCC_ClockConfig+0x1b8>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0307 	and.w	r3, r3, #7
 8005d72:	683a      	ldr	r2, [r7, #0]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d001      	beq.n	8005d7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e032      	b.n	8005de2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0304 	and.w	r3, r3, #4
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d008      	beq.n	8005d9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d88:	4b19      	ldr	r3, [pc, #100]	; (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	4916      	ldr	r1, [pc, #88]	; (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0308 	and.w	r3, r3, #8
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d009      	beq.n	8005dba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005da6:	4b12      	ldr	r3, [pc, #72]	; (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	00db      	lsls	r3, r3, #3
 8005db4:	490e      	ldr	r1, [pc, #56]	; (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005db6:	4313      	orrs	r3, r2
 8005db8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005dba:	f000 f821 	bl	8005e00 <HAL_RCC_GetSysClockFreq>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	4b0b      	ldr	r3, [pc, #44]	; (8005df0 <HAL_RCC_ClockConfig+0x1bc>)
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	091b      	lsrs	r3, r3, #4
 8005dc6:	f003 030f 	and.w	r3, r3, #15
 8005dca:	490a      	ldr	r1, [pc, #40]	; (8005df4 <HAL_RCC_ClockConfig+0x1c0>)
 8005dcc:	5ccb      	ldrb	r3, [r1, r3]
 8005dce:	fa22 f303 	lsr.w	r3, r2, r3
 8005dd2:	4a09      	ldr	r2, [pc, #36]	; (8005df8 <HAL_RCC_ClockConfig+0x1c4>)
 8005dd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005dd6:	4b09      	ldr	r3, [pc, #36]	; (8005dfc <HAL_RCC_ClockConfig+0x1c8>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7fd fee0 	bl	8003ba0 <HAL_InitTick>

  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	40023c00 	.word	0x40023c00
 8005df0:	40023800 	.word	0x40023800
 8005df4:	0800da28 	.word	0x0800da28
 8005df8:	20000000 	.word	0x20000000
 8005dfc:	20000004 	.word	0x20000004

08005e00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e04:	b090      	sub	sp, #64	; 0x40
 8005e06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	637b      	str	r3, [r7, #52]	; 0x34
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e10:	2300      	movs	r3, #0
 8005e12:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005e14:	2300      	movs	r3, #0
 8005e16:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e18:	4b59      	ldr	r3, [pc, #356]	; (8005f80 <HAL_RCC_GetSysClockFreq+0x180>)
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f003 030c 	and.w	r3, r3, #12
 8005e20:	2b08      	cmp	r3, #8
 8005e22:	d00d      	beq.n	8005e40 <HAL_RCC_GetSysClockFreq+0x40>
 8005e24:	2b08      	cmp	r3, #8
 8005e26:	f200 80a1 	bhi.w	8005f6c <HAL_RCC_GetSysClockFreq+0x16c>
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d002      	beq.n	8005e34 <HAL_RCC_GetSysClockFreq+0x34>
 8005e2e:	2b04      	cmp	r3, #4
 8005e30:	d003      	beq.n	8005e3a <HAL_RCC_GetSysClockFreq+0x3a>
 8005e32:	e09b      	b.n	8005f6c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e34:	4b53      	ldr	r3, [pc, #332]	; (8005f84 <HAL_RCC_GetSysClockFreq+0x184>)
 8005e36:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005e38:	e09b      	b.n	8005f72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e3a:	4b53      	ldr	r3, [pc, #332]	; (8005f88 <HAL_RCC_GetSysClockFreq+0x188>)
 8005e3c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005e3e:	e098      	b.n	8005f72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e40:	4b4f      	ldr	r3, [pc, #316]	; (8005f80 <HAL_RCC_GetSysClockFreq+0x180>)
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e48:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e4a:	4b4d      	ldr	r3, [pc, #308]	; (8005f80 <HAL_RCC_GetSysClockFreq+0x180>)
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d028      	beq.n	8005ea8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e56:	4b4a      	ldr	r3, [pc, #296]	; (8005f80 <HAL_RCC_GetSysClockFreq+0x180>)
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	099b      	lsrs	r3, r3, #6
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	623b      	str	r3, [r7, #32]
 8005e60:	627a      	str	r2, [r7, #36]	; 0x24
 8005e62:	6a3b      	ldr	r3, [r7, #32]
 8005e64:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005e68:	2100      	movs	r1, #0
 8005e6a:	4b47      	ldr	r3, [pc, #284]	; (8005f88 <HAL_RCC_GetSysClockFreq+0x188>)
 8005e6c:	fb03 f201 	mul.w	r2, r3, r1
 8005e70:	2300      	movs	r3, #0
 8005e72:	fb00 f303 	mul.w	r3, r0, r3
 8005e76:	4413      	add	r3, r2
 8005e78:	4a43      	ldr	r2, [pc, #268]	; (8005f88 <HAL_RCC_GetSysClockFreq+0x188>)
 8005e7a:	fba0 1202 	umull	r1, r2, r0, r2
 8005e7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e80:	460a      	mov	r2, r1
 8005e82:	62ba      	str	r2, [r7, #40]	; 0x28
 8005e84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e86:	4413      	add	r3, r2
 8005e88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	61bb      	str	r3, [r7, #24]
 8005e90:	61fa      	str	r2, [r7, #28]
 8005e92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e96:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005e9a:	f7fa fed5 	bl	8000c48 <__aeabi_uldivmod>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ea6:	e053      	b.n	8005f50 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ea8:	4b35      	ldr	r3, [pc, #212]	; (8005f80 <HAL_RCC_GetSysClockFreq+0x180>)
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	099b      	lsrs	r3, r3, #6
 8005eae:	2200      	movs	r2, #0
 8005eb0:	613b      	str	r3, [r7, #16]
 8005eb2:	617a      	str	r2, [r7, #20]
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005eba:	f04f 0b00 	mov.w	fp, #0
 8005ebe:	4652      	mov	r2, sl
 8005ec0:	465b      	mov	r3, fp
 8005ec2:	f04f 0000 	mov.w	r0, #0
 8005ec6:	f04f 0100 	mov.w	r1, #0
 8005eca:	0159      	lsls	r1, r3, #5
 8005ecc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ed0:	0150      	lsls	r0, r2, #5
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	ebb2 080a 	subs.w	r8, r2, sl
 8005eda:	eb63 090b 	sbc.w	r9, r3, fp
 8005ede:	f04f 0200 	mov.w	r2, #0
 8005ee2:	f04f 0300 	mov.w	r3, #0
 8005ee6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005eea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005eee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005ef2:	ebb2 0408 	subs.w	r4, r2, r8
 8005ef6:	eb63 0509 	sbc.w	r5, r3, r9
 8005efa:	f04f 0200 	mov.w	r2, #0
 8005efe:	f04f 0300 	mov.w	r3, #0
 8005f02:	00eb      	lsls	r3, r5, #3
 8005f04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f08:	00e2      	lsls	r2, r4, #3
 8005f0a:	4614      	mov	r4, r2
 8005f0c:	461d      	mov	r5, r3
 8005f0e:	eb14 030a 	adds.w	r3, r4, sl
 8005f12:	603b      	str	r3, [r7, #0]
 8005f14:	eb45 030b 	adc.w	r3, r5, fp
 8005f18:	607b      	str	r3, [r7, #4]
 8005f1a:	f04f 0200 	mov.w	r2, #0
 8005f1e:	f04f 0300 	mov.w	r3, #0
 8005f22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f26:	4629      	mov	r1, r5
 8005f28:	028b      	lsls	r3, r1, #10
 8005f2a:	4621      	mov	r1, r4
 8005f2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f30:	4621      	mov	r1, r4
 8005f32:	028a      	lsls	r2, r1, #10
 8005f34:	4610      	mov	r0, r2
 8005f36:	4619      	mov	r1, r3
 8005f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	60bb      	str	r3, [r7, #8]
 8005f3e:	60fa      	str	r2, [r7, #12]
 8005f40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f44:	f7fa fe80 	bl	8000c48 <__aeabi_uldivmod>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005f50:	4b0b      	ldr	r3, [pc, #44]	; (8005f80 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	0c1b      	lsrs	r3, r3, #16
 8005f56:	f003 0303 	and.w	r3, r3, #3
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	005b      	lsls	r3, r3, #1
 8005f5e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005f60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f68:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005f6a:	e002      	b.n	8005f72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f6c:	4b05      	ldr	r3, [pc, #20]	; (8005f84 <HAL_RCC_GetSysClockFreq+0x184>)
 8005f6e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005f70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3740      	adds	r7, #64	; 0x40
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f7e:	bf00      	nop
 8005f80:	40023800 	.word	0x40023800
 8005f84:	00f42400 	.word	0x00f42400
 8005f88:	017d7840 	.word	0x017d7840

08005f8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f90:	4b03      	ldr	r3, [pc, #12]	; (8005fa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f92:	681b      	ldr	r3, [r3, #0]
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	20000000 	.word	0x20000000

08005fa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d101      	bne.n	8005fb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e041      	b.n	800603a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d106      	bne.n	8005fd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f7fd fadc 	bl	8003588 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2202      	movs	r2, #2
 8005fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	3304      	adds	r3, #4
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	4610      	mov	r0, r2
 8005fe4:	f000 fe92 	bl	8006d0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
	...

08006044 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006052:	b2db      	uxtb	r3, r3
 8006054:	2b01      	cmp	r3, #1
 8006056:	d001      	beq.n	800605c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e044      	b.n	80060e6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2202      	movs	r2, #2
 8006060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68da      	ldr	r2, [r3, #12]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f042 0201 	orr.w	r2, r2, #1
 8006072:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a1e      	ldr	r2, [pc, #120]	; (80060f4 <HAL_TIM_Base_Start_IT+0xb0>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d018      	beq.n	80060b0 <HAL_TIM_Base_Start_IT+0x6c>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006086:	d013      	beq.n	80060b0 <HAL_TIM_Base_Start_IT+0x6c>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a1a      	ldr	r2, [pc, #104]	; (80060f8 <HAL_TIM_Base_Start_IT+0xb4>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d00e      	beq.n	80060b0 <HAL_TIM_Base_Start_IT+0x6c>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a19      	ldr	r2, [pc, #100]	; (80060fc <HAL_TIM_Base_Start_IT+0xb8>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d009      	beq.n	80060b0 <HAL_TIM_Base_Start_IT+0x6c>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a17      	ldr	r2, [pc, #92]	; (8006100 <HAL_TIM_Base_Start_IT+0xbc>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d004      	beq.n	80060b0 <HAL_TIM_Base_Start_IT+0x6c>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a16      	ldr	r2, [pc, #88]	; (8006104 <HAL_TIM_Base_Start_IT+0xc0>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d111      	bne.n	80060d4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	f003 0307 	and.w	r3, r3, #7
 80060ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2b06      	cmp	r3, #6
 80060c0:	d010      	beq.n	80060e4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f042 0201 	orr.w	r2, r2, #1
 80060d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060d2:	e007      	b.n	80060e4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f042 0201 	orr.w	r2, r2, #1
 80060e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3714      	adds	r7, #20
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	40010000 	.word	0x40010000
 80060f8:	40000400 	.word	0x40000400
 80060fc:	40000800 	.word	0x40000800
 8006100:	40000c00 	.word	0x40000c00
 8006104:	40014000 	.word	0x40014000

08006108 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68da      	ldr	r2, [r3, #12]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f022 0201 	bic.w	r2, r2, #1
 800611e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	6a1a      	ldr	r2, [r3, #32]
 8006126:	f241 1311 	movw	r3, #4369	; 0x1111
 800612a:	4013      	ands	r3, r2
 800612c:	2b00      	cmp	r3, #0
 800612e:	d10f      	bne.n	8006150 <HAL_TIM_Base_Stop_IT+0x48>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	6a1a      	ldr	r2, [r3, #32]
 8006136:	f240 4344 	movw	r3, #1092	; 0x444
 800613a:	4013      	ands	r3, r2
 800613c:	2b00      	cmp	r3, #0
 800613e:	d107      	bne.n	8006150 <HAL_TIM_Base_Stop_IT+0x48>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f022 0201 	bic.w	r2, r2, #1
 800614e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	370c      	adds	r7, #12
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr

08006166 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b082      	sub	sp, #8
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d101      	bne.n	8006178 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e041      	b.n	80061fc <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800617e:	b2db      	uxtb	r3, r3
 8006180:	2b00      	cmp	r3, #0
 8006182:	d106      	bne.n	8006192 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 f839 	bl	8006204 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2202      	movs	r2, #2
 8006196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	3304      	adds	r3, #4
 80061a2:	4619      	mov	r1, r3
 80061a4:	4610      	mov	r0, r2
 80061a6:	f000 fdb1 	bl	8006d0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2201      	movs	r2, #1
 80061e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3708      	adds	r7, #8
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800620c:	bf00      	nop
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d101      	bne.n	800622a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e041      	b.n	80062ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006230:	b2db      	uxtb	r3, r3
 8006232:	2b00      	cmp	r3, #0
 8006234:	d106      	bne.n	8006244 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f839 	bl	80062b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2202      	movs	r2, #2
 8006248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	3304      	adds	r3, #4
 8006254:	4619      	mov	r1, r3
 8006256:	4610      	mov	r0, r2
 8006258:	f000 fd58 	bl	8006d0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3708      	adds	r7, #8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b083      	sub	sp, #12
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80062be:	bf00      	nop
 80062c0:	370c      	adds	r7, #12
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
	...

080062cc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062d6:	2300      	movs	r3, #0
 80062d8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d109      	bne.n	80062f4 <HAL_TIM_PWM_Start_IT+0x28>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	bf14      	ite	ne
 80062ec:	2301      	movne	r3, #1
 80062ee:	2300      	moveq	r3, #0
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	e022      	b.n	800633a <HAL_TIM_PWM_Start_IT+0x6e>
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	2b04      	cmp	r3, #4
 80062f8:	d109      	bne.n	800630e <HAL_TIM_PWM_Start_IT+0x42>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b01      	cmp	r3, #1
 8006304:	bf14      	ite	ne
 8006306:	2301      	movne	r3, #1
 8006308:	2300      	moveq	r3, #0
 800630a:	b2db      	uxtb	r3, r3
 800630c:	e015      	b.n	800633a <HAL_TIM_PWM_Start_IT+0x6e>
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	2b08      	cmp	r3, #8
 8006312:	d109      	bne.n	8006328 <HAL_TIM_PWM_Start_IT+0x5c>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800631a:	b2db      	uxtb	r3, r3
 800631c:	2b01      	cmp	r3, #1
 800631e:	bf14      	ite	ne
 8006320:	2301      	movne	r3, #1
 8006322:	2300      	moveq	r3, #0
 8006324:	b2db      	uxtb	r3, r3
 8006326:	e008      	b.n	800633a <HAL_TIM_PWM_Start_IT+0x6e>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800632e:	b2db      	uxtb	r3, r3
 8006330:	2b01      	cmp	r3, #1
 8006332:	bf14      	ite	ne
 8006334:	2301      	movne	r3, #1
 8006336:	2300      	moveq	r3, #0
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e0b3      	b.n	80064aa <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d104      	bne.n	8006352 <HAL_TIM_PWM_Start_IT+0x86>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2202      	movs	r2, #2
 800634c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006350:	e013      	b.n	800637a <HAL_TIM_PWM_Start_IT+0xae>
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	2b04      	cmp	r3, #4
 8006356:	d104      	bne.n	8006362 <HAL_TIM_PWM_Start_IT+0x96>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2202      	movs	r2, #2
 800635c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006360:	e00b      	b.n	800637a <HAL_TIM_PWM_Start_IT+0xae>
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	2b08      	cmp	r3, #8
 8006366:	d104      	bne.n	8006372 <HAL_TIM_PWM_Start_IT+0xa6>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2202      	movs	r2, #2
 800636c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006370:	e003      	b.n	800637a <HAL_TIM_PWM_Start_IT+0xae>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2202      	movs	r2, #2
 8006376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	2b0c      	cmp	r3, #12
 800637e:	d841      	bhi.n	8006404 <HAL_TIM_PWM_Start_IT+0x138>
 8006380:	a201      	add	r2, pc, #4	; (adr r2, 8006388 <HAL_TIM_PWM_Start_IT+0xbc>)
 8006382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006386:	bf00      	nop
 8006388:	080063bd 	.word	0x080063bd
 800638c:	08006405 	.word	0x08006405
 8006390:	08006405 	.word	0x08006405
 8006394:	08006405 	.word	0x08006405
 8006398:	080063cf 	.word	0x080063cf
 800639c:	08006405 	.word	0x08006405
 80063a0:	08006405 	.word	0x08006405
 80063a4:	08006405 	.word	0x08006405
 80063a8:	080063e1 	.word	0x080063e1
 80063ac:	08006405 	.word	0x08006405
 80063b0:	08006405 	.word	0x08006405
 80063b4:	08006405 	.word	0x08006405
 80063b8:	080063f3 	.word	0x080063f3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68da      	ldr	r2, [r3, #12]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f042 0202 	orr.w	r2, r2, #2
 80063ca:	60da      	str	r2, [r3, #12]
      break;
 80063cc:	e01d      	b.n	800640a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68da      	ldr	r2, [r3, #12]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f042 0204 	orr.w	r2, r2, #4
 80063dc:	60da      	str	r2, [r3, #12]
      break;
 80063de:	e014      	b.n	800640a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68da      	ldr	r2, [r3, #12]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f042 0208 	orr.w	r2, r2, #8
 80063ee:	60da      	str	r2, [r3, #12]
      break;
 80063f0:	e00b      	b.n	800640a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68da      	ldr	r2, [r3, #12]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f042 0210 	orr.w	r2, r2, #16
 8006400:	60da      	str	r2, [r3, #12]
      break;
 8006402:	e002      	b.n	800640a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	73fb      	strb	r3, [r7, #15]
      break;
 8006408:	bf00      	nop
  }

  if (status == HAL_OK)
 800640a:	7bfb      	ldrb	r3, [r7, #15]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d14b      	bne.n	80064a8 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2201      	movs	r2, #1
 8006416:	6839      	ldr	r1, [r7, #0]
 8006418:	4618      	mov	r0, r3
 800641a:	f000 ff1d 	bl	8007258 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a24      	ldr	r2, [pc, #144]	; (80064b4 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d107      	bne.n	8006438 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006436:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a1d      	ldr	r2, [pc, #116]	; (80064b4 <HAL_TIM_PWM_Start_IT+0x1e8>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d018      	beq.n	8006474 <HAL_TIM_PWM_Start_IT+0x1a8>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800644a:	d013      	beq.n	8006474 <HAL_TIM_PWM_Start_IT+0x1a8>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a19      	ldr	r2, [pc, #100]	; (80064b8 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d00e      	beq.n	8006474 <HAL_TIM_PWM_Start_IT+0x1a8>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a18      	ldr	r2, [pc, #96]	; (80064bc <HAL_TIM_PWM_Start_IT+0x1f0>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d009      	beq.n	8006474 <HAL_TIM_PWM_Start_IT+0x1a8>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a16      	ldr	r2, [pc, #88]	; (80064c0 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d004      	beq.n	8006474 <HAL_TIM_PWM_Start_IT+0x1a8>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a15      	ldr	r2, [pc, #84]	; (80064c4 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d111      	bne.n	8006498 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	f003 0307 	and.w	r3, r3, #7
 800647e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	2b06      	cmp	r3, #6
 8006484:	d010      	beq.n	80064a8 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f042 0201 	orr.w	r2, r2, #1
 8006494:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006496:	e007      	b.n	80064a8 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f042 0201 	orr.w	r2, r2, #1
 80064a6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80064a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3710      	adds	r7, #16
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	40010000 	.word	0x40010000
 80064b8:	40000400 	.word	0x40000400
 80064bc:	40000800 	.word	0x40000800
 80064c0:	40000c00 	.word	0x40000c00
 80064c4:	40014000 	.word	0x40014000

080064c8 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064d2:	2300      	movs	r3, #0
 80064d4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	2b0c      	cmp	r3, #12
 80064da:	d841      	bhi.n	8006560 <HAL_TIM_PWM_Stop_IT+0x98>
 80064dc:	a201      	add	r2, pc, #4	; (adr r2, 80064e4 <HAL_TIM_PWM_Stop_IT+0x1c>)
 80064de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e2:	bf00      	nop
 80064e4:	08006519 	.word	0x08006519
 80064e8:	08006561 	.word	0x08006561
 80064ec:	08006561 	.word	0x08006561
 80064f0:	08006561 	.word	0x08006561
 80064f4:	0800652b 	.word	0x0800652b
 80064f8:	08006561 	.word	0x08006561
 80064fc:	08006561 	.word	0x08006561
 8006500:	08006561 	.word	0x08006561
 8006504:	0800653d 	.word	0x0800653d
 8006508:	08006561 	.word	0x08006561
 800650c:	08006561 	.word	0x08006561
 8006510:	08006561 	.word	0x08006561
 8006514:	0800654f 	.word	0x0800654f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68da      	ldr	r2, [r3, #12]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f022 0202 	bic.w	r2, r2, #2
 8006526:	60da      	str	r2, [r3, #12]
      break;
 8006528:	e01d      	b.n	8006566 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68da      	ldr	r2, [r3, #12]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f022 0204 	bic.w	r2, r2, #4
 8006538:	60da      	str	r2, [r3, #12]
      break;
 800653a:	e014      	b.n	8006566 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68da      	ldr	r2, [r3, #12]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f022 0208 	bic.w	r2, r2, #8
 800654a:	60da      	str	r2, [r3, #12]
      break;
 800654c:	e00b      	b.n	8006566 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68da      	ldr	r2, [r3, #12]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f022 0210 	bic.w	r2, r2, #16
 800655c:	60da      	str	r2, [r3, #12]
      break;
 800655e:	e002      	b.n	8006566 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	73fb      	strb	r3, [r7, #15]
      break;
 8006564:	bf00      	nop
  }

  if (status == HAL_OK)
 8006566:	7bfb      	ldrb	r3, [r7, #15]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d157      	bne.n	800661c <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2200      	movs	r2, #0
 8006572:	6839      	ldr	r1, [r7, #0]
 8006574:	4618      	mov	r0, r3
 8006576:	f000 fe6f 	bl	8007258 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a2a      	ldr	r2, [pc, #168]	; (8006628 <HAL_TIM_PWM_Stop_IT+0x160>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d117      	bne.n	80065b4 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6a1a      	ldr	r2, [r3, #32]
 800658a:	f241 1311 	movw	r3, #4369	; 0x1111
 800658e:	4013      	ands	r3, r2
 8006590:	2b00      	cmp	r3, #0
 8006592:	d10f      	bne.n	80065b4 <HAL_TIM_PWM_Stop_IT+0xec>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6a1a      	ldr	r2, [r3, #32]
 800659a:	f240 4344 	movw	r3, #1092	; 0x444
 800659e:	4013      	ands	r3, r2
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d107      	bne.n	80065b4 <HAL_TIM_PWM_Stop_IT+0xec>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80065b2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	6a1a      	ldr	r2, [r3, #32]
 80065ba:	f241 1311 	movw	r3, #4369	; 0x1111
 80065be:	4013      	ands	r3, r2
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10f      	bne.n	80065e4 <HAL_TIM_PWM_Stop_IT+0x11c>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	6a1a      	ldr	r2, [r3, #32]
 80065ca:	f240 4344 	movw	r3, #1092	; 0x444
 80065ce:	4013      	ands	r3, r2
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d107      	bne.n	80065e4 <HAL_TIM_PWM_Stop_IT+0x11c>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f022 0201 	bic.w	r2, r2, #1
 80065e2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d104      	bne.n	80065f4 <HAL_TIM_PWM_Stop_IT+0x12c>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065f2:	e013      	b.n	800661c <HAL_TIM_PWM_Stop_IT+0x154>
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	2b04      	cmp	r3, #4
 80065f8:	d104      	bne.n	8006604 <HAL_TIM_PWM_Stop_IT+0x13c>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2201      	movs	r2, #1
 80065fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006602:	e00b      	b.n	800661c <HAL_TIM_PWM_Stop_IT+0x154>
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	2b08      	cmp	r3, #8
 8006608:	d104      	bne.n	8006614 <HAL_TIM_PWM_Stop_IT+0x14c>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2201      	movs	r2, #1
 800660e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006612:	e003      	b.n	800661c <HAL_TIM_PWM_Stop_IT+0x154>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800661c:	7bfb      	ldrb	r3, [r7, #15]
}
 800661e:	4618      	mov	r0, r3
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	40010000 	.word	0x40010000

0800662c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d101      	bne.n	8006640 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e041      	b.n	80066c4 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006646:	b2db      	uxtb	r3, r3
 8006648:	2b00      	cmp	r3, #0
 800664a:	d106      	bne.n	800665a <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 f839 	bl	80066cc <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2202      	movs	r2, #2
 800665e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	3304      	adds	r3, #4
 800666a:	4619      	mov	r1, r3
 800666c:	4610      	mov	r0, r2
 800666e:	f000 fb4d 	bl	8006d0c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f022 0208 	bic.w	r2, r2, #8
 8006680:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	6819      	ldr	r1, [r3, #0]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	683a      	ldr	r2, [r7, #0]
 800668e:	430a      	orrs	r2, r1
 8006690:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2201      	movs	r2, #1
 80066ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2201      	movs	r2, #1
 80066b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2201      	movs	r2, #1
 80066be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3708      	adds	r7, #8
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80066d4:	bf00      	nop
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	f003 0302 	and.w	r3, r3, #2
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	d122      	bne.n	800673c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	f003 0302 	and.w	r3, r3, #2
 8006700:	2b02      	cmp	r3, #2
 8006702:	d11b      	bne.n	800673c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f06f 0202 	mvn.w	r2, #2
 800670c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2201      	movs	r2, #1
 8006712:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	f003 0303 	and.w	r3, r3, #3
 800671e:	2b00      	cmp	r3, #0
 8006720:	d003      	beq.n	800672a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 fad3 	bl	8006cce <HAL_TIM_IC_CaptureCallback>
 8006728:	e005      	b.n	8006736 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 fac5 	bl	8006cba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 fad6 	bl	8006ce2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	f003 0304 	and.w	r3, r3, #4
 8006746:	2b04      	cmp	r3, #4
 8006748:	d122      	bne.n	8006790 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	f003 0304 	and.w	r3, r3, #4
 8006754:	2b04      	cmp	r3, #4
 8006756:	d11b      	bne.n	8006790 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f06f 0204 	mvn.w	r2, #4
 8006760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2202      	movs	r2, #2
 8006766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006772:	2b00      	cmp	r3, #0
 8006774:	d003      	beq.n	800677e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 faa9 	bl	8006cce <HAL_TIM_IC_CaptureCallback>
 800677c:	e005      	b.n	800678a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 fa9b 	bl	8006cba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 faac 	bl	8006ce2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	f003 0308 	and.w	r3, r3, #8
 800679a:	2b08      	cmp	r3, #8
 800679c:	d122      	bne.n	80067e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	f003 0308 	and.w	r3, r3, #8
 80067a8:	2b08      	cmp	r3, #8
 80067aa:	d11b      	bne.n	80067e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f06f 0208 	mvn.w	r2, #8
 80067b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2204      	movs	r2, #4
 80067ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	69db      	ldr	r3, [r3, #28]
 80067c2:	f003 0303 	and.w	r3, r3, #3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d003      	beq.n	80067d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 fa7f 	bl	8006cce <HAL_TIM_IC_CaptureCallback>
 80067d0:	e005      	b.n	80067de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 fa71 	bl	8006cba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 fa82 	bl	8006ce2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	f003 0310 	and.w	r3, r3, #16
 80067ee:	2b10      	cmp	r3, #16
 80067f0:	d122      	bne.n	8006838 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	f003 0310 	and.w	r3, r3, #16
 80067fc:	2b10      	cmp	r3, #16
 80067fe:	d11b      	bne.n	8006838 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f06f 0210 	mvn.w	r2, #16
 8006808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2208      	movs	r2, #8
 800680e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	69db      	ldr	r3, [r3, #28]
 8006816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800681a:	2b00      	cmp	r3, #0
 800681c:	d003      	beq.n	8006826 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 fa55 	bl	8006cce <HAL_TIM_IC_CaptureCallback>
 8006824:	e005      	b.n	8006832 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 fa47 	bl	8006cba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 fa58 	bl	8006ce2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	f003 0301 	and.w	r3, r3, #1
 8006842:	2b01      	cmp	r3, #1
 8006844:	d10e      	bne.n	8006864 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	f003 0301 	and.w	r3, r3, #1
 8006850:	2b01      	cmp	r3, #1
 8006852:	d107      	bne.n	8006864 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f06f 0201 	mvn.w	r2, #1
 800685c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f7fb ffba 	bl	80027d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800686e:	2b80      	cmp	r3, #128	; 0x80
 8006870:	d10e      	bne.n	8006890 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800687c:	2b80      	cmp	r3, #128	; 0x80
 800687e:	d107      	bne.n	8006890 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 fdd4 	bl	8007438 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800689a:	2b40      	cmp	r3, #64	; 0x40
 800689c:	d10e      	bne.n	80068bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a8:	2b40      	cmp	r3, #64	; 0x40
 80068aa:	d107      	bne.n	80068bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80068b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 fa1d 	bl	8006cf6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	f003 0320 	and.w	r3, r3, #32
 80068c6:	2b20      	cmp	r3, #32
 80068c8:	d10e      	bne.n	80068e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	f003 0320 	and.w	r3, r3, #32
 80068d4:	2b20      	cmp	r3, #32
 80068d6:	d107      	bne.n	80068e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f06f 0220 	mvn.w	r2, #32
 80068e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 fd9e 	bl	8007424 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068e8:	bf00      	nop
 80068ea:	3708      	adds	r7, #8
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b086      	sub	sp, #24
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068fc:	2300      	movs	r3, #0
 80068fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006906:	2b01      	cmp	r3, #1
 8006908:	d101      	bne.n	800690e <HAL_TIM_OC_ConfigChannel+0x1e>
 800690a:	2302      	movs	r3, #2
 800690c:	e048      	b.n	80069a0 <HAL_TIM_OC_ConfigChannel+0xb0>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2201      	movs	r2, #1
 8006912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2b0c      	cmp	r3, #12
 800691a:	d839      	bhi.n	8006990 <HAL_TIM_OC_ConfigChannel+0xa0>
 800691c:	a201      	add	r2, pc, #4	; (adr r2, 8006924 <HAL_TIM_OC_ConfigChannel+0x34>)
 800691e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006922:	bf00      	nop
 8006924:	08006959 	.word	0x08006959
 8006928:	08006991 	.word	0x08006991
 800692c:	08006991 	.word	0x08006991
 8006930:	08006991 	.word	0x08006991
 8006934:	08006967 	.word	0x08006967
 8006938:	08006991 	.word	0x08006991
 800693c:	08006991 	.word	0x08006991
 8006940:	08006991 	.word	0x08006991
 8006944:	08006975 	.word	0x08006975
 8006948:	08006991 	.word	0x08006991
 800694c:	08006991 	.word	0x08006991
 8006950:	08006991 	.word	0x08006991
 8006954:	08006983 	.word	0x08006983
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68b9      	ldr	r1, [r7, #8]
 800695e:	4618      	mov	r0, r3
 8006960:	f000 fa54 	bl	8006e0c <TIM_OC1_SetConfig>
      break;
 8006964:	e017      	b.n	8006996 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68b9      	ldr	r1, [r7, #8]
 800696c:	4618      	mov	r0, r3
 800696e:	f000 fab3 	bl	8006ed8 <TIM_OC2_SetConfig>
      break;
 8006972:	e010      	b.n	8006996 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68b9      	ldr	r1, [r7, #8]
 800697a:	4618      	mov	r0, r3
 800697c:	f000 fb18 	bl	8006fb0 <TIM_OC3_SetConfig>
      break;
 8006980:	e009      	b.n	8006996 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68b9      	ldr	r1, [r7, #8]
 8006988:	4618      	mov	r0, r3
 800698a:	f000 fb7b 	bl	8007084 <TIM_OC4_SetConfig>
      break;
 800698e:	e002      	b.n	8006996 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	75fb      	strb	r3, [r7, #23]
      break;
 8006994:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2200      	movs	r2, #0
 800699a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800699e:	7dfb      	ldrb	r3, [r7, #23]
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3718      	adds	r7, #24
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b086      	sub	sp, #24
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069b4:	2300      	movs	r3, #0
 80069b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d101      	bne.n	80069c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80069c2:	2302      	movs	r3, #2
 80069c4:	e0ae      	b.n	8006b24 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2201      	movs	r2, #1
 80069ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2b0c      	cmp	r3, #12
 80069d2:	f200 809f 	bhi.w	8006b14 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80069d6:	a201      	add	r2, pc, #4	; (adr r2, 80069dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80069d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069dc:	08006a11 	.word	0x08006a11
 80069e0:	08006b15 	.word	0x08006b15
 80069e4:	08006b15 	.word	0x08006b15
 80069e8:	08006b15 	.word	0x08006b15
 80069ec:	08006a51 	.word	0x08006a51
 80069f0:	08006b15 	.word	0x08006b15
 80069f4:	08006b15 	.word	0x08006b15
 80069f8:	08006b15 	.word	0x08006b15
 80069fc:	08006a93 	.word	0x08006a93
 8006a00:	08006b15 	.word	0x08006b15
 8006a04:	08006b15 	.word	0x08006b15
 8006a08:	08006b15 	.word	0x08006b15
 8006a0c:	08006ad3 	.word	0x08006ad3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68b9      	ldr	r1, [r7, #8]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f000 f9f8 	bl	8006e0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	699a      	ldr	r2, [r3, #24]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f042 0208 	orr.w	r2, r2, #8
 8006a2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	699a      	ldr	r2, [r3, #24]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f022 0204 	bic.w	r2, r2, #4
 8006a3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	6999      	ldr	r1, [r3, #24]
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	691a      	ldr	r2, [r3, #16]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	430a      	orrs	r2, r1
 8006a4c:	619a      	str	r2, [r3, #24]
      break;
 8006a4e:	e064      	b.n	8006b1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68b9      	ldr	r1, [r7, #8]
 8006a56:	4618      	mov	r0, r3
 8006a58:	f000 fa3e 	bl	8006ed8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	699a      	ldr	r2, [r3, #24]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	699a      	ldr	r2, [r3, #24]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	6999      	ldr	r1, [r3, #24]
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	021a      	lsls	r2, r3, #8
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	430a      	orrs	r2, r1
 8006a8e:	619a      	str	r2, [r3, #24]
      break;
 8006a90:	e043      	b.n	8006b1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68b9      	ldr	r1, [r7, #8]
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f000 fa89 	bl	8006fb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	69da      	ldr	r2, [r3, #28]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f042 0208 	orr.w	r2, r2, #8
 8006aac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	69da      	ldr	r2, [r3, #28]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f022 0204 	bic.w	r2, r2, #4
 8006abc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	69d9      	ldr	r1, [r3, #28]
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	691a      	ldr	r2, [r3, #16]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	430a      	orrs	r2, r1
 8006ace:	61da      	str	r2, [r3, #28]
      break;
 8006ad0:	e023      	b.n	8006b1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68b9      	ldr	r1, [r7, #8]
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f000 fad3 	bl	8007084 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	69da      	ldr	r2, [r3, #28]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006aec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	69da      	ldr	r2, [r3, #28]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006afc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	69d9      	ldr	r1, [r3, #28]
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	691b      	ldr	r3, [r3, #16]
 8006b08:	021a      	lsls	r2, r3, #8
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	430a      	orrs	r2, r1
 8006b10:	61da      	str	r2, [r3, #28]
      break;
 8006b12:	e002      	b.n	8006b1a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	75fb      	strb	r3, [r7, #23]
      break;
 8006b18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3718      	adds	r7, #24
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b36:	2300      	movs	r3, #0
 8006b38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d101      	bne.n	8006b48 <HAL_TIM_ConfigClockSource+0x1c>
 8006b44:	2302      	movs	r3, #2
 8006b46:	e0b4      	b.n	8006cb2 <HAL_TIM_ConfigClockSource+0x186>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2202      	movs	r2, #2
 8006b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b80:	d03e      	beq.n	8006c00 <HAL_TIM_ConfigClockSource+0xd4>
 8006b82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b86:	f200 8087 	bhi.w	8006c98 <HAL_TIM_ConfigClockSource+0x16c>
 8006b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b8e:	f000 8086 	beq.w	8006c9e <HAL_TIM_ConfigClockSource+0x172>
 8006b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b96:	d87f      	bhi.n	8006c98 <HAL_TIM_ConfigClockSource+0x16c>
 8006b98:	2b70      	cmp	r3, #112	; 0x70
 8006b9a:	d01a      	beq.n	8006bd2 <HAL_TIM_ConfigClockSource+0xa6>
 8006b9c:	2b70      	cmp	r3, #112	; 0x70
 8006b9e:	d87b      	bhi.n	8006c98 <HAL_TIM_ConfigClockSource+0x16c>
 8006ba0:	2b60      	cmp	r3, #96	; 0x60
 8006ba2:	d050      	beq.n	8006c46 <HAL_TIM_ConfigClockSource+0x11a>
 8006ba4:	2b60      	cmp	r3, #96	; 0x60
 8006ba6:	d877      	bhi.n	8006c98 <HAL_TIM_ConfigClockSource+0x16c>
 8006ba8:	2b50      	cmp	r3, #80	; 0x50
 8006baa:	d03c      	beq.n	8006c26 <HAL_TIM_ConfigClockSource+0xfa>
 8006bac:	2b50      	cmp	r3, #80	; 0x50
 8006bae:	d873      	bhi.n	8006c98 <HAL_TIM_ConfigClockSource+0x16c>
 8006bb0:	2b40      	cmp	r3, #64	; 0x40
 8006bb2:	d058      	beq.n	8006c66 <HAL_TIM_ConfigClockSource+0x13a>
 8006bb4:	2b40      	cmp	r3, #64	; 0x40
 8006bb6:	d86f      	bhi.n	8006c98 <HAL_TIM_ConfigClockSource+0x16c>
 8006bb8:	2b30      	cmp	r3, #48	; 0x30
 8006bba:	d064      	beq.n	8006c86 <HAL_TIM_ConfigClockSource+0x15a>
 8006bbc:	2b30      	cmp	r3, #48	; 0x30
 8006bbe:	d86b      	bhi.n	8006c98 <HAL_TIM_ConfigClockSource+0x16c>
 8006bc0:	2b20      	cmp	r3, #32
 8006bc2:	d060      	beq.n	8006c86 <HAL_TIM_ConfigClockSource+0x15a>
 8006bc4:	2b20      	cmp	r3, #32
 8006bc6:	d867      	bhi.n	8006c98 <HAL_TIM_ConfigClockSource+0x16c>
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d05c      	beq.n	8006c86 <HAL_TIM_ConfigClockSource+0x15a>
 8006bcc:	2b10      	cmp	r3, #16
 8006bce:	d05a      	beq.n	8006c86 <HAL_TIM_ConfigClockSource+0x15a>
 8006bd0:	e062      	b.n	8006c98 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6818      	ldr	r0, [r3, #0]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	6899      	ldr	r1, [r3, #8]
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	685a      	ldr	r2, [r3, #4]
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	f000 fb19 	bl	8007218 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006bf4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68ba      	ldr	r2, [r7, #8]
 8006bfc:	609a      	str	r2, [r3, #8]
      break;
 8006bfe:	e04f      	b.n	8006ca0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6818      	ldr	r0, [r3, #0]
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	6899      	ldr	r1, [r3, #8]
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	685a      	ldr	r2, [r3, #4]
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	f000 fb02 	bl	8007218 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	689a      	ldr	r2, [r3, #8]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c22:	609a      	str	r2, [r3, #8]
      break;
 8006c24:	e03c      	b.n	8006ca0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6818      	ldr	r0, [r3, #0]
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	6859      	ldr	r1, [r3, #4]
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	461a      	mov	r2, r3
 8006c34:	f000 fa76 	bl	8007124 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2150      	movs	r1, #80	; 0x50
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f000 facf 	bl	80071e2 <TIM_ITRx_SetConfig>
      break;
 8006c44:	e02c      	b.n	8006ca0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6818      	ldr	r0, [r3, #0]
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	6859      	ldr	r1, [r3, #4]
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	461a      	mov	r2, r3
 8006c54:	f000 fa95 	bl	8007182 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2160      	movs	r1, #96	; 0x60
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f000 fabf 	bl	80071e2 <TIM_ITRx_SetConfig>
      break;
 8006c64:	e01c      	b.n	8006ca0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6818      	ldr	r0, [r3, #0]
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	6859      	ldr	r1, [r3, #4]
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	461a      	mov	r2, r3
 8006c74:	f000 fa56 	bl	8007124 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2140      	movs	r1, #64	; 0x40
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f000 faaf 	bl	80071e2 <TIM_ITRx_SetConfig>
      break;
 8006c84:	e00c      	b.n	8006ca0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4619      	mov	r1, r3
 8006c90:	4610      	mov	r0, r2
 8006c92:	f000 faa6 	bl	80071e2 <TIM_ITRx_SetConfig>
      break;
 8006c96:	e003      	b.n	8006ca0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	73fb      	strb	r3, [r7, #15]
      break;
 8006c9c:	e000      	b.n	8006ca0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006c9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}

08006cba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cba:	b480      	push	{r7}
 8006cbc:	b083      	sub	sp, #12
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cc2:	bf00      	nop
 8006cc4:	370c      	adds	r7, #12
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr

08006cce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cce:	b480      	push	{r7}
 8006cd0:	b083      	sub	sp, #12
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006cd6:	bf00      	nop
 8006cd8:	370c      	adds	r7, #12
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr

08006ce2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ce2:	b480      	push	{r7}
 8006ce4:	b083      	sub	sp, #12
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006cea:	bf00      	nop
 8006cec:	370c      	adds	r7, #12
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr

08006cf6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cf6:	b480      	push	{r7}
 8006cf8:	b083      	sub	sp, #12
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cfe:	bf00      	nop
 8006d00:	370c      	adds	r7, #12
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
	...

08006d0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a34      	ldr	r2, [pc, #208]	; (8006df0 <TIM_Base_SetConfig+0xe4>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d00f      	beq.n	8006d44 <TIM_Base_SetConfig+0x38>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d2a:	d00b      	beq.n	8006d44 <TIM_Base_SetConfig+0x38>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a31      	ldr	r2, [pc, #196]	; (8006df4 <TIM_Base_SetConfig+0xe8>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d007      	beq.n	8006d44 <TIM_Base_SetConfig+0x38>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a30      	ldr	r2, [pc, #192]	; (8006df8 <TIM_Base_SetConfig+0xec>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d003      	beq.n	8006d44 <TIM_Base_SetConfig+0x38>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a2f      	ldr	r2, [pc, #188]	; (8006dfc <TIM_Base_SetConfig+0xf0>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d108      	bne.n	8006d56 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a25      	ldr	r2, [pc, #148]	; (8006df0 <TIM_Base_SetConfig+0xe4>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d01b      	beq.n	8006d96 <TIM_Base_SetConfig+0x8a>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d64:	d017      	beq.n	8006d96 <TIM_Base_SetConfig+0x8a>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a22      	ldr	r2, [pc, #136]	; (8006df4 <TIM_Base_SetConfig+0xe8>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d013      	beq.n	8006d96 <TIM_Base_SetConfig+0x8a>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a21      	ldr	r2, [pc, #132]	; (8006df8 <TIM_Base_SetConfig+0xec>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d00f      	beq.n	8006d96 <TIM_Base_SetConfig+0x8a>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a20      	ldr	r2, [pc, #128]	; (8006dfc <TIM_Base_SetConfig+0xf0>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d00b      	beq.n	8006d96 <TIM_Base_SetConfig+0x8a>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a1f      	ldr	r2, [pc, #124]	; (8006e00 <TIM_Base_SetConfig+0xf4>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d007      	beq.n	8006d96 <TIM_Base_SetConfig+0x8a>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a1e      	ldr	r2, [pc, #120]	; (8006e04 <TIM_Base_SetConfig+0xf8>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d003      	beq.n	8006d96 <TIM_Base_SetConfig+0x8a>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a1d      	ldr	r2, [pc, #116]	; (8006e08 <TIM_Base_SetConfig+0xfc>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d108      	bne.n	8006da8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	695b      	ldr	r3, [r3, #20]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	689a      	ldr	r2, [r3, #8]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a08      	ldr	r2, [pc, #32]	; (8006df0 <TIM_Base_SetConfig+0xe4>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d103      	bne.n	8006ddc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	691a      	ldr	r2, [r3, #16]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	615a      	str	r2, [r3, #20]
}
 8006de2:	bf00      	nop
 8006de4:	3714      	adds	r7, #20
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	40010000 	.word	0x40010000
 8006df4:	40000400 	.word	0x40000400
 8006df8:	40000800 	.word	0x40000800
 8006dfc:	40000c00 	.word	0x40000c00
 8006e00:	40014000 	.word	0x40014000
 8006e04:	40014400 	.word	0x40014400
 8006e08:	40014800 	.word	0x40014800

08006e0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b087      	sub	sp, #28
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a1b      	ldr	r3, [r3, #32]
 8006e1a:	f023 0201 	bic.w	r2, r3, #1
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	699b      	ldr	r3, [r3, #24]
 8006e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f023 0303 	bic.w	r3, r3, #3
 8006e42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	f023 0302 	bic.w	r3, r3, #2
 8006e54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	697a      	ldr	r2, [r7, #20]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a1c      	ldr	r2, [pc, #112]	; (8006ed4 <TIM_OC1_SetConfig+0xc8>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d10c      	bne.n	8006e82 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	f023 0308 	bic.w	r3, r3, #8
 8006e6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	697a      	ldr	r2, [r7, #20]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	f023 0304 	bic.w	r3, r3, #4
 8006e80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a13      	ldr	r2, [pc, #76]	; (8006ed4 <TIM_OC1_SetConfig+0xc8>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d111      	bne.n	8006eae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	693a      	ldr	r2, [r7, #16]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	693a      	ldr	r2, [r7, #16]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	693a      	ldr	r2, [r7, #16]
 8006eb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	685a      	ldr	r2, [r3, #4]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	697a      	ldr	r2, [r7, #20]
 8006ec6:	621a      	str	r2, [r3, #32]
}
 8006ec8:	bf00      	nop
 8006eca:	371c      	adds	r7, #28
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr
 8006ed4:	40010000 	.word	0x40010000

08006ed8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b087      	sub	sp, #28
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	f023 0210 	bic.w	r2, r3, #16
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	699b      	ldr	r3, [r3, #24]
 8006efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	021b      	lsls	r3, r3, #8
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	f023 0320 	bic.w	r3, r3, #32
 8006f22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	011b      	lsls	r3, r3, #4
 8006f2a:	697a      	ldr	r2, [r7, #20]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	4a1e      	ldr	r2, [pc, #120]	; (8006fac <TIM_OC2_SetConfig+0xd4>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d10d      	bne.n	8006f54 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	011b      	lsls	r3, r3, #4
 8006f46:	697a      	ldr	r2, [r7, #20]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a15      	ldr	r2, [pc, #84]	; (8006fac <TIM_OC2_SetConfig+0xd4>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d113      	bne.n	8006f84 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	695b      	ldr	r3, [r3, #20]
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	693a      	ldr	r2, [r7, #16]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	699b      	ldr	r3, [r3, #24]
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	693a      	ldr	r2, [r7, #16]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	693a      	ldr	r2, [r7, #16]
 8006f88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	685a      	ldr	r2, [r3, #4]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	697a      	ldr	r2, [r7, #20]
 8006f9c:	621a      	str	r2, [r3, #32]
}
 8006f9e:	bf00      	nop
 8006fa0:	371c      	adds	r7, #28
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	40010000 	.word	0x40010000

08006fb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b087      	sub	sp, #28
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6a1b      	ldr	r3, [r3, #32]
 8006fbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a1b      	ldr	r3, [r3, #32]
 8006fca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	69db      	ldr	r3, [r3, #28]
 8006fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f023 0303 	bic.w	r3, r3, #3
 8006fe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ff8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	021b      	lsls	r3, r3, #8
 8007000:	697a      	ldr	r2, [r7, #20]
 8007002:	4313      	orrs	r3, r2
 8007004:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4a1d      	ldr	r2, [pc, #116]	; (8007080 <TIM_OC3_SetConfig+0xd0>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d10d      	bne.n	800702a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007014:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	021b      	lsls	r3, r3, #8
 800701c:	697a      	ldr	r2, [r7, #20]
 800701e:	4313      	orrs	r3, r2
 8007020:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007028:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a14      	ldr	r2, [pc, #80]	; (8007080 <TIM_OC3_SetConfig+0xd0>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d113      	bne.n	800705a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007038:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007040:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	695b      	ldr	r3, [r3, #20]
 8007046:	011b      	lsls	r3, r3, #4
 8007048:	693a      	ldr	r2, [r7, #16]
 800704a:	4313      	orrs	r3, r2
 800704c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	699b      	ldr	r3, [r3, #24]
 8007052:	011b      	lsls	r3, r3, #4
 8007054:	693a      	ldr	r2, [r7, #16]
 8007056:	4313      	orrs	r3, r2
 8007058:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	693a      	ldr	r2, [r7, #16]
 800705e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	685a      	ldr	r2, [r3, #4]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	697a      	ldr	r2, [r7, #20]
 8007072:	621a      	str	r2, [r3, #32]
}
 8007074:	bf00      	nop
 8007076:	371c      	adds	r7, #28
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr
 8007080:	40010000 	.word	0x40010000

08007084 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007084:	b480      	push	{r7}
 8007086:	b087      	sub	sp, #28
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a1b      	ldr	r3, [r3, #32]
 8007092:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a1b      	ldr	r3, [r3, #32]
 800709e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	69db      	ldr	r3, [r3, #28]
 80070aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	021b      	lsls	r3, r3, #8
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	031b      	lsls	r3, r3, #12
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	4313      	orrs	r3, r2
 80070da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a10      	ldr	r2, [pc, #64]	; (8007120 <TIM_OC4_SetConfig+0x9c>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d109      	bne.n	80070f8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	695b      	ldr	r3, [r3, #20]
 80070f0:	019b      	lsls	r3, r3, #6
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	697a      	ldr	r2, [r7, #20]
 80070fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	685a      	ldr	r2, [r3, #4]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	621a      	str	r2, [r3, #32]
}
 8007112:	bf00      	nop
 8007114:	371c      	adds	r7, #28
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	40010000 	.word	0x40010000

08007124 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007124:	b480      	push	{r7}
 8007126:	b087      	sub	sp, #28
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6a1b      	ldr	r3, [r3, #32]
 8007134:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6a1b      	ldr	r3, [r3, #32]
 800713a:	f023 0201 	bic.w	r2, r3, #1
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800714e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	011b      	lsls	r3, r3, #4
 8007154:	693a      	ldr	r2, [r7, #16]
 8007156:	4313      	orrs	r3, r2
 8007158:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	f023 030a 	bic.w	r3, r3, #10
 8007160:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007162:	697a      	ldr	r2, [r7, #20]
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	4313      	orrs	r3, r2
 8007168:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	693a      	ldr	r2, [r7, #16]
 800716e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	697a      	ldr	r2, [r7, #20]
 8007174:	621a      	str	r2, [r3, #32]
}
 8007176:	bf00      	nop
 8007178:	371c      	adds	r7, #28
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr

08007182 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007182:	b480      	push	{r7}
 8007184:	b087      	sub	sp, #28
 8007186:	af00      	add	r7, sp, #0
 8007188:	60f8      	str	r0, [r7, #12]
 800718a:	60b9      	str	r1, [r7, #8]
 800718c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6a1b      	ldr	r3, [r3, #32]
 8007192:	f023 0210 	bic.w	r2, r3, #16
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	699b      	ldr	r3, [r3, #24]
 800719e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6a1b      	ldr	r3, [r3, #32]
 80071a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80071ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	031b      	lsls	r3, r3, #12
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80071be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	011b      	lsls	r3, r3, #4
 80071c4:	693a      	ldr	r2, [r7, #16]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	697a      	ldr	r2, [r7, #20]
 80071ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	693a      	ldr	r2, [r7, #16]
 80071d4:	621a      	str	r2, [r3, #32]
}
 80071d6:	bf00      	nop
 80071d8:	371c      	adds	r7, #28
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr

080071e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80071e2:	b480      	push	{r7}
 80071e4:	b085      	sub	sp, #20
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
 80071ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071fa:	683a      	ldr	r2, [r7, #0]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	4313      	orrs	r3, r2
 8007200:	f043 0307 	orr.w	r3, r3, #7
 8007204:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	68fa      	ldr	r2, [r7, #12]
 800720a:	609a      	str	r2, [r3, #8]
}
 800720c:	bf00      	nop
 800720e:	3714      	adds	r7, #20
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr

08007218 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007218:	b480      	push	{r7}
 800721a:	b087      	sub	sp, #28
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	607a      	str	r2, [r7, #4]
 8007224:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007232:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	021a      	lsls	r2, r3, #8
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	431a      	orrs	r2, r3
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	4313      	orrs	r3, r2
 8007240:	697a      	ldr	r2, [r7, #20]
 8007242:	4313      	orrs	r3, r2
 8007244:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	697a      	ldr	r2, [r7, #20]
 800724a:	609a      	str	r2, [r3, #8]
}
 800724c:	bf00      	nop
 800724e:	371c      	adds	r7, #28
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007258:	b480      	push	{r7}
 800725a:	b087      	sub	sp, #28
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	f003 031f 	and.w	r3, r3, #31
 800726a:	2201      	movs	r2, #1
 800726c:	fa02 f303 	lsl.w	r3, r2, r3
 8007270:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6a1a      	ldr	r2, [r3, #32]
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	43db      	mvns	r3, r3
 800727a:	401a      	ands	r2, r3
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6a1a      	ldr	r2, [r3, #32]
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	f003 031f 	and.w	r3, r3, #31
 800728a:	6879      	ldr	r1, [r7, #4]
 800728c:	fa01 f303 	lsl.w	r3, r1, r3
 8007290:	431a      	orrs	r2, r3
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	621a      	str	r2, [r3, #32]
}
 8007296:	bf00      	nop
 8007298:	371c      	adds	r7, #28
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
	...

080072a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d101      	bne.n	80072bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072b8:	2302      	movs	r3, #2
 80072ba:	e050      	b.n	800735e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2202      	movs	r2, #2
 80072c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a1c      	ldr	r2, [pc, #112]	; (800736c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d018      	beq.n	8007332 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007308:	d013      	beq.n	8007332 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a18      	ldr	r2, [pc, #96]	; (8007370 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d00e      	beq.n	8007332 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a16      	ldr	r2, [pc, #88]	; (8007374 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d009      	beq.n	8007332 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a15      	ldr	r2, [pc, #84]	; (8007378 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d004      	beq.n	8007332 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a13      	ldr	r2, [pc, #76]	; (800737c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d10c      	bne.n	800734c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007338:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	68ba      	ldr	r2, [r7, #8]
 8007340:	4313      	orrs	r3, r2
 8007342:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3714      	adds	r7, #20
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	40010000 	.word	0x40010000
 8007370:	40000400 	.word	0x40000400
 8007374:	40000800 	.word	0x40000800
 8007378:	40000c00 	.word	0x40000c00
 800737c:	40014000 	.word	0x40014000

08007380 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800738a:	2300      	movs	r3, #0
 800738c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007394:	2b01      	cmp	r3, #1
 8007396:	d101      	bne.n	800739c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007398:	2302      	movs	r3, #2
 800739a:	e03d      	b.n	8007418 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	4313      	orrs	r3, r2
 80073be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4313      	orrs	r3, r2
 80073da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	695b      	ldr	r3, [r3, #20]
 80073f4:	4313      	orrs	r3, r2
 80073f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	69db      	ldr	r3, [r3, #28]
 8007402:	4313      	orrs	r3, r2
 8007404:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007416:	2300      	movs	r3, #0
}
 8007418:	4618      	mov	r0, r3
 800741a:	3714      	adds	r7, #20
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr

08007424 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800742c:	bf00      	nop
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007440:	bf00      	nop
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800744c:	b084      	sub	sp, #16
 800744e:	b580      	push	{r7, lr}
 8007450:	b084      	sub	sp, #16
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
 8007456:	f107 001c 	add.w	r0, r7, #28
 800745a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800745e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007460:	2b01      	cmp	r3, #1
 8007462:	d122      	bne.n	80074aa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007468:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007478:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800748c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800748e:	2b01      	cmp	r3, #1
 8007490:	d105      	bne.n	800749e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f001 fbee 	bl	8008c80 <USB_CoreReset>
 80074a4:	4603      	mov	r3, r0
 80074a6:	73fb      	strb	r3, [r7, #15]
 80074a8:	e01a      	b.n	80074e0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	68db      	ldr	r3, [r3, #12]
 80074ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f001 fbe2 	bl	8008c80 <USB_CoreReset>
 80074bc:	4603      	mov	r3, r0
 80074be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80074c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d106      	bne.n	80074d4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	639a      	str	r2, [r3, #56]	; 0x38
 80074d2:	e005      	b.n	80074e0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80074e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d10b      	bne.n	80074fe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	f043 0206 	orr.w	r2, r3, #6
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	f043 0220 	orr.w	r2, r3, #32
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80074fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007500:	4618      	mov	r0, r3
 8007502:	3710      	adds	r7, #16
 8007504:	46bd      	mov	sp, r7
 8007506:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800750a:	b004      	add	sp, #16
 800750c:	4770      	bx	lr
	...

08007510 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007510:	b480      	push	{r7}
 8007512:	b087      	sub	sp, #28
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	4613      	mov	r3, r2
 800751c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800751e:	79fb      	ldrb	r3, [r7, #7]
 8007520:	2b02      	cmp	r3, #2
 8007522:	d165      	bne.n	80075f0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	4a41      	ldr	r2, [pc, #260]	; (800762c <USB_SetTurnaroundTime+0x11c>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d906      	bls.n	800753a <USB_SetTurnaroundTime+0x2a>
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	4a40      	ldr	r2, [pc, #256]	; (8007630 <USB_SetTurnaroundTime+0x120>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d202      	bcs.n	800753a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007534:	230f      	movs	r3, #15
 8007536:	617b      	str	r3, [r7, #20]
 8007538:	e062      	b.n	8007600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	4a3c      	ldr	r2, [pc, #240]	; (8007630 <USB_SetTurnaroundTime+0x120>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d306      	bcc.n	8007550 <USB_SetTurnaroundTime+0x40>
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	4a3b      	ldr	r2, [pc, #236]	; (8007634 <USB_SetTurnaroundTime+0x124>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d202      	bcs.n	8007550 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800754a:	230e      	movs	r3, #14
 800754c:	617b      	str	r3, [r7, #20]
 800754e:	e057      	b.n	8007600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	4a38      	ldr	r2, [pc, #224]	; (8007634 <USB_SetTurnaroundTime+0x124>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d306      	bcc.n	8007566 <USB_SetTurnaroundTime+0x56>
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	4a37      	ldr	r2, [pc, #220]	; (8007638 <USB_SetTurnaroundTime+0x128>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d202      	bcs.n	8007566 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007560:	230d      	movs	r3, #13
 8007562:	617b      	str	r3, [r7, #20]
 8007564:	e04c      	b.n	8007600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	4a33      	ldr	r2, [pc, #204]	; (8007638 <USB_SetTurnaroundTime+0x128>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d306      	bcc.n	800757c <USB_SetTurnaroundTime+0x6c>
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	4a32      	ldr	r2, [pc, #200]	; (800763c <USB_SetTurnaroundTime+0x12c>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d802      	bhi.n	800757c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007576:	230c      	movs	r3, #12
 8007578:	617b      	str	r3, [r7, #20]
 800757a:	e041      	b.n	8007600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	4a2f      	ldr	r2, [pc, #188]	; (800763c <USB_SetTurnaroundTime+0x12c>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d906      	bls.n	8007592 <USB_SetTurnaroundTime+0x82>
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	4a2e      	ldr	r2, [pc, #184]	; (8007640 <USB_SetTurnaroundTime+0x130>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d802      	bhi.n	8007592 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800758c:	230b      	movs	r3, #11
 800758e:	617b      	str	r3, [r7, #20]
 8007590:	e036      	b.n	8007600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	4a2a      	ldr	r2, [pc, #168]	; (8007640 <USB_SetTurnaroundTime+0x130>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d906      	bls.n	80075a8 <USB_SetTurnaroundTime+0x98>
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	4a29      	ldr	r2, [pc, #164]	; (8007644 <USB_SetTurnaroundTime+0x134>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d802      	bhi.n	80075a8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80075a2:	230a      	movs	r3, #10
 80075a4:	617b      	str	r3, [r7, #20]
 80075a6:	e02b      	b.n	8007600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	4a26      	ldr	r2, [pc, #152]	; (8007644 <USB_SetTurnaroundTime+0x134>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d906      	bls.n	80075be <USB_SetTurnaroundTime+0xae>
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	4a25      	ldr	r2, [pc, #148]	; (8007648 <USB_SetTurnaroundTime+0x138>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d202      	bcs.n	80075be <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80075b8:	2309      	movs	r3, #9
 80075ba:	617b      	str	r3, [r7, #20]
 80075bc:	e020      	b.n	8007600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	4a21      	ldr	r2, [pc, #132]	; (8007648 <USB_SetTurnaroundTime+0x138>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d306      	bcc.n	80075d4 <USB_SetTurnaroundTime+0xc4>
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	4a20      	ldr	r2, [pc, #128]	; (800764c <USB_SetTurnaroundTime+0x13c>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d802      	bhi.n	80075d4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80075ce:	2308      	movs	r3, #8
 80075d0:	617b      	str	r3, [r7, #20]
 80075d2:	e015      	b.n	8007600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	4a1d      	ldr	r2, [pc, #116]	; (800764c <USB_SetTurnaroundTime+0x13c>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d906      	bls.n	80075ea <USB_SetTurnaroundTime+0xda>
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	4a1c      	ldr	r2, [pc, #112]	; (8007650 <USB_SetTurnaroundTime+0x140>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d202      	bcs.n	80075ea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80075e4:	2307      	movs	r3, #7
 80075e6:	617b      	str	r3, [r7, #20]
 80075e8:	e00a      	b.n	8007600 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80075ea:	2306      	movs	r3, #6
 80075ec:	617b      	str	r3, [r7, #20]
 80075ee:	e007      	b.n	8007600 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80075f0:	79fb      	ldrb	r3, [r7, #7]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d102      	bne.n	80075fc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80075f6:	2309      	movs	r3, #9
 80075f8:	617b      	str	r3, [r7, #20]
 80075fa:	e001      	b.n	8007600 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80075fc:	2309      	movs	r3, #9
 80075fe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	68da      	ldr	r2, [r3, #12]
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	029b      	lsls	r3, r3, #10
 8007614:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007618:	431a      	orrs	r2, r3
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	371c      	adds	r7, #28
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr
 800762c:	00d8acbf 	.word	0x00d8acbf
 8007630:	00e4e1c0 	.word	0x00e4e1c0
 8007634:	00f42400 	.word	0x00f42400
 8007638:	01067380 	.word	0x01067380
 800763c:	011a499f 	.word	0x011a499f
 8007640:	01312cff 	.word	0x01312cff
 8007644:	014ca43f 	.word	0x014ca43f
 8007648:	016e3600 	.word	0x016e3600
 800764c:	01a6ab1f 	.word	0x01a6ab1f
 8007650:	01e84800 	.word	0x01e84800

08007654 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	f043 0201 	orr.w	r2, r3, #1
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	370c      	adds	r7, #12
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr

08007676 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007676:	b480      	push	{r7}
 8007678:	b083      	sub	sp, #12
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	f023 0201 	bic.w	r2, r3, #1
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	370c      	adds	r7, #12
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	460b      	mov	r3, r1
 80076a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80076a4:	2300      	movs	r3, #0
 80076a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80076b4:	78fb      	ldrb	r3, [r7, #3]
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d115      	bne.n	80076e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80076c6:	2001      	movs	r0, #1
 80076c8:	f7fc faba 	bl	8003c40 <HAL_Delay>
      ms++;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	3301      	adds	r3, #1
 80076d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f001 fa45 	bl	8008b62 <USB_GetMode>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d01e      	beq.n	800771c <USB_SetCurrentMode+0x84>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2b31      	cmp	r3, #49	; 0x31
 80076e2:	d9f0      	bls.n	80076c6 <USB_SetCurrentMode+0x2e>
 80076e4:	e01a      	b.n	800771c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80076e6:	78fb      	ldrb	r3, [r7, #3]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d115      	bne.n	8007718 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80076f8:	2001      	movs	r0, #1
 80076fa:	f7fc faa1 	bl	8003c40 <HAL_Delay>
      ms++;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	3301      	adds	r3, #1
 8007702:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f001 fa2c 	bl	8008b62 <USB_GetMode>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d005      	beq.n	800771c <USB_SetCurrentMode+0x84>
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2b31      	cmp	r3, #49	; 0x31
 8007714:	d9f0      	bls.n	80076f8 <USB_SetCurrentMode+0x60>
 8007716:	e001      	b.n	800771c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007718:	2301      	movs	r3, #1
 800771a:	e005      	b.n	8007728 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2b32      	cmp	r3, #50	; 0x32
 8007720:	d101      	bne.n	8007726 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e000      	b.n	8007728 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007730:	b084      	sub	sp, #16
 8007732:	b580      	push	{r7, lr}
 8007734:	b086      	sub	sp, #24
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
 800773a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800773e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007742:	2300      	movs	r3, #0
 8007744:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800774a:	2300      	movs	r3, #0
 800774c:	613b      	str	r3, [r7, #16]
 800774e:	e009      	b.n	8007764 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	3340      	adds	r3, #64	; 0x40
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	4413      	add	r3, r2
 800775a:	2200      	movs	r2, #0
 800775c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	3301      	adds	r3, #1
 8007762:	613b      	str	r3, [r7, #16]
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	2b0e      	cmp	r3, #14
 8007768:	d9f2      	bls.n	8007750 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800776a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800776c:	2b00      	cmp	r3, #0
 800776e:	d11c      	bne.n	80077aa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800777e:	f043 0302 	orr.w	r3, r3, #2
 8007782:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007788:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007794:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	639a      	str	r2, [r3, #56]	; 0x38
 80077a8:	e00b      	b.n	80077c2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077c8:	461a      	mov	r2, r3
 80077ca:	2300      	movs	r3, #0
 80077cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077d4:	4619      	mov	r1, r3
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077dc:	461a      	mov	r2, r3
 80077de:	680b      	ldr	r3, [r1, #0]
 80077e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80077e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d10c      	bne.n	8007802 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80077e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d104      	bne.n	80077f8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80077ee:	2100      	movs	r1, #0
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 f965 	bl	8007ac0 <USB_SetDevSpeed>
 80077f6:	e008      	b.n	800780a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80077f8:	2101      	movs	r1, #1
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 f960 	bl	8007ac0 <USB_SetDevSpeed>
 8007800:	e003      	b.n	800780a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007802:	2103      	movs	r1, #3
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 f95b 	bl	8007ac0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800780a:	2110      	movs	r1, #16
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 f8f3 	bl	80079f8 <USB_FlushTxFifo>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d001      	beq.n	800781c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 f91f 	bl	8007a60 <USB_FlushRxFifo>
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d001      	beq.n	800782c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007832:	461a      	mov	r2, r3
 8007834:	2300      	movs	r3, #0
 8007836:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800783e:	461a      	mov	r2, r3
 8007840:	2300      	movs	r3, #0
 8007842:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800784a:	461a      	mov	r2, r3
 800784c:	2300      	movs	r3, #0
 800784e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007850:	2300      	movs	r3, #0
 8007852:	613b      	str	r3, [r7, #16]
 8007854:	e043      	b.n	80078de <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	015a      	lsls	r2, r3, #5
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	4413      	add	r3, r2
 800785e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007868:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800786c:	d118      	bne.n	80078a0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d10a      	bne.n	800788a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	015a      	lsls	r2, r3, #5
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	4413      	add	r3, r2
 800787c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007880:	461a      	mov	r2, r3
 8007882:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007886:	6013      	str	r3, [r2, #0]
 8007888:	e013      	b.n	80078b2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	015a      	lsls	r2, r3, #5
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	4413      	add	r3, r2
 8007892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007896:	461a      	mov	r2, r3
 8007898:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800789c:	6013      	str	r3, [r2, #0]
 800789e:	e008      	b.n	80078b2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	015a      	lsls	r2, r3, #5
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	4413      	add	r3, r2
 80078a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ac:	461a      	mov	r2, r3
 80078ae:	2300      	movs	r3, #0
 80078b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	015a      	lsls	r2, r3, #5
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	4413      	add	r3, r2
 80078ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078be:	461a      	mov	r2, r3
 80078c0:	2300      	movs	r3, #0
 80078c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	015a      	lsls	r2, r3, #5
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	4413      	add	r3, r2
 80078cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078d0:	461a      	mov	r2, r3
 80078d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80078d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	3301      	adds	r3, #1
 80078dc:	613b      	str	r3, [r7, #16]
 80078de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e0:	693a      	ldr	r2, [r7, #16]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d3b7      	bcc.n	8007856 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078e6:	2300      	movs	r3, #0
 80078e8:	613b      	str	r3, [r7, #16]
 80078ea:	e043      	b.n	8007974 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	015a      	lsls	r2, r3, #5
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	4413      	add	r3, r2
 80078f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007902:	d118      	bne.n	8007936 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d10a      	bne.n	8007920 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	015a      	lsls	r2, r3, #5
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	4413      	add	r3, r2
 8007912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007916:	461a      	mov	r2, r3
 8007918:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800791c:	6013      	str	r3, [r2, #0]
 800791e:	e013      	b.n	8007948 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	015a      	lsls	r2, r3, #5
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	4413      	add	r3, r2
 8007928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800792c:	461a      	mov	r2, r3
 800792e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007932:	6013      	str	r3, [r2, #0]
 8007934:	e008      	b.n	8007948 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	015a      	lsls	r2, r3, #5
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	4413      	add	r3, r2
 800793e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007942:	461a      	mov	r2, r3
 8007944:	2300      	movs	r3, #0
 8007946:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	015a      	lsls	r2, r3, #5
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	4413      	add	r3, r2
 8007950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007954:	461a      	mov	r2, r3
 8007956:	2300      	movs	r3, #0
 8007958:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	015a      	lsls	r2, r3, #5
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	4413      	add	r3, r2
 8007962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007966:	461a      	mov	r2, r3
 8007968:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800796c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	3301      	adds	r3, #1
 8007972:	613b      	str	r3, [r7, #16]
 8007974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007976:	693a      	ldr	r2, [r7, #16]
 8007978:	429a      	cmp	r2, r3
 800797a:	d3b7      	bcc.n	80078ec <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	68fa      	ldr	r2, [r7, #12]
 8007986:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800798a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800798e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800799c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800799e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d105      	bne.n	80079b0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	699b      	ldr	r3, [r3, #24]
 80079a8:	f043 0210 	orr.w	r2, r3, #16
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	699a      	ldr	r2, [r3, #24]
 80079b4:	4b0f      	ldr	r3, [pc, #60]	; (80079f4 <USB_DevInit+0x2c4>)
 80079b6:	4313      	orrs	r3, r2
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80079bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d005      	beq.n	80079ce <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	699b      	ldr	r3, [r3, #24]
 80079c6:	f043 0208 	orr.w	r2, r3, #8
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80079ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d107      	bne.n	80079e4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	699b      	ldr	r3, [r3, #24]
 80079d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80079dc:	f043 0304 	orr.w	r3, r3, #4
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80079e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3718      	adds	r7, #24
 80079ea:	46bd      	mov	sp, r7
 80079ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80079f0:	b004      	add	sp, #16
 80079f2:	4770      	bx	lr
 80079f4:	803c3800 	.word	0x803c3800

080079f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b085      	sub	sp, #20
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a02:	2300      	movs	r3, #0
 8007a04:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	4a13      	ldr	r2, [pc, #76]	; (8007a5c <USB_FlushTxFifo+0x64>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d901      	bls.n	8007a18 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007a14:	2303      	movs	r3, #3
 8007a16:	e01b      	b.n	8007a50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	691b      	ldr	r3, [r3, #16]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	daf2      	bge.n	8007a06 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007a20:	2300      	movs	r3, #0
 8007a22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	019b      	lsls	r3, r3, #6
 8007a28:	f043 0220 	orr.w	r2, r3, #32
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	3301      	adds	r3, #1
 8007a34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	4a08      	ldr	r2, [pc, #32]	; (8007a5c <USB_FlushTxFifo+0x64>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d901      	bls.n	8007a42 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007a3e:	2303      	movs	r3, #3
 8007a40:	e006      	b.n	8007a50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	f003 0320 	and.w	r3, r3, #32
 8007a4a:	2b20      	cmp	r3, #32
 8007a4c:	d0f0      	beq.n	8007a30 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3714      	adds	r7, #20
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr
 8007a5c:	00030d40 	.word	0x00030d40

08007a60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b085      	sub	sp, #20
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	4a11      	ldr	r2, [pc, #68]	; (8007abc <USB_FlushRxFifo+0x5c>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d901      	bls.n	8007a7e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007a7a:	2303      	movs	r3, #3
 8007a7c:	e018      	b.n	8007ab0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	daf2      	bge.n	8007a6c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007a86:	2300      	movs	r3, #0
 8007a88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2210      	movs	r2, #16
 8007a8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	3301      	adds	r3, #1
 8007a94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	4a08      	ldr	r2, [pc, #32]	; (8007abc <USB_FlushRxFifo+0x5c>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d901      	bls.n	8007aa2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007a9e:	2303      	movs	r3, #3
 8007aa0:	e006      	b.n	8007ab0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	f003 0310 	and.w	r3, r3, #16
 8007aaa:	2b10      	cmp	r3, #16
 8007aac:	d0f0      	beq.n	8007a90 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3714      	adds	r7, #20
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr
 8007abc:	00030d40 	.word	0x00030d40

08007ac0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b085      	sub	sp, #20
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	460b      	mov	r3, r1
 8007aca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	78fb      	ldrb	r3, [r7, #3]
 8007ada:	68f9      	ldr	r1, [r7, #12]
 8007adc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3714      	adds	r7, #20
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr

08007af2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007af2:	b480      	push	{r7}
 8007af4:	b087      	sub	sp, #28
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	f003 0306 	and.w	r3, r3, #6
 8007b0a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d102      	bne.n	8007b18 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007b12:	2300      	movs	r3, #0
 8007b14:	75fb      	strb	r3, [r7, #23]
 8007b16:	e00a      	b.n	8007b2e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2b02      	cmp	r3, #2
 8007b1c:	d002      	beq.n	8007b24 <USB_GetDevSpeed+0x32>
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2b06      	cmp	r3, #6
 8007b22:	d102      	bne.n	8007b2a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007b24:	2302      	movs	r3, #2
 8007b26:	75fb      	strb	r3, [r7, #23]
 8007b28:	e001      	b.n	8007b2e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007b2a:	230f      	movs	r3, #15
 8007b2c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007b2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	371c      	adds	r7, #28
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	785b      	ldrb	r3, [r3, #1]
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d13a      	bne.n	8007bce <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b5e:	69da      	ldr	r2, [r3, #28]
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	f003 030f 	and.w	r3, r3, #15
 8007b68:	2101      	movs	r1, #1
 8007b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	68f9      	ldr	r1, [r7, #12]
 8007b72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b76:	4313      	orrs	r3, r2
 8007b78:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	015a      	lsls	r2, r3, #5
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	4413      	add	r3, r2
 8007b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d155      	bne.n	8007c3c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	015a      	lsls	r2, r3, #5
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	4413      	add	r3, r2
 8007b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	791b      	ldrb	r3, [r3, #4]
 8007baa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007bac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	059b      	lsls	r3, r3, #22
 8007bb2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	68ba      	ldr	r2, [r7, #8]
 8007bb8:	0151      	lsls	r1, r2, #5
 8007bba:	68fa      	ldr	r2, [r7, #12]
 8007bbc:	440a      	add	r2, r1
 8007bbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bca:	6013      	str	r3, [r2, #0]
 8007bcc:	e036      	b.n	8007c3c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bd4:	69da      	ldr	r2, [r3, #28]
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	f003 030f 	and.w	r3, r3, #15
 8007bde:	2101      	movs	r1, #1
 8007be0:	fa01 f303 	lsl.w	r3, r1, r3
 8007be4:	041b      	lsls	r3, r3, #16
 8007be6:	68f9      	ldr	r1, [r7, #12]
 8007be8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bec:	4313      	orrs	r3, r2
 8007bee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	015a      	lsls	r2, r3, #5
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d11a      	bne.n	8007c3c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	015a      	lsls	r2, r3, #5
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	791b      	ldrb	r3, [r3, #4]
 8007c20:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007c22:	430b      	orrs	r3, r1
 8007c24:	4313      	orrs	r3, r2
 8007c26:	68ba      	ldr	r2, [r7, #8]
 8007c28:	0151      	lsls	r1, r2, #5
 8007c2a:	68fa      	ldr	r2, [r7, #12]
 8007c2c:	440a      	add	r2, r1
 8007c2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c3a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007c3c:	2300      	movs	r3, #0
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3714      	adds	r7, #20
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
	...

08007c4c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b085      	sub	sp, #20
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	785b      	ldrb	r3, [r3, #1]
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d161      	bne.n	8007d2c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	015a      	lsls	r2, r3, #5
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	4413      	add	r3, r2
 8007c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c7e:	d11f      	bne.n	8007cc0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	015a      	lsls	r2, r3, #5
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	4413      	add	r3, r2
 8007c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	68ba      	ldr	r2, [r7, #8]
 8007c90:	0151      	lsls	r1, r2, #5
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	440a      	add	r2, r1
 8007c96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007c9e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	015a      	lsls	r2, r3, #5
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	4413      	add	r3, r2
 8007ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68ba      	ldr	r2, [r7, #8]
 8007cb0:	0151      	lsls	r1, r2, #5
 8007cb2:	68fa      	ldr	r2, [r7, #12]
 8007cb4:	440a      	add	r2, r1
 8007cb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007cbe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	f003 030f 	and.w	r3, r3, #15
 8007cd0:	2101      	movs	r1, #1
 8007cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	43db      	mvns	r3, r3
 8007cda:	68f9      	ldr	r1, [r7, #12]
 8007cdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ce0:	4013      	ands	r3, r2
 8007ce2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cea:	69da      	ldr	r2, [r3, #28]
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	f003 030f 	and.w	r3, r3, #15
 8007cf4:	2101      	movs	r1, #1
 8007cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	43db      	mvns	r3, r3
 8007cfe:	68f9      	ldr	r1, [r7, #12]
 8007d00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d04:	4013      	ands	r3, r2
 8007d06:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	015a      	lsls	r2, r3, #5
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	4413      	add	r3, r2
 8007d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	0159      	lsls	r1, r3, #5
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	440b      	add	r3, r1
 8007d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d22:	4619      	mov	r1, r3
 8007d24:	4b35      	ldr	r3, [pc, #212]	; (8007dfc <USB_DeactivateEndpoint+0x1b0>)
 8007d26:	4013      	ands	r3, r2
 8007d28:	600b      	str	r3, [r1, #0]
 8007d2a:	e060      	b.n	8007dee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	015a      	lsls	r2, r3, #5
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	4413      	add	r3, r2
 8007d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d42:	d11f      	bne.n	8007d84 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	015a      	lsls	r2, r3, #5
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	68ba      	ldr	r2, [r7, #8]
 8007d54:	0151      	lsls	r1, r2, #5
 8007d56:	68fa      	ldr	r2, [r7, #12]
 8007d58:	440a      	add	r2, r1
 8007d5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007d62:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	015a      	lsls	r2, r3, #5
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	4413      	add	r3, r2
 8007d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	68ba      	ldr	r2, [r7, #8]
 8007d74:	0151      	lsls	r1, r2, #5
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	440a      	add	r2, r1
 8007d7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d82:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	f003 030f 	and.w	r3, r3, #15
 8007d94:	2101      	movs	r1, #1
 8007d96:	fa01 f303 	lsl.w	r3, r1, r3
 8007d9a:	041b      	lsls	r3, r3, #16
 8007d9c:	43db      	mvns	r3, r3
 8007d9e:	68f9      	ldr	r1, [r7, #12]
 8007da0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007da4:	4013      	ands	r3, r2
 8007da6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dae:	69da      	ldr	r2, [r3, #28]
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	f003 030f 	and.w	r3, r3, #15
 8007db8:	2101      	movs	r1, #1
 8007dba:	fa01 f303 	lsl.w	r3, r1, r3
 8007dbe:	041b      	lsls	r3, r3, #16
 8007dc0:	43db      	mvns	r3, r3
 8007dc2:	68f9      	ldr	r1, [r7, #12]
 8007dc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007dc8:	4013      	ands	r3, r2
 8007dca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	015a      	lsls	r2, r3, #5
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	4413      	add	r3, r2
 8007dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	0159      	lsls	r1, r3, #5
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	440b      	add	r3, r1
 8007de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007de6:	4619      	mov	r1, r3
 8007de8:	4b05      	ldr	r3, [pc, #20]	; (8007e00 <USB_DeactivateEndpoint+0x1b4>)
 8007dea:	4013      	ands	r3, r2
 8007dec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3714      	adds	r7, #20
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr
 8007dfc:	ec337800 	.word	0xec337800
 8007e00:	eff37800 	.word	0xeff37800

08007e04 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b08a      	sub	sp, #40	; 0x28
 8007e08:	af02      	add	r7, sp, #8
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	4613      	mov	r3, r2
 8007e10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	785b      	ldrb	r3, [r3, #1]
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	f040 815c 	bne.w	80080de <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	699b      	ldr	r3, [r3, #24]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d132      	bne.n	8007e94 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	015a      	lsls	r2, r3, #5
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	4413      	add	r3, r2
 8007e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e3a:	691b      	ldr	r3, [r3, #16]
 8007e3c:	69ba      	ldr	r2, [r7, #24]
 8007e3e:	0151      	lsls	r1, r2, #5
 8007e40:	69fa      	ldr	r2, [r7, #28]
 8007e42:	440a      	add	r2, r1
 8007e44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007e4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007e50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007e52:	69bb      	ldr	r3, [r7, #24]
 8007e54:	015a      	lsls	r2, r3, #5
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	4413      	add	r3, r2
 8007e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e5e:	691b      	ldr	r3, [r3, #16]
 8007e60:	69ba      	ldr	r2, [r7, #24]
 8007e62:	0151      	lsls	r1, r2, #5
 8007e64:	69fa      	ldr	r2, [r7, #28]
 8007e66:	440a      	add	r2, r1
 8007e68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	015a      	lsls	r2, r3, #5
 8007e76:	69fb      	ldr	r3, [r7, #28]
 8007e78:	4413      	add	r3, r2
 8007e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e7e:	691b      	ldr	r3, [r3, #16]
 8007e80:	69ba      	ldr	r2, [r7, #24]
 8007e82:	0151      	lsls	r1, r2, #5
 8007e84:	69fa      	ldr	r2, [r7, #28]
 8007e86:	440a      	add	r2, r1
 8007e88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e8c:	0cdb      	lsrs	r3, r3, #19
 8007e8e:	04db      	lsls	r3, r3, #19
 8007e90:	6113      	str	r3, [r2, #16]
 8007e92:	e074      	b.n	8007f7e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	015a      	lsls	r2, r3, #5
 8007e98:	69fb      	ldr	r3, [r7, #28]
 8007e9a:	4413      	add	r3, r2
 8007e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	69ba      	ldr	r2, [r7, #24]
 8007ea4:	0151      	lsls	r1, r2, #5
 8007ea6:	69fa      	ldr	r2, [r7, #28]
 8007ea8:	440a      	add	r2, r1
 8007eaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eae:	0cdb      	lsrs	r3, r3, #19
 8007eb0:	04db      	lsls	r3, r3, #19
 8007eb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	015a      	lsls	r2, r3, #5
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	4413      	add	r3, r2
 8007ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	69ba      	ldr	r2, [r7, #24]
 8007ec4:	0151      	lsls	r1, r2, #5
 8007ec6:	69fa      	ldr	r2, [r7, #28]
 8007ec8:	440a      	add	r2, r1
 8007eca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ece:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007ed2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007ed6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	015a      	lsls	r2, r3, #5
 8007edc:	69fb      	ldr	r3, [r7, #28]
 8007ede:	4413      	add	r3, r2
 8007ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ee4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	6999      	ldr	r1, [r3, #24]
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	440b      	add	r3, r1
 8007ef0:	1e59      	subs	r1, r3, #1
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	68db      	ldr	r3, [r3, #12]
 8007ef6:	fbb1 f3f3 	udiv	r3, r1, r3
 8007efa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007efc:	4b9d      	ldr	r3, [pc, #628]	; (8008174 <USB_EPStartXfer+0x370>)
 8007efe:	400b      	ands	r3, r1
 8007f00:	69b9      	ldr	r1, [r7, #24]
 8007f02:	0148      	lsls	r0, r1, #5
 8007f04:	69f9      	ldr	r1, [r7, #28]
 8007f06:	4401      	add	r1, r0
 8007f08:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	015a      	lsls	r2, r3, #5
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	4413      	add	r3, r2
 8007f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f1c:	691a      	ldr	r2, [r3, #16]
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	699b      	ldr	r3, [r3, #24]
 8007f22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f26:	69b9      	ldr	r1, [r7, #24]
 8007f28:	0148      	lsls	r0, r1, #5
 8007f2a:	69f9      	ldr	r1, [r7, #28]
 8007f2c:	4401      	add	r1, r0
 8007f2e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007f32:	4313      	orrs	r3, r2
 8007f34:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	791b      	ldrb	r3, [r3, #4]
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d11f      	bne.n	8007f7e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	015a      	lsls	r2, r3, #5
 8007f42:	69fb      	ldr	r3, [r7, #28]
 8007f44:	4413      	add	r3, r2
 8007f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	69ba      	ldr	r2, [r7, #24]
 8007f4e:	0151      	lsls	r1, r2, #5
 8007f50:	69fa      	ldr	r2, [r7, #28]
 8007f52:	440a      	add	r2, r1
 8007f54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f58:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007f5c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	015a      	lsls	r2, r3, #5
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	4413      	add	r3, r2
 8007f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	69ba      	ldr	r2, [r7, #24]
 8007f6e:	0151      	lsls	r1, r2, #5
 8007f70:	69fa      	ldr	r2, [r7, #28]
 8007f72:	440a      	add	r2, r1
 8007f74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007f7c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007f7e:	79fb      	ldrb	r3, [r7, #7]
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d14b      	bne.n	800801c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	695b      	ldr	r3, [r3, #20]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d009      	beq.n	8007fa0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	015a      	lsls	r2, r3, #5
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	4413      	add	r3, r2
 8007f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f98:	461a      	mov	r2, r3
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	695b      	ldr	r3, [r3, #20]
 8007f9e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	791b      	ldrb	r3, [r3, #4]
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d128      	bne.n	8007ffa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d110      	bne.n	8007fda <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	015a      	lsls	r2, r3, #5
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	69ba      	ldr	r2, [r7, #24]
 8007fc8:	0151      	lsls	r1, r2, #5
 8007fca:	69fa      	ldr	r2, [r7, #28]
 8007fcc:	440a      	add	r2, r1
 8007fce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fd2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007fd6:	6013      	str	r3, [r2, #0]
 8007fd8:	e00f      	b.n	8007ffa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	015a      	lsls	r2, r3, #5
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	69ba      	ldr	r2, [r7, #24]
 8007fea:	0151      	lsls	r1, r2, #5
 8007fec:	69fa      	ldr	r2, [r7, #28]
 8007fee:	440a      	add	r2, r1
 8007ff0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ff8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	015a      	lsls	r2, r3, #5
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	4413      	add	r3, r2
 8008002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	69ba      	ldr	r2, [r7, #24]
 800800a:	0151      	lsls	r1, r2, #5
 800800c:	69fa      	ldr	r2, [r7, #28]
 800800e:	440a      	add	r2, r1
 8008010:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008014:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008018:	6013      	str	r3, [r2, #0]
 800801a:	e133      	b.n	8008284 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800801c:	69bb      	ldr	r3, [r7, #24]
 800801e:	015a      	lsls	r2, r3, #5
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	4413      	add	r3, r2
 8008024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	69ba      	ldr	r2, [r7, #24]
 800802c:	0151      	lsls	r1, r2, #5
 800802e:	69fa      	ldr	r2, [r7, #28]
 8008030:	440a      	add	r2, r1
 8008032:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008036:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800803a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	791b      	ldrb	r3, [r3, #4]
 8008040:	2b01      	cmp	r3, #1
 8008042:	d015      	beq.n	8008070 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	699b      	ldr	r3, [r3, #24]
 8008048:	2b00      	cmp	r3, #0
 800804a:	f000 811b 	beq.w	8008284 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008054:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	f003 030f 	and.w	r3, r3, #15
 800805e:	2101      	movs	r1, #1
 8008060:	fa01 f303 	lsl.w	r3, r1, r3
 8008064:	69f9      	ldr	r1, [r7, #28]
 8008066:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800806a:	4313      	orrs	r3, r2
 800806c:	634b      	str	r3, [r1, #52]	; 0x34
 800806e:	e109      	b.n	8008284 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800807c:	2b00      	cmp	r3, #0
 800807e:	d110      	bne.n	80080a2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	015a      	lsls	r2, r3, #5
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	4413      	add	r3, r2
 8008088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	69ba      	ldr	r2, [r7, #24]
 8008090:	0151      	lsls	r1, r2, #5
 8008092:	69fa      	ldr	r2, [r7, #28]
 8008094:	440a      	add	r2, r1
 8008096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800809a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800809e:	6013      	str	r3, [r2, #0]
 80080a0:	e00f      	b.n	80080c2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	015a      	lsls	r2, r3, #5
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	4413      	add	r3, r2
 80080aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	69ba      	ldr	r2, [r7, #24]
 80080b2:	0151      	lsls	r1, r2, #5
 80080b4:	69fa      	ldr	r2, [r7, #28]
 80080b6:	440a      	add	r2, r1
 80080b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080c0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	6919      	ldr	r1, [r3, #16]
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	781a      	ldrb	r2, [r3, #0]
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	699b      	ldr	r3, [r3, #24]
 80080ce:	b298      	uxth	r0, r3
 80080d0:	79fb      	ldrb	r3, [r7, #7]
 80080d2:	9300      	str	r3, [sp, #0]
 80080d4:	4603      	mov	r3, r0
 80080d6:	68f8      	ldr	r0, [r7, #12]
 80080d8:	f000 fade 	bl	8008698 <USB_WritePacket>
 80080dc:	e0d2      	b.n	8008284 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	015a      	lsls	r2, r3, #5
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	4413      	add	r3, r2
 80080e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	69ba      	ldr	r2, [r7, #24]
 80080ee:	0151      	lsls	r1, r2, #5
 80080f0:	69fa      	ldr	r2, [r7, #28]
 80080f2:	440a      	add	r2, r1
 80080f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080f8:	0cdb      	lsrs	r3, r3, #19
 80080fa:	04db      	lsls	r3, r3, #19
 80080fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	015a      	lsls	r2, r3, #5
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	4413      	add	r3, r2
 8008106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800810a:	691b      	ldr	r3, [r3, #16]
 800810c:	69ba      	ldr	r2, [r7, #24]
 800810e:	0151      	lsls	r1, r2, #5
 8008110:	69fa      	ldr	r2, [r7, #28]
 8008112:	440a      	add	r2, r1
 8008114:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008118:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800811c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008120:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	699b      	ldr	r3, [r3, #24]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d126      	bne.n	8008178 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	015a      	lsls	r2, r3, #5
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	4413      	add	r3, r2
 8008132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008136:	691a      	ldr	r2, [r3, #16]
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008140:	69b9      	ldr	r1, [r7, #24]
 8008142:	0148      	lsls	r0, r1, #5
 8008144:	69f9      	ldr	r1, [r7, #28]
 8008146:	4401      	add	r1, r0
 8008148:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800814c:	4313      	orrs	r3, r2
 800814e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008150:	69bb      	ldr	r3, [r7, #24]
 8008152:	015a      	lsls	r2, r3, #5
 8008154:	69fb      	ldr	r3, [r7, #28]
 8008156:	4413      	add	r3, r2
 8008158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800815c:	691b      	ldr	r3, [r3, #16]
 800815e:	69ba      	ldr	r2, [r7, #24]
 8008160:	0151      	lsls	r1, r2, #5
 8008162:	69fa      	ldr	r2, [r7, #28]
 8008164:	440a      	add	r2, r1
 8008166:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800816a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800816e:	6113      	str	r3, [r2, #16]
 8008170:	e03a      	b.n	80081e8 <USB_EPStartXfer+0x3e4>
 8008172:	bf00      	nop
 8008174:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	699a      	ldr	r2, [r3, #24]
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	4413      	add	r3, r2
 8008182:	1e5a      	subs	r2, r3, #1
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	68db      	ldr	r3, [r3, #12]
 8008188:	fbb2 f3f3 	udiv	r3, r2, r3
 800818c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	8afa      	ldrh	r2, [r7, #22]
 8008194:	fb03 f202 	mul.w	r2, r3, r2
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800819c:	69bb      	ldr	r3, [r7, #24]
 800819e:	015a      	lsls	r2, r3, #5
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	4413      	add	r3, r2
 80081a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081a8:	691a      	ldr	r2, [r3, #16]
 80081aa:	8afb      	ldrh	r3, [r7, #22]
 80081ac:	04d9      	lsls	r1, r3, #19
 80081ae:	4b38      	ldr	r3, [pc, #224]	; (8008290 <USB_EPStartXfer+0x48c>)
 80081b0:	400b      	ands	r3, r1
 80081b2:	69b9      	ldr	r1, [r7, #24]
 80081b4:	0148      	lsls	r0, r1, #5
 80081b6:	69f9      	ldr	r1, [r7, #28]
 80081b8:	4401      	add	r1, r0
 80081ba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80081be:	4313      	orrs	r3, r2
 80081c0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80081c2:	69bb      	ldr	r3, [r7, #24]
 80081c4:	015a      	lsls	r2, r3, #5
 80081c6:	69fb      	ldr	r3, [r7, #28]
 80081c8:	4413      	add	r3, r2
 80081ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ce:	691a      	ldr	r2, [r3, #16]
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	69db      	ldr	r3, [r3, #28]
 80081d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081d8:	69b9      	ldr	r1, [r7, #24]
 80081da:	0148      	lsls	r0, r1, #5
 80081dc:	69f9      	ldr	r1, [r7, #28]
 80081de:	4401      	add	r1, r0
 80081e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80081e4:	4313      	orrs	r3, r2
 80081e6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80081e8:	79fb      	ldrb	r3, [r7, #7]
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d10d      	bne.n	800820a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d009      	beq.n	800820a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	6919      	ldr	r1, [r3, #16]
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	015a      	lsls	r2, r3, #5
 80081fe:	69fb      	ldr	r3, [r7, #28]
 8008200:	4413      	add	r3, r2
 8008202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008206:	460a      	mov	r2, r1
 8008208:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	791b      	ldrb	r3, [r3, #4]
 800820e:	2b01      	cmp	r3, #1
 8008210:	d128      	bne.n	8008264 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800821e:	2b00      	cmp	r3, #0
 8008220:	d110      	bne.n	8008244 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008222:	69bb      	ldr	r3, [r7, #24]
 8008224:	015a      	lsls	r2, r3, #5
 8008226:	69fb      	ldr	r3, [r7, #28]
 8008228:	4413      	add	r3, r2
 800822a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	69ba      	ldr	r2, [r7, #24]
 8008232:	0151      	lsls	r1, r2, #5
 8008234:	69fa      	ldr	r2, [r7, #28]
 8008236:	440a      	add	r2, r1
 8008238:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800823c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008240:	6013      	str	r3, [r2, #0]
 8008242:	e00f      	b.n	8008264 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	015a      	lsls	r2, r3, #5
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	4413      	add	r3, r2
 800824c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	69ba      	ldr	r2, [r7, #24]
 8008254:	0151      	lsls	r1, r2, #5
 8008256:	69fa      	ldr	r2, [r7, #28]
 8008258:	440a      	add	r2, r1
 800825a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800825e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008262:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	015a      	lsls	r2, r3, #5
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	4413      	add	r3, r2
 800826c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	69ba      	ldr	r2, [r7, #24]
 8008274:	0151      	lsls	r1, r2, #5
 8008276:	69fa      	ldr	r2, [r7, #28]
 8008278:	440a      	add	r2, r1
 800827a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800827e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008282:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008284:	2300      	movs	r3, #0
}
 8008286:	4618      	mov	r0, r3
 8008288:	3720      	adds	r7, #32
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	1ff80000 	.word	0x1ff80000

08008294 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008294:	b480      	push	{r7}
 8008296:	b087      	sub	sp, #28
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	4613      	mov	r3, r2
 80082a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	785b      	ldrb	r3, [r3, #1]
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	f040 80ce 	bne.w	8008452 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	699b      	ldr	r3, [r3, #24]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d132      	bne.n	8008324 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	015a      	lsls	r2, r3, #5
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	4413      	add	r3, r2
 80082c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082ca:	691b      	ldr	r3, [r3, #16]
 80082cc:	693a      	ldr	r2, [r7, #16]
 80082ce:	0151      	lsls	r1, r2, #5
 80082d0:	697a      	ldr	r2, [r7, #20]
 80082d2:	440a      	add	r2, r1
 80082d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80082dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80082e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	015a      	lsls	r2, r3, #5
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	4413      	add	r3, r2
 80082ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082ee:	691b      	ldr	r3, [r3, #16]
 80082f0:	693a      	ldr	r2, [r7, #16]
 80082f2:	0151      	lsls	r1, r2, #5
 80082f4:	697a      	ldr	r2, [r7, #20]
 80082f6:	440a      	add	r2, r1
 80082f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008300:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	015a      	lsls	r2, r3, #5
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	4413      	add	r3, r2
 800830a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800830e:	691b      	ldr	r3, [r3, #16]
 8008310:	693a      	ldr	r2, [r7, #16]
 8008312:	0151      	lsls	r1, r2, #5
 8008314:	697a      	ldr	r2, [r7, #20]
 8008316:	440a      	add	r2, r1
 8008318:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800831c:	0cdb      	lsrs	r3, r3, #19
 800831e:	04db      	lsls	r3, r3, #19
 8008320:	6113      	str	r3, [r2, #16]
 8008322:	e04e      	b.n	80083c2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	015a      	lsls	r2, r3, #5
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	4413      	add	r3, r2
 800832c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	693a      	ldr	r2, [r7, #16]
 8008334:	0151      	lsls	r1, r2, #5
 8008336:	697a      	ldr	r2, [r7, #20]
 8008338:	440a      	add	r2, r1
 800833a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800833e:	0cdb      	lsrs	r3, r3, #19
 8008340:	04db      	lsls	r3, r3, #19
 8008342:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	015a      	lsls	r2, r3, #5
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	4413      	add	r3, r2
 800834c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	693a      	ldr	r2, [r7, #16]
 8008354:	0151      	lsls	r1, r2, #5
 8008356:	697a      	ldr	r2, [r7, #20]
 8008358:	440a      	add	r2, r1
 800835a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800835e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008362:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008366:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	699a      	ldr	r2, [r3, #24]
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	429a      	cmp	r2, r3
 8008372:	d903      	bls.n	800837c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	68da      	ldr	r2, [r3, #12]
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	015a      	lsls	r2, r3, #5
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	4413      	add	r3, r2
 8008384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	693a      	ldr	r2, [r7, #16]
 800838c:	0151      	lsls	r1, r2, #5
 800838e:	697a      	ldr	r2, [r7, #20]
 8008390:	440a      	add	r2, r1
 8008392:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008396:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800839a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	015a      	lsls	r2, r3, #5
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	4413      	add	r3, r2
 80083a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083a8:	691a      	ldr	r2, [r3, #16]
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	699b      	ldr	r3, [r3, #24]
 80083ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083b2:	6939      	ldr	r1, [r7, #16]
 80083b4:	0148      	lsls	r0, r1, #5
 80083b6:	6979      	ldr	r1, [r7, #20]
 80083b8:	4401      	add	r1, r0
 80083ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80083be:	4313      	orrs	r3, r2
 80083c0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80083c2:	79fb      	ldrb	r3, [r7, #7]
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d11e      	bne.n	8008406 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	695b      	ldr	r3, [r3, #20]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d009      	beq.n	80083e4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	015a      	lsls	r2, r3, #5
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	4413      	add	r3, r2
 80083d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083dc:	461a      	mov	r2, r3
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	695b      	ldr	r3, [r3, #20]
 80083e2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	015a      	lsls	r2, r3, #5
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	4413      	add	r3, r2
 80083ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	693a      	ldr	r2, [r7, #16]
 80083f4:	0151      	lsls	r1, r2, #5
 80083f6:	697a      	ldr	r2, [r7, #20]
 80083f8:	440a      	add	r2, r1
 80083fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008402:	6013      	str	r3, [r2, #0]
 8008404:	e097      	b.n	8008536 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	015a      	lsls	r2, r3, #5
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	4413      	add	r3, r2
 800840e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	693a      	ldr	r2, [r7, #16]
 8008416:	0151      	lsls	r1, r2, #5
 8008418:	697a      	ldr	r2, [r7, #20]
 800841a:	440a      	add	r2, r1
 800841c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008420:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008424:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	699b      	ldr	r3, [r3, #24]
 800842a:	2b00      	cmp	r3, #0
 800842c:	f000 8083 	beq.w	8008536 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008436:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	f003 030f 	and.w	r3, r3, #15
 8008440:	2101      	movs	r1, #1
 8008442:	fa01 f303 	lsl.w	r3, r1, r3
 8008446:	6979      	ldr	r1, [r7, #20]
 8008448:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800844c:	4313      	orrs	r3, r2
 800844e:	634b      	str	r3, [r1, #52]	; 0x34
 8008450:	e071      	b.n	8008536 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	015a      	lsls	r2, r3, #5
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	4413      	add	r3, r2
 800845a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800845e:	691b      	ldr	r3, [r3, #16]
 8008460:	693a      	ldr	r2, [r7, #16]
 8008462:	0151      	lsls	r1, r2, #5
 8008464:	697a      	ldr	r2, [r7, #20]
 8008466:	440a      	add	r2, r1
 8008468:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800846c:	0cdb      	lsrs	r3, r3, #19
 800846e:	04db      	lsls	r3, r3, #19
 8008470:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	015a      	lsls	r2, r3, #5
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	4413      	add	r3, r2
 800847a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800847e:	691b      	ldr	r3, [r3, #16]
 8008480:	693a      	ldr	r2, [r7, #16]
 8008482:	0151      	lsls	r1, r2, #5
 8008484:	697a      	ldr	r2, [r7, #20]
 8008486:	440a      	add	r2, r1
 8008488:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800848c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008490:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008494:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	699b      	ldr	r3, [r3, #24]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d003      	beq.n	80084a6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	68da      	ldr	r2, [r3, #12]
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	68da      	ldr	r2, [r3, #12]
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	015a      	lsls	r2, r3, #5
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	4413      	add	r3, r2
 80084b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084ba:	691b      	ldr	r3, [r3, #16]
 80084bc:	693a      	ldr	r2, [r7, #16]
 80084be:	0151      	lsls	r1, r2, #5
 80084c0:	697a      	ldr	r2, [r7, #20]
 80084c2:	440a      	add	r2, r1
 80084c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80084cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	015a      	lsls	r2, r3, #5
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	4413      	add	r3, r2
 80084d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084da:	691a      	ldr	r2, [r3, #16]
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	69db      	ldr	r3, [r3, #28]
 80084e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084e4:	6939      	ldr	r1, [r7, #16]
 80084e6:	0148      	lsls	r0, r1, #5
 80084e8:	6979      	ldr	r1, [r7, #20]
 80084ea:	4401      	add	r1, r0
 80084ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80084f0:	4313      	orrs	r3, r2
 80084f2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80084f4:	79fb      	ldrb	r3, [r7, #7]
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d10d      	bne.n	8008516 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	691b      	ldr	r3, [r3, #16]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d009      	beq.n	8008516 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	6919      	ldr	r1, [r3, #16]
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	015a      	lsls	r2, r3, #5
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	4413      	add	r3, r2
 800850e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008512:	460a      	mov	r2, r1
 8008514:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	015a      	lsls	r2, r3, #5
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	4413      	add	r3, r2
 800851e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	693a      	ldr	r2, [r7, #16]
 8008526:	0151      	lsls	r1, r2, #5
 8008528:	697a      	ldr	r2, [r7, #20]
 800852a:	440a      	add	r2, r1
 800852c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008530:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008534:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008536:	2300      	movs	r3, #0
}
 8008538:	4618      	mov	r0, r3
 800853a:	371c      	adds	r7, #28
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008544:	b480      	push	{r7}
 8008546:	b087      	sub	sp, #28
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800854e:	2300      	movs	r3, #0
 8008550:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008552:	2300      	movs	r3, #0
 8008554:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	785b      	ldrb	r3, [r3, #1]
 800855e:	2b01      	cmp	r3, #1
 8008560:	d14a      	bne.n	80085f8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	015a      	lsls	r2, r3, #5
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	4413      	add	r3, r2
 800856c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008576:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800857a:	f040 8086 	bne.w	800868a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	015a      	lsls	r2, r3, #5
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	4413      	add	r3, r2
 8008588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	683a      	ldr	r2, [r7, #0]
 8008590:	7812      	ldrb	r2, [r2, #0]
 8008592:	0151      	lsls	r1, r2, #5
 8008594:	693a      	ldr	r2, [r7, #16]
 8008596:	440a      	add	r2, r1
 8008598:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800859c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80085a0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	015a      	lsls	r2, r3, #5
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	4413      	add	r3, r2
 80085ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	683a      	ldr	r2, [r7, #0]
 80085b4:	7812      	ldrb	r2, [r2, #0]
 80085b6:	0151      	lsls	r1, r2, #5
 80085b8:	693a      	ldr	r2, [r7, #16]
 80085ba:	440a      	add	r2, r1
 80085bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	3301      	adds	r3, #1
 80085ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d902      	bls.n	80085dc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80085d6:	2301      	movs	r3, #1
 80085d8:	75fb      	strb	r3, [r7, #23]
          break;
 80085da:	e056      	b.n	800868a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	015a      	lsls	r2, r3, #5
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	4413      	add	r3, r2
 80085e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085f4:	d0e7      	beq.n	80085c6 <USB_EPStopXfer+0x82>
 80085f6:	e048      	b.n	800868a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	015a      	lsls	r2, r3, #5
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	4413      	add	r3, r2
 8008602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800860c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008610:	d13b      	bne.n	800868a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	015a      	lsls	r2, r3, #5
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	4413      	add	r3, r2
 800861c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	683a      	ldr	r2, [r7, #0]
 8008624:	7812      	ldrb	r2, [r2, #0]
 8008626:	0151      	lsls	r1, r2, #5
 8008628:	693a      	ldr	r2, [r7, #16]
 800862a:	440a      	add	r2, r1
 800862c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008630:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008634:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	015a      	lsls	r2, r3, #5
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	4413      	add	r3, r2
 8008640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	683a      	ldr	r2, [r7, #0]
 8008648:	7812      	ldrb	r2, [r2, #0]
 800864a:	0151      	lsls	r1, r2, #5
 800864c:	693a      	ldr	r2, [r7, #16]
 800864e:	440a      	add	r2, r1
 8008650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008654:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008658:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	3301      	adds	r3, #1
 800865e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f242 7210 	movw	r2, #10000	; 0x2710
 8008666:	4293      	cmp	r3, r2
 8008668:	d902      	bls.n	8008670 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	75fb      	strb	r3, [r7, #23]
          break;
 800866e:	e00c      	b.n	800868a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	015a      	lsls	r2, r3, #5
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	4413      	add	r3, r2
 800867a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008684:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008688:	d0e7      	beq.n	800865a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800868a:	7dfb      	ldrb	r3, [r7, #23]
}
 800868c:	4618      	mov	r0, r3
 800868e:	371c      	adds	r7, #28
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008698:	b480      	push	{r7}
 800869a:	b089      	sub	sp, #36	; 0x24
 800869c:	af00      	add	r7, sp, #0
 800869e:	60f8      	str	r0, [r7, #12]
 80086a0:	60b9      	str	r1, [r7, #8]
 80086a2:	4611      	mov	r1, r2
 80086a4:	461a      	mov	r2, r3
 80086a6:	460b      	mov	r3, r1
 80086a8:	71fb      	strb	r3, [r7, #7]
 80086aa:	4613      	mov	r3, r2
 80086ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80086b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d123      	bne.n	8008706 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80086be:	88bb      	ldrh	r3, [r7, #4]
 80086c0:	3303      	adds	r3, #3
 80086c2:	089b      	lsrs	r3, r3, #2
 80086c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80086c6:	2300      	movs	r3, #0
 80086c8:	61bb      	str	r3, [r7, #24]
 80086ca:	e018      	b.n	80086fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80086cc:	79fb      	ldrb	r3, [r7, #7]
 80086ce:	031a      	lsls	r2, r3, #12
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	4413      	add	r3, r2
 80086d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086d8:	461a      	mov	r2, r3
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	6013      	str	r3, [r2, #0]
      pSrc++;
 80086e0:	69fb      	ldr	r3, [r7, #28]
 80086e2:	3301      	adds	r3, #1
 80086e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80086e6:	69fb      	ldr	r3, [r7, #28]
 80086e8:	3301      	adds	r3, #1
 80086ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	3301      	adds	r3, #1
 80086f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80086f2:	69fb      	ldr	r3, [r7, #28]
 80086f4:	3301      	adds	r3, #1
 80086f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80086f8:	69bb      	ldr	r3, [r7, #24]
 80086fa:	3301      	adds	r3, #1
 80086fc:	61bb      	str	r3, [r7, #24]
 80086fe:	69ba      	ldr	r2, [r7, #24]
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	429a      	cmp	r2, r3
 8008704:	d3e2      	bcc.n	80086cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008706:	2300      	movs	r3, #0
}
 8008708:	4618      	mov	r0, r3
 800870a:	3724      	adds	r7, #36	; 0x24
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008714:	b480      	push	{r7}
 8008716:	b08b      	sub	sp, #44	; 0x2c
 8008718:	af00      	add	r7, sp, #0
 800871a:	60f8      	str	r0, [r7, #12]
 800871c:	60b9      	str	r1, [r7, #8]
 800871e:	4613      	mov	r3, r2
 8008720:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800872a:	88fb      	ldrh	r3, [r7, #6]
 800872c:	089b      	lsrs	r3, r3, #2
 800872e:	b29b      	uxth	r3, r3
 8008730:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008732:	88fb      	ldrh	r3, [r7, #6]
 8008734:	f003 0303 	and.w	r3, r3, #3
 8008738:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800873a:	2300      	movs	r3, #0
 800873c:	623b      	str	r3, [r7, #32]
 800873e:	e014      	b.n	800876a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008740:	69bb      	ldr	r3, [r7, #24]
 8008742:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874a:	601a      	str	r2, [r3, #0]
    pDest++;
 800874c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874e:	3301      	adds	r3, #1
 8008750:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008754:	3301      	adds	r3, #1
 8008756:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875a:	3301      	adds	r3, #1
 800875c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800875e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008760:	3301      	adds	r3, #1
 8008762:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008764:	6a3b      	ldr	r3, [r7, #32]
 8008766:	3301      	adds	r3, #1
 8008768:	623b      	str	r3, [r7, #32]
 800876a:	6a3a      	ldr	r2, [r7, #32]
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	429a      	cmp	r2, r3
 8008770:	d3e6      	bcc.n	8008740 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008772:	8bfb      	ldrh	r3, [r7, #30]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d01e      	beq.n	80087b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008778:	2300      	movs	r3, #0
 800877a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800877c:	69bb      	ldr	r3, [r7, #24]
 800877e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008782:	461a      	mov	r2, r3
 8008784:	f107 0310 	add.w	r3, r7, #16
 8008788:	6812      	ldr	r2, [r2, #0]
 800878a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800878c:	693a      	ldr	r2, [r7, #16]
 800878e:	6a3b      	ldr	r3, [r7, #32]
 8008790:	b2db      	uxtb	r3, r3
 8008792:	00db      	lsls	r3, r3, #3
 8008794:	fa22 f303 	lsr.w	r3, r2, r3
 8008798:	b2da      	uxtb	r2, r3
 800879a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879c:	701a      	strb	r2, [r3, #0]
      i++;
 800879e:	6a3b      	ldr	r3, [r7, #32]
 80087a0:	3301      	adds	r3, #1
 80087a2:	623b      	str	r3, [r7, #32]
      pDest++;
 80087a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a6:	3301      	adds	r3, #1
 80087a8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80087aa:	8bfb      	ldrh	r3, [r7, #30]
 80087ac:	3b01      	subs	r3, #1
 80087ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80087b0:	8bfb      	ldrh	r3, [r7, #30]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d1ea      	bne.n	800878c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80087b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	372c      	adds	r7, #44	; 0x2c
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	785b      	ldrb	r3, [r3, #1]
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d12c      	bne.n	800883a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	015a      	lsls	r2, r3, #5
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	4413      	add	r3, r2
 80087e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	db12      	blt.n	8008818 <USB_EPSetStall+0x54>
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d00f      	beq.n	8008818 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	015a      	lsls	r2, r3, #5
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	4413      	add	r3, r2
 8008800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	68ba      	ldr	r2, [r7, #8]
 8008808:	0151      	lsls	r1, r2, #5
 800880a:	68fa      	ldr	r2, [r7, #12]
 800880c:	440a      	add	r2, r1
 800880e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008812:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008816:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	015a      	lsls	r2, r3, #5
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	4413      	add	r3, r2
 8008820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	68ba      	ldr	r2, [r7, #8]
 8008828:	0151      	lsls	r1, r2, #5
 800882a:	68fa      	ldr	r2, [r7, #12]
 800882c:	440a      	add	r2, r1
 800882e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008832:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008836:	6013      	str	r3, [r2, #0]
 8008838:	e02b      	b.n	8008892 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	015a      	lsls	r2, r3, #5
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	4413      	add	r3, r2
 8008842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2b00      	cmp	r3, #0
 800884a:	db12      	blt.n	8008872 <USB_EPSetStall+0xae>
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d00f      	beq.n	8008872 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	015a      	lsls	r2, r3, #5
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	4413      	add	r3, r2
 800885a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	68ba      	ldr	r2, [r7, #8]
 8008862:	0151      	lsls	r1, r2, #5
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	440a      	add	r2, r1
 8008868:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800886c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008870:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	015a      	lsls	r2, r3, #5
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	4413      	add	r3, r2
 800887a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	68ba      	ldr	r2, [r7, #8]
 8008882:	0151      	lsls	r1, r2, #5
 8008884:	68fa      	ldr	r2, [r7, #12]
 8008886:	440a      	add	r2, r1
 8008888:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800888c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008890:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008892:	2300      	movs	r3, #0
}
 8008894:	4618      	mov	r0, r3
 8008896:	3714      	adds	r7, #20
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b085      	sub	sp, #20
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	785b      	ldrb	r3, [r3, #1]
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d128      	bne.n	800890e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	015a      	lsls	r2, r3, #5
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	4413      	add	r3, r2
 80088c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	68ba      	ldr	r2, [r7, #8]
 80088cc:	0151      	lsls	r1, r2, #5
 80088ce:	68fa      	ldr	r2, [r7, #12]
 80088d0:	440a      	add	r2, r1
 80088d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80088da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	791b      	ldrb	r3, [r3, #4]
 80088e0:	2b03      	cmp	r3, #3
 80088e2:	d003      	beq.n	80088ec <USB_EPClearStall+0x4c>
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	791b      	ldrb	r3, [r3, #4]
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	d138      	bne.n	800895e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	015a      	lsls	r2, r3, #5
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	4413      	add	r3, r2
 80088f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	68ba      	ldr	r2, [r7, #8]
 80088fc:	0151      	lsls	r1, r2, #5
 80088fe:	68fa      	ldr	r2, [r7, #12]
 8008900:	440a      	add	r2, r1
 8008902:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800890a:	6013      	str	r3, [r2, #0]
 800890c:	e027      	b.n	800895e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	015a      	lsls	r2, r3, #5
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	4413      	add	r3, r2
 8008916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	68ba      	ldr	r2, [r7, #8]
 800891e:	0151      	lsls	r1, r2, #5
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	440a      	add	r2, r1
 8008924:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008928:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800892c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	791b      	ldrb	r3, [r3, #4]
 8008932:	2b03      	cmp	r3, #3
 8008934:	d003      	beq.n	800893e <USB_EPClearStall+0x9e>
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	791b      	ldrb	r3, [r3, #4]
 800893a:	2b02      	cmp	r3, #2
 800893c:	d10f      	bne.n	800895e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	015a      	lsls	r2, r3, #5
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	4413      	add	r3, r2
 8008946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	68ba      	ldr	r2, [r7, #8]
 800894e:	0151      	lsls	r1, r2, #5
 8008950:	68fa      	ldr	r2, [r7, #12]
 8008952:	440a      	add	r2, r1
 8008954:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800895c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800895e:	2300      	movs	r3, #0
}
 8008960:	4618      	mov	r0, r3
 8008962:	3714      	adds	r7, #20
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr

0800896c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800896c:	b480      	push	{r7}
 800896e:	b085      	sub	sp, #20
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	460b      	mov	r3, r1
 8008976:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	68fa      	ldr	r2, [r7, #12]
 8008986:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800898a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800898e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	78fb      	ldrb	r3, [r7, #3]
 800899a:	011b      	lsls	r3, r3, #4
 800899c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80089a0:	68f9      	ldr	r1, [r7, #12]
 80089a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089a6:	4313      	orrs	r3, r2
 80089a8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3714      	adds	r7, #20
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr

080089b8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b085      	sub	sp, #20
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	68fa      	ldr	r2, [r7, #12]
 80089ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80089d2:	f023 0303 	bic.w	r3, r3, #3
 80089d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	68fa      	ldr	r2, [r7, #12]
 80089e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089e6:	f023 0302 	bic.w	r3, r3, #2
 80089ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80089ec:	2300      	movs	r3, #0
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3714      	adds	r7, #20
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr

080089fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80089fa:	b480      	push	{r7}
 80089fc:	b085      	sub	sp, #20
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	68fa      	ldr	r2, [r7, #12]
 8008a10:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a14:	f023 0303 	bic.w	r3, r3, #3
 8008a18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a28:	f043 0302 	orr.w	r3, r3, #2
 8008a2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008a2e:	2300      	movs	r3, #0
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3714      	adds	r7, #20
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b085      	sub	sp, #20
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	695b      	ldr	r3, [r3, #20]
 8008a48:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	699b      	ldr	r3, [r3, #24]
 8008a4e:	68fa      	ldr	r2, [r7, #12]
 8008a50:	4013      	ands	r3, r2
 8008a52:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008a54:	68fb      	ldr	r3, [r7, #12]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3714      	adds	r7, #20
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr

08008a62 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a62:	b480      	push	{r7}
 8008a64:	b085      	sub	sp, #20
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a74:	699b      	ldr	r3, [r3, #24]
 8008a76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a7e:	69db      	ldr	r3, [r3, #28]
 8008a80:	68ba      	ldr	r2, [r7, #8]
 8008a82:	4013      	ands	r3, r2
 8008a84:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	0c1b      	lsrs	r3, r3, #16
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3714      	adds	r7, #20
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr

08008a96 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a96:	b480      	push	{r7}
 8008a98:	b085      	sub	sp, #20
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aa8:	699b      	ldr	r3, [r3, #24]
 8008aaa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ab2:	69db      	ldr	r3, [r3, #28]
 8008ab4:	68ba      	ldr	r2, [r7, #8]
 8008ab6:	4013      	ands	r3, r2
 8008ab8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	b29b      	uxth	r3, r3
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3714      	adds	r7, #20
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr

08008aca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008aca:	b480      	push	{r7}
 8008acc:	b085      	sub	sp, #20
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008ada:	78fb      	ldrb	r3, [r7, #3]
 8008adc:	015a      	lsls	r2, r3, #5
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	4413      	add	r3, r2
 8008ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008af0:	695b      	ldr	r3, [r3, #20]
 8008af2:	68ba      	ldr	r2, [r7, #8]
 8008af4:	4013      	ands	r3, r2
 8008af6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008af8:	68bb      	ldr	r3, [r7, #8]
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3714      	adds	r7, #20
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr

08008b06 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008b06:	b480      	push	{r7}
 8008b08:	b087      	sub	sp, #28
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
 8008b0e:	460b      	mov	r3, r1
 8008b10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b1c:	691b      	ldr	r3, [r3, #16]
 8008b1e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b28:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008b2a:	78fb      	ldrb	r3, [r7, #3]
 8008b2c:	f003 030f 	and.w	r3, r3, #15
 8008b30:	68fa      	ldr	r2, [r7, #12]
 8008b32:	fa22 f303 	lsr.w	r3, r2, r3
 8008b36:	01db      	lsls	r3, r3, #7
 8008b38:	b2db      	uxtb	r3, r3
 8008b3a:	693a      	ldr	r2, [r7, #16]
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008b40:	78fb      	ldrb	r3, [r7, #3]
 8008b42:	015a      	lsls	r2, r3, #5
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	4413      	add	r3, r2
 8008b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	693a      	ldr	r2, [r7, #16]
 8008b50:	4013      	ands	r3, r2
 8008b52:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008b54:	68bb      	ldr	r3, [r7, #8]
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	371c      	adds	r7, #28
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr

08008b62 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008b62:	b480      	push	{r7}
 8008b64:	b083      	sub	sp, #12
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	695b      	ldr	r3, [r3, #20]
 8008b6e:	f003 0301 	and.w	r3, r3, #1
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	370c      	adds	r7, #12
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr

08008b7e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008b7e:	b480      	push	{r7}
 8008b80:	b085      	sub	sp, #20
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	68fa      	ldr	r2, [r7, #12]
 8008b94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b98:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008b9c:	f023 0307 	bic.w	r3, r3, #7
 8008ba0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	68fa      	ldr	r2, [r7, #12]
 8008bac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bb4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008bb6:	2300      	movs	r3, #0
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3714      	adds	r7, #20
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b087      	sub	sp, #28
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	60f8      	str	r0, [r7, #12]
 8008bcc:	460b      	mov	r3, r1
 8008bce:	607a      	str	r2, [r7, #4]
 8008bd0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	333c      	adds	r3, #60	; 0x3c
 8008bda:	3304      	adds	r3, #4
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	4a26      	ldr	r2, [pc, #152]	; (8008c7c <USB_EP0_OutStart+0xb8>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d90a      	bls.n	8008bfe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008bf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008bf8:	d101      	bne.n	8008bfe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	e037      	b.n	8008c6e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c04:	461a      	mov	r2, r3
 8008c06:	2300      	movs	r3, #0
 8008c08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c10:	691b      	ldr	r3, [r3, #16]
 8008c12:	697a      	ldr	r2, [r7, #20]
 8008c14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c24:	691b      	ldr	r3, [r3, #16]
 8008c26:	697a      	ldr	r2, [r7, #20]
 8008c28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c2c:	f043 0318 	orr.w	r3, r3, #24
 8008c30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c38:	691b      	ldr	r3, [r3, #16]
 8008c3a:	697a      	ldr	r2, [r7, #20]
 8008c3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c40:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008c44:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008c46:	7afb      	ldrb	r3, [r7, #11]
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d10f      	bne.n	8008c6c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c52:	461a      	mov	r2, r3
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	697a      	ldr	r2, [r7, #20]
 8008c62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c66:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008c6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c6c:	2300      	movs	r3, #0
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	371c      	adds	r7, #28
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr
 8008c7a:	bf00      	nop
 8008c7c:	4f54300a 	.word	0x4f54300a

08008c80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b085      	sub	sp, #20
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	3301      	adds	r3, #1
 8008c90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	4a13      	ldr	r2, [pc, #76]	; (8008ce4 <USB_CoreReset+0x64>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d901      	bls.n	8008c9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008c9a:	2303      	movs	r3, #3
 8008c9c:	e01b      	b.n	8008cd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	691b      	ldr	r3, [r3, #16]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	daf2      	bge.n	8008c8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	691b      	ldr	r3, [r3, #16]
 8008cae:	f043 0201 	orr.w	r2, r3, #1
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	3301      	adds	r3, #1
 8008cba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	4a09      	ldr	r2, [pc, #36]	; (8008ce4 <USB_CoreReset+0x64>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d901      	bls.n	8008cc8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008cc4:	2303      	movs	r3, #3
 8008cc6:	e006      	b.n	8008cd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	691b      	ldr	r3, [r3, #16]
 8008ccc:	f003 0301 	and.w	r3, r3, #1
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d0f0      	beq.n	8008cb6 <USB_CoreReset+0x36>

  return HAL_OK;
 8008cd4:	2300      	movs	r3, #0
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3714      	adds	r7, #20
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr
 8008ce2:	bf00      	nop
 8008ce4:	00030d40 	.word	0x00030d40

08008ce8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008cf4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008cf8:	f002 fca4 	bl	800b644 <USBD_static_malloc>
 8008cfc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d109      	bne.n	8008d18 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	32b0      	adds	r2, #176	; 0xb0
 8008d0e:	2100      	movs	r1, #0
 8008d10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008d14:	2302      	movs	r3, #2
 8008d16:	e0d4      	b.n	8008ec2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008d18:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008d1c:	2100      	movs	r1, #0
 8008d1e:	68f8      	ldr	r0, [r7, #12]
 8008d20:	f002 fefc 	bl	800bb1c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	32b0      	adds	r2, #176	; 0xb0
 8008d2e:	68f9      	ldr	r1, [r7, #12]
 8008d30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	32b0      	adds	r2, #176	; 0xb0
 8008d3e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	7c1b      	ldrb	r3, [r3, #16]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d138      	bne.n	8008dc2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008d50:	4b5e      	ldr	r3, [pc, #376]	; (8008ecc <USBD_CDC_Init+0x1e4>)
 8008d52:	7819      	ldrb	r1, [r3, #0]
 8008d54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d58:	2202      	movs	r2, #2
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f002 fb4f 	bl	800b3fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008d60:	4b5a      	ldr	r3, [pc, #360]	; (8008ecc <USBD_CDC_Init+0x1e4>)
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	f003 020f 	and.w	r2, r3, #15
 8008d68:	6879      	ldr	r1, [r7, #4]
 8008d6a:	4613      	mov	r3, r2
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	4413      	add	r3, r2
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	440b      	add	r3, r1
 8008d74:	3324      	adds	r3, #36	; 0x24
 8008d76:	2201      	movs	r2, #1
 8008d78:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008d7a:	4b55      	ldr	r3, [pc, #340]	; (8008ed0 <USBD_CDC_Init+0x1e8>)
 8008d7c:	7819      	ldrb	r1, [r3, #0]
 8008d7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d82:	2202      	movs	r2, #2
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f002 fb3a 	bl	800b3fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008d8a:	4b51      	ldr	r3, [pc, #324]	; (8008ed0 <USBD_CDC_Init+0x1e8>)
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	f003 020f 	and.w	r2, r3, #15
 8008d92:	6879      	ldr	r1, [r7, #4]
 8008d94:	4613      	mov	r3, r2
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	4413      	add	r3, r2
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	440b      	add	r3, r1
 8008d9e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008da2:	2201      	movs	r2, #1
 8008da4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008da6:	4b4b      	ldr	r3, [pc, #300]	; (8008ed4 <USBD_CDC_Init+0x1ec>)
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	f003 020f 	and.w	r2, r3, #15
 8008dae:	6879      	ldr	r1, [r7, #4]
 8008db0:	4613      	mov	r3, r2
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	4413      	add	r3, r2
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	440b      	add	r3, r1
 8008dba:	3326      	adds	r3, #38	; 0x26
 8008dbc:	2210      	movs	r2, #16
 8008dbe:	801a      	strh	r2, [r3, #0]
 8008dc0:	e035      	b.n	8008e2e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008dc2:	4b42      	ldr	r3, [pc, #264]	; (8008ecc <USBD_CDC_Init+0x1e4>)
 8008dc4:	7819      	ldrb	r1, [r3, #0]
 8008dc6:	2340      	movs	r3, #64	; 0x40
 8008dc8:	2202      	movs	r2, #2
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f002 fb17 	bl	800b3fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008dd0:	4b3e      	ldr	r3, [pc, #248]	; (8008ecc <USBD_CDC_Init+0x1e4>)
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	f003 020f 	and.w	r2, r3, #15
 8008dd8:	6879      	ldr	r1, [r7, #4]
 8008dda:	4613      	mov	r3, r2
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	4413      	add	r3, r2
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	440b      	add	r3, r1
 8008de4:	3324      	adds	r3, #36	; 0x24
 8008de6:	2201      	movs	r2, #1
 8008de8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008dea:	4b39      	ldr	r3, [pc, #228]	; (8008ed0 <USBD_CDC_Init+0x1e8>)
 8008dec:	7819      	ldrb	r1, [r3, #0]
 8008dee:	2340      	movs	r3, #64	; 0x40
 8008df0:	2202      	movs	r2, #2
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f002 fb03 	bl	800b3fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008df8:	4b35      	ldr	r3, [pc, #212]	; (8008ed0 <USBD_CDC_Init+0x1e8>)
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	f003 020f 	and.w	r2, r3, #15
 8008e00:	6879      	ldr	r1, [r7, #4]
 8008e02:	4613      	mov	r3, r2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	4413      	add	r3, r2
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	440b      	add	r3, r1
 8008e0c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008e10:	2201      	movs	r2, #1
 8008e12:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008e14:	4b2f      	ldr	r3, [pc, #188]	; (8008ed4 <USBD_CDC_Init+0x1ec>)
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	f003 020f 	and.w	r2, r3, #15
 8008e1c:	6879      	ldr	r1, [r7, #4]
 8008e1e:	4613      	mov	r3, r2
 8008e20:	009b      	lsls	r3, r3, #2
 8008e22:	4413      	add	r3, r2
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	440b      	add	r3, r1
 8008e28:	3326      	adds	r3, #38	; 0x26
 8008e2a:	2210      	movs	r2, #16
 8008e2c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008e2e:	4b29      	ldr	r3, [pc, #164]	; (8008ed4 <USBD_CDC_Init+0x1ec>)
 8008e30:	7819      	ldrb	r1, [r3, #0]
 8008e32:	2308      	movs	r3, #8
 8008e34:	2203      	movs	r2, #3
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f002 fae1 	bl	800b3fe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008e3c:	4b25      	ldr	r3, [pc, #148]	; (8008ed4 <USBD_CDC_Init+0x1ec>)
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	f003 020f 	and.w	r2, r3, #15
 8008e44:	6879      	ldr	r1, [r7, #4]
 8008e46:	4613      	mov	r3, r2
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	4413      	add	r3, r2
 8008e4c:	009b      	lsls	r3, r3, #2
 8008e4e:	440b      	add	r3, r1
 8008e50:	3324      	adds	r3, #36	; 0x24
 8008e52:	2201      	movs	r2, #1
 8008e54:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	33b0      	adds	r3, #176	; 0xb0
 8008e68:	009b      	lsls	r3, r3, #2
 8008e6a:	4413      	add	r3, r2
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2200      	movs	r2, #0
 8008e76:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d101      	bne.n	8008e90 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008e8c:	2302      	movs	r3, #2
 8008e8e:	e018      	b.n	8008ec2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	7c1b      	ldrb	r3, [r3, #16]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d10a      	bne.n	8008eae <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008e98:	4b0d      	ldr	r3, [pc, #52]	; (8008ed0 <USBD_CDC_Init+0x1e8>)
 8008e9a:	7819      	ldrb	r1, [r3, #0]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008ea2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f002 fb98 	bl	800b5dc <USBD_LL_PrepareReceive>
 8008eac:	e008      	b.n	8008ec0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008eae:	4b08      	ldr	r3, [pc, #32]	; (8008ed0 <USBD_CDC_Init+0x1e8>)
 8008eb0:	7819      	ldrb	r1, [r3, #0]
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008eb8:	2340      	movs	r3, #64	; 0x40
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f002 fb8e 	bl	800b5dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008ec0:	2300      	movs	r3, #0
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3710      	adds	r7, #16
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
 8008eca:	bf00      	nop
 8008ecc:	20000093 	.word	0x20000093
 8008ed0:	20000094 	.word	0x20000094
 8008ed4:	20000095 	.word	0x20000095

08008ed8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008ee4:	4b3a      	ldr	r3, [pc, #232]	; (8008fd0 <USBD_CDC_DeInit+0xf8>)
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	4619      	mov	r1, r3
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f002 faad 	bl	800b44a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008ef0:	4b37      	ldr	r3, [pc, #220]	; (8008fd0 <USBD_CDC_DeInit+0xf8>)
 8008ef2:	781b      	ldrb	r3, [r3, #0]
 8008ef4:	f003 020f 	and.w	r2, r3, #15
 8008ef8:	6879      	ldr	r1, [r7, #4]
 8008efa:	4613      	mov	r3, r2
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	4413      	add	r3, r2
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	440b      	add	r3, r1
 8008f04:	3324      	adds	r3, #36	; 0x24
 8008f06:	2200      	movs	r2, #0
 8008f08:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008f0a:	4b32      	ldr	r3, [pc, #200]	; (8008fd4 <USBD_CDC_DeInit+0xfc>)
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	4619      	mov	r1, r3
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f002 fa9a 	bl	800b44a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008f16:	4b2f      	ldr	r3, [pc, #188]	; (8008fd4 <USBD_CDC_DeInit+0xfc>)
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	f003 020f 	and.w	r2, r3, #15
 8008f1e:	6879      	ldr	r1, [r7, #4]
 8008f20:	4613      	mov	r3, r2
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	4413      	add	r3, r2
 8008f26:	009b      	lsls	r3, r3, #2
 8008f28:	440b      	add	r3, r1
 8008f2a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008f2e:	2200      	movs	r2, #0
 8008f30:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008f32:	4b29      	ldr	r3, [pc, #164]	; (8008fd8 <USBD_CDC_DeInit+0x100>)
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	4619      	mov	r1, r3
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f002 fa86 	bl	800b44a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008f3e:	4b26      	ldr	r3, [pc, #152]	; (8008fd8 <USBD_CDC_DeInit+0x100>)
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	f003 020f 	and.w	r2, r3, #15
 8008f46:	6879      	ldr	r1, [r7, #4]
 8008f48:	4613      	mov	r3, r2
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	4413      	add	r3, r2
 8008f4e:	009b      	lsls	r3, r3, #2
 8008f50:	440b      	add	r3, r1
 8008f52:	3324      	adds	r3, #36	; 0x24
 8008f54:	2200      	movs	r2, #0
 8008f56:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008f58:	4b1f      	ldr	r3, [pc, #124]	; (8008fd8 <USBD_CDC_DeInit+0x100>)
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	f003 020f 	and.w	r2, r3, #15
 8008f60:	6879      	ldr	r1, [r7, #4]
 8008f62:	4613      	mov	r3, r2
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	4413      	add	r3, r2
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	440b      	add	r3, r1
 8008f6c:	3326      	adds	r3, #38	; 0x26
 8008f6e:	2200      	movs	r2, #0
 8008f70:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	32b0      	adds	r2, #176	; 0xb0
 8008f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d01f      	beq.n	8008fc4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f8a:	687a      	ldr	r2, [r7, #4]
 8008f8c:	33b0      	adds	r3, #176	; 0xb0
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	4413      	add	r3, r2
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	32b0      	adds	r2, #176	; 0xb0
 8008fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f002 fb5a 	bl	800b660 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	32b0      	adds	r2, #176	; 0xb0
 8008fb6:	2100      	movs	r1, #0
 8008fb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3708      	adds	r7, #8
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	20000093 	.word	0x20000093
 8008fd4:	20000094 	.word	0x20000094
 8008fd8:	20000095 	.word	0x20000095

08008fdc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b086      	sub	sp, #24
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	32b0      	adds	r2, #176	; 0xb0
 8008ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ff4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ffe:	2300      	movs	r3, #0
 8009000:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d101      	bne.n	800900c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009008:	2303      	movs	r3, #3
 800900a:	e0bf      	b.n	800918c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009014:	2b00      	cmp	r3, #0
 8009016:	d050      	beq.n	80090ba <USBD_CDC_Setup+0xde>
 8009018:	2b20      	cmp	r3, #32
 800901a:	f040 80af 	bne.w	800917c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	88db      	ldrh	r3, [r3, #6]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d03a      	beq.n	800909c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	b25b      	sxtb	r3, r3
 800902c:	2b00      	cmp	r3, #0
 800902e:	da1b      	bge.n	8009068 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	33b0      	adds	r3, #176	; 0xb0
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	4413      	add	r3, r2
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	689b      	ldr	r3, [r3, #8]
 8009042:	683a      	ldr	r2, [r7, #0]
 8009044:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009046:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009048:	683a      	ldr	r2, [r7, #0]
 800904a:	88d2      	ldrh	r2, [r2, #6]
 800904c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	88db      	ldrh	r3, [r3, #6]
 8009052:	2b07      	cmp	r3, #7
 8009054:	bf28      	it	cs
 8009056:	2307      	movcs	r3, #7
 8009058:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	89fa      	ldrh	r2, [r7, #14]
 800905e:	4619      	mov	r1, r3
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f001 fd89 	bl	800ab78 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009066:	e090      	b.n	800918a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	785a      	ldrb	r2, [r3, #1]
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	88db      	ldrh	r3, [r3, #6]
 8009076:	2b3f      	cmp	r3, #63	; 0x3f
 8009078:	d803      	bhi.n	8009082 <USBD_CDC_Setup+0xa6>
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	88db      	ldrh	r3, [r3, #6]
 800907e:	b2da      	uxtb	r2, r3
 8009080:	e000      	b.n	8009084 <USBD_CDC_Setup+0xa8>
 8009082:	2240      	movs	r2, #64	; 0x40
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800908a:	6939      	ldr	r1, [r7, #16]
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009092:	461a      	mov	r2, r3
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f001 fd9b 	bl	800abd0 <USBD_CtlPrepareRx>
      break;
 800909a:	e076      	b.n	800918a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	33b0      	adds	r3, #176	; 0xb0
 80090a6:	009b      	lsls	r3, r3, #2
 80090a8:	4413      	add	r3, r2
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	683a      	ldr	r2, [r7, #0]
 80090b0:	7850      	ldrb	r0, [r2, #1]
 80090b2:	2200      	movs	r2, #0
 80090b4:	6839      	ldr	r1, [r7, #0]
 80090b6:	4798      	blx	r3
      break;
 80090b8:	e067      	b.n	800918a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	785b      	ldrb	r3, [r3, #1]
 80090be:	2b0b      	cmp	r3, #11
 80090c0:	d851      	bhi.n	8009166 <USBD_CDC_Setup+0x18a>
 80090c2:	a201      	add	r2, pc, #4	; (adr r2, 80090c8 <USBD_CDC_Setup+0xec>)
 80090c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c8:	080090f9 	.word	0x080090f9
 80090cc:	08009175 	.word	0x08009175
 80090d0:	08009167 	.word	0x08009167
 80090d4:	08009167 	.word	0x08009167
 80090d8:	08009167 	.word	0x08009167
 80090dc:	08009167 	.word	0x08009167
 80090e0:	08009167 	.word	0x08009167
 80090e4:	08009167 	.word	0x08009167
 80090e8:	08009167 	.word	0x08009167
 80090ec:	08009167 	.word	0x08009167
 80090f0:	08009123 	.word	0x08009123
 80090f4:	0800914d 	.word	0x0800914d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	2b03      	cmp	r3, #3
 8009102:	d107      	bne.n	8009114 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009104:	f107 030a 	add.w	r3, r7, #10
 8009108:	2202      	movs	r2, #2
 800910a:	4619      	mov	r1, r3
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f001 fd33 	bl	800ab78 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009112:	e032      	b.n	800917a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009114:	6839      	ldr	r1, [r7, #0]
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f001 fcbd 	bl	800aa96 <USBD_CtlError>
            ret = USBD_FAIL;
 800911c:	2303      	movs	r3, #3
 800911e:	75fb      	strb	r3, [r7, #23]
          break;
 8009120:	e02b      	b.n	800917a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009128:	b2db      	uxtb	r3, r3
 800912a:	2b03      	cmp	r3, #3
 800912c:	d107      	bne.n	800913e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800912e:	f107 030d 	add.w	r3, r7, #13
 8009132:	2201      	movs	r2, #1
 8009134:	4619      	mov	r1, r3
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f001 fd1e 	bl	800ab78 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800913c:	e01d      	b.n	800917a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800913e:	6839      	ldr	r1, [r7, #0]
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f001 fca8 	bl	800aa96 <USBD_CtlError>
            ret = USBD_FAIL;
 8009146:	2303      	movs	r3, #3
 8009148:	75fb      	strb	r3, [r7, #23]
          break;
 800914a:	e016      	b.n	800917a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009152:	b2db      	uxtb	r3, r3
 8009154:	2b03      	cmp	r3, #3
 8009156:	d00f      	beq.n	8009178 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009158:	6839      	ldr	r1, [r7, #0]
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f001 fc9b 	bl	800aa96 <USBD_CtlError>
            ret = USBD_FAIL;
 8009160:	2303      	movs	r3, #3
 8009162:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009164:	e008      	b.n	8009178 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009166:	6839      	ldr	r1, [r7, #0]
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f001 fc94 	bl	800aa96 <USBD_CtlError>
          ret = USBD_FAIL;
 800916e:	2303      	movs	r3, #3
 8009170:	75fb      	strb	r3, [r7, #23]
          break;
 8009172:	e002      	b.n	800917a <USBD_CDC_Setup+0x19e>
          break;
 8009174:	bf00      	nop
 8009176:	e008      	b.n	800918a <USBD_CDC_Setup+0x1ae>
          break;
 8009178:	bf00      	nop
      }
      break;
 800917a:	e006      	b.n	800918a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800917c:	6839      	ldr	r1, [r7, #0]
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f001 fc89 	bl	800aa96 <USBD_CtlError>
      ret = USBD_FAIL;
 8009184:	2303      	movs	r3, #3
 8009186:	75fb      	strb	r3, [r7, #23]
      break;
 8009188:	bf00      	nop
  }

  return (uint8_t)ret;
 800918a:	7dfb      	ldrb	r3, [r7, #23]
}
 800918c:	4618      	mov	r0, r3
 800918e:	3718      	adds	r7, #24
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	460b      	mov	r3, r1
 800919e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80091a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	32b0      	adds	r2, #176	; 0xb0
 80091b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d101      	bne.n	80091be <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80091ba:	2303      	movs	r3, #3
 80091bc:	e065      	b.n	800928a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	32b0      	adds	r2, #176	; 0xb0
 80091c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091cc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80091ce:	78fb      	ldrb	r3, [r7, #3]
 80091d0:	f003 020f 	and.w	r2, r3, #15
 80091d4:	6879      	ldr	r1, [r7, #4]
 80091d6:	4613      	mov	r3, r2
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	4413      	add	r3, r2
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	440b      	add	r3, r1
 80091e0:	3318      	adds	r3, #24
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d02f      	beq.n	8009248 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80091e8:	78fb      	ldrb	r3, [r7, #3]
 80091ea:	f003 020f 	and.w	r2, r3, #15
 80091ee:	6879      	ldr	r1, [r7, #4]
 80091f0:	4613      	mov	r3, r2
 80091f2:	009b      	lsls	r3, r3, #2
 80091f4:	4413      	add	r3, r2
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	440b      	add	r3, r1
 80091fa:	3318      	adds	r3, #24
 80091fc:	681a      	ldr	r2, [r3, #0]
 80091fe:	78fb      	ldrb	r3, [r7, #3]
 8009200:	f003 010f 	and.w	r1, r3, #15
 8009204:	68f8      	ldr	r0, [r7, #12]
 8009206:	460b      	mov	r3, r1
 8009208:	00db      	lsls	r3, r3, #3
 800920a:	440b      	add	r3, r1
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	4403      	add	r3, r0
 8009210:	3348      	adds	r3, #72	; 0x48
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	fbb2 f1f3 	udiv	r1, r2, r3
 8009218:	fb01 f303 	mul.w	r3, r1, r3
 800921c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800921e:	2b00      	cmp	r3, #0
 8009220:	d112      	bne.n	8009248 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009222:	78fb      	ldrb	r3, [r7, #3]
 8009224:	f003 020f 	and.w	r2, r3, #15
 8009228:	6879      	ldr	r1, [r7, #4]
 800922a:	4613      	mov	r3, r2
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	4413      	add	r3, r2
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	440b      	add	r3, r1
 8009234:	3318      	adds	r3, #24
 8009236:	2200      	movs	r2, #0
 8009238:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800923a:	78f9      	ldrb	r1, [r7, #3]
 800923c:	2300      	movs	r3, #0
 800923e:	2200      	movs	r2, #0
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f002 f9aa 	bl	800b59a <USBD_LL_Transmit>
 8009246:	e01f      	b.n	8009288 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	2200      	movs	r2, #0
 800924c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	33b0      	adds	r3, #176	; 0xb0
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	4413      	add	r3, r2
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	691b      	ldr	r3, [r3, #16]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d010      	beq.n	8009288 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800926c:	687a      	ldr	r2, [r7, #4]
 800926e:	33b0      	adds	r3, #176	; 0xb0
 8009270:	009b      	lsls	r3, r3, #2
 8009272:	4413      	add	r3, r2
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	691b      	ldr	r3, [r3, #16]
 8009278:	68ba      	ldr	r2, [r7, #8]
 800927a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800927e:	68ba      	ldr	r2, [r7, #8]
 8009280:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009284:	78fa      	ldrb	r2, [r7, #3]
 8009286:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009288:	2300      	movs	r3, #0
}
 800928a:	4618      	mov	r0, r3
 800928c:	3710      	adds	r7, #16
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}

08009292 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009292:	b580      	push	{r7, lr}
 8009294:	b084      	sub	sp, #16
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
 800929a:	460b      	mov	r3, r1
 800929c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	32b0      	adds	r2, #176	; 0xb0
 80092a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	32b0      	adds	r2, #176	; 0xb0
 80092b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d101      	bne.n	80092c4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80092c0:	2303      	movs	r3, #3
 80092c2:	e01a      	b.n	80092fa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80092c4:	78fb      	ldrb	r3, [r7, #3]
 80092c6:	4619      	mov	r1, r3
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f002 f9a8 	bl	800b61e <USBD_LL_GetRxDataSize>
 80092ce:	4602      	mov	r2, r0
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	33b0      	adds	r3, #176	; 0xb0
 80092e0:	009b      	lsls	r3, r3, #2
 80092e2:	4413      	add	r3, r2
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	68db      	ldr	r3, [r3, #12]
 80092e8:	68fa      	ldr	r2, [r7, #12]
 80092ea:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80092ee:	68fa      	ldr	r2, [r7, #12]
 80092f0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80092f4:	4611      	mov	r1, r2
 80092f6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3710      	adds	r7, #16
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009302:	b580      	push	{r7, lr}
 8009304:	b084      	sub	sp, #16
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	32b0      	adds	r2, #176	; 0xb0
 8009314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009318:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d101      	bne.n	8009324 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009320:	2303      	movs	r3, #3
 8009322:	e025      	b.n	8009370 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	33b0      	adds	r3, #176	; 0xb0
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	4413      	add	r3, r2
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d01a      	beq.n	800936e <USBD_CDC_EP0_RxReady+0x6c>
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800933e:	2bff      	cmp	r3, #255	; 0xff
 8009340:	d015      	beq.n	800936e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	33b0      	adds	r3, #176	; 0xb0
 800934c:	009b      	lsls	r3, r3, #2
 800934e:	4413      	add	r3, r2
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	689b      	ldr	r3, [r3, #8]
 8009354:	68fa      	ldr	r2, [r7, #12]
 8009356:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800935a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800935c:	68fa      	ldr	r2, [r7, #12]
 800935e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009362:	b292      	uxth	r2, r2
 8009364:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	22ff      	movs	r2, #255	; 0xff
 800936a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800936e:	2300      	movs	r3, #0
}
 8009370:	4618      	mov	r0, r3
 8009372:	3710      	adds	r7, #16
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b086      	sub	sp, #24
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009380:	2182      	movs	r1, #130	; 0x82
 8009382:	4818      	ldr	r0, [pc, #96]	; (80093e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009384:	f000 fd4f 	bl	8009e26 <USBD_GetEpDesc>
 8009388:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800938a:	2101      	movs	r1, #1
 800938c:	4815      	ldr	r0, [pc, #84]	; (80093e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800938e:	f000 fd4a 	bl	8009e26 <USBD_GetEpDesc>
 8009392:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009394:	2181      	movs	r1, #129	; 0x81
 8009396:	4813      	ldr	r0, [pc, #76]	; (80093e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009398:	f000 fd45 	bl	8009e26 <USBD_GetEpDesc>
 800939c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d002      	beq.n	80093aa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	2210      	movs	r2, #16
 80093a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d006      	beq.n	80093be <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	2200      	movs	r2, #0
 80093b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093b8:	711a      	strb	r2, [r3, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d006      	beq.n	80093d2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2200      	movs	r2, #0
 80093c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093cc:	711a      	strb	r2, [r3, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2243      	movs	r2, #67	; 0x43
 80093d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80093d8:	4b02      	ldr	r3, [pc, #8]	; (80093e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3718      	adds	r7, #24
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}
 80093e2:	bf00      	nop
 80093e4:	20000050 	.word	0x20000050

080093e8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b086      	sub	sp, #24
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80093f0:	2182      	movs	r1, #130	; 0x82
 80093f2:	4818      	ldr	r0, [pc, #96]	; (8009454 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80093f4:	f000 fd17 	bl	8009e26 <USBD_GetEpDesc>
 80093f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80093fa:	2101      	movs	r1, #1
 80093fc:	4815      	ldr	r0, [pc, #84]	; (8009454 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80093fe:	f000 fd12 	bl	8009e26 <USBD_GetEpDesc>
 8009402:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009404:	2181      	movs	r1, #129	; 0x81
 8009406:	4813      	ldr	r0, [pc, #76]	; (8009454 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009408:	f000 fd0d 	bl	8009e26 <USBD_GetEpDesc>
 800940c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d002      	beq.n	800941a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	2210      	movs	r2, #16
 8009418:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d006      	beq.n	800942e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	2200      	movs	r2, #0
 8009424:	711a      	strb	r2, [r3, #4]
 8009426:	2200      	movs	r2, #0
 8009428:	f042 0202 	orr.w	r2, r2, #2
 800942c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d006      	beq.n	8009442 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2200      	movs	r2, #0
 8009438:	711a      	strb	r2, [r3, #4]
 800943a:	2200      	movs	r2, #0
 800943c:	f042 0202 	orr.w	r2, r2, #2
 8009440:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2243      	movs	r2, #67	; 0x43
 8009446:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009448:	4b02      	ldr	r3, [pc, #8]	; (8009454 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800944a:	4618      	mov	r0, r3
 800944c:	3718      	adds	r7, #24
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	20000050 	.word	0x20000050

08009458 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b086      	sub	sp, #24
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009460:	2182      	movs	r1, #130	; 0x82
 8009462:	4818      	ldr	r0, [pc, #96]	; (80094c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009464:	f000 fcdf 	bl	8009e26 <USBD_GetEpDesc>
 8009468:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800946a:	2101      	movs	r1, #1
 800946c:	4815      	ldr	r0, [pc, #84]	; (80094c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800946e:	f000 fcda 	bl	8009e26 <USBD_GetEpDesc>
 8009472:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009474:	2181      	movs	r1, #129	; 0x81
 8009476:	4813      	ldr	r0, [pc, #76]	; (80094c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009478:	f000 fcd5 	bl	8009e26 <USBD_GetEpDesc>
 800947c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d002      	beq.n	800948a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	2210      	movs	r2, #16
 8009488:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d006      	beq.n	800949e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	2200      	movs	r2, #0
 8009494:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009498:	711a      	strb	r2, [r3, #4]
 800949a:	2200      	movs	r2, #0
 800949c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d006      	beq.n	80094b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2200      	movs	r2, #0
 80094a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80094ac:	711a      	strb	r2, [r3, #4]
 80094ae:	2200      	movs	r2, #0
 80094b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2243      	movs	r2, #67	; 0x43
 80094b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80094b8:	4b02      	ldr	r3, [pc, #8]	; (80094c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3718      	adds	r7, #24
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
 80094c2:	bf00      	nop
 80094c4:	20000050 	.word	0x20000050

080094c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b083      	sub	sp, #12
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	220a      	movs	r2, #10
 80094d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80094d6:	4b03      	ldr	r3, [pc, #12]	; (80094e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80094d8:	4618      	mov	r0, r3
 80094da:	370c      	adds	r7, #12
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr
 80094e4:	2000000c 	.word	0x2000000c

080094e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d101      	bne.n	80094fc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80094f8:	2303      	movs	r3, #3
 80094fa:	e009      	b.n	8009510 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009502:	687a      	ldr	r2, [r7, #4]
 8009504:	33b0      	adds	r3, #176	; 0xb0
 8009506:	009b      	lsls	r3, r3, #2
 8009508:	4413      	add	r3, r2
 800950a:	683a      	ldr	r2, [r7, #0]
 800950c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800950e:	2300      	movs	r3, #0
}
 8009510:	4618      	mov	r0, r3
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800951c:	b480      	push	{r7}
 800951e:	b087      	sub	sp, #28
 8009520:	af00      	add	r7, sp, #0
 8009522:	60f8      	str	r0, [r7, #12]
 8009524:	60b9      	str	r1, [r7, #8]
 8009526:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	32b0      	adds	r2, #176	; 0xb0
 8009532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009536:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d101      	bne.n	8009542 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800953e:	2303      	movs	r3, #3
 8009540:	e008      	b.n	8009554 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	68ba      	ldr	r2, [r7, #8]
 8009546:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009552:	2300      	movs	r3, #0
}
 8009554:	4618      	mov	r0, r3
 8009556:	371c      	adds	r7, #28
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr

08009560 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009560:	b480      	push	{r7}
 8009562:	b085      	sub	sp, #20
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	32b0      	adds	r2, #176	; 0xb0
 8009574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009578:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d101      	bne.n	8009584 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009580:	2303      	movs	r3, #3
 8009582:	e004      	b.n	800958e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	683a      	ldr	r2, [r7, #0]
 8009588:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800958c:	2300      	movs	r3, #0
}
 800958e:	4618      	mov	r0, r3
 8009590:	3714      	adds	r7, #20
 8009592:	46bd      	mov	sp, r7
 8009594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009598:	4770      	bx	lr
	...

0800959c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b084      	sub	sp, #16
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	32b0      	adds	r2, #176	; 0xb0
 80095ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095b2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80095b4:	2301      	movs	r3, #1
 80095b6:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	32b0      	adds	r2, #176	; 0xb0
 80095c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d101      	bne.n	80095ce <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80095ca:	2303      	movs	r3, #3
 80095cc:	e025      	b.n	800961a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d11f      	bne.n	8009618 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	2201      	movs	r2, #1
 80095dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80095e0:	4b10      	ldr	r3, [pc, #64]	; (8009624 <USBD_CDC_TransmitPacket+0x88>)
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	f003 020f 	and.w	r2, r3, #15
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	4613      	mov	r3, r2
 80095f2:	009b      	lsls	r3, r3, #2
 80095f4:	4413      	add	r3, r2
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	4403      	add	r3, r0
 80095fa:	3318      	adds	r3, #24
 80095fc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80095fe:	4b09      	ldr	r3, [pc, #36]	; (8009624 <USBD_CDC_TransmitPacket+0x88>)
 8009600:	7819      	ldrb	r1, [r3, #0]
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f001 ffc3 	bl	800b59a <USBD_LL_Transmit>

    ret = USBD_OK;
 8009614:	2300      	movs	r3, #0
 8009616:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009618:	7bfb      	ldrb	r3, [r7, #15]
}
 800961a:	4618      	mov	r0, r3
 800961c:	3710      	adds	r7, #16
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	20000093 	.word	0x20000093

08009628 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	32b0      	adds	r2, #176	; 0xb0
 800963a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800963e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	32b0      	adds	r2, #176	; 0xb0
 800964a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d101      	bne.n	8009656 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009652:	2303      	movs	r3, #3
 8009654:	e018      	b.n	8009688 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	7c1b      	ldrb	r3, [r3, #16]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d10a      	bne.n	8009674 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800965e:	4b0c      	ldr	r3, [pc, #48]	; (8009690 <USBD_CDC_ReceivePacket+0x68>)
 8009660:	7819      	ldrb	r1, [r3, #0]
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009668:	f44f 7300 	mov.w	r3, #512	; 0x200
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f001 ffb5 	bl	800b5dc <USBD_LL_PrepareReceive>
 8009672:	e008      	b.n	8009686 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009674:	4b06      	ldr	r3, [pc, #24]	; (8009690 <USBD_CDC_ReceivePacket+0x68>)
 8009676:	7819      	ldrb	r1, [r3, #0]
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800967e:	2340      	movs	r3, #64	; 0x40
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f001 ffab 	bl	800b5dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009686:	2300      	movs	r3, #0
}
 8009688:	4618      	mov	r0, r3
 800968a:	3710      	adds	r7, #16
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}
 8009690:	20000094 	.word	0x20000094

08009694 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b086      	sub	sp, #24
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	4613      	mov	r3, r2
 80096a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d101      	bne.n	80096ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80096a8:	2303      	movs	r3, #3
 80096aa:	e01f      	b.n	80096ec <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2200      	movs	r2, #0
 80096b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2200      	movs	r2, #0
 80096b8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2200      	movs	r2, #0
 80096c0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d003      	beq.n	80096d2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	68ba      	ldr	r2, [r7, #8]
 80096ce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2201      	movs	r2, #1
 80096d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	79fa      	ldrb	r2, [r7, #7]
 80096de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80096e0:	68f8      	ldr	r0, [r7, #12]
 80096e2:	f001 fe25 	bl	800b330 <USBD_LL_Init>
 80096e6:	4603      	mov	r3, r0
 80096e8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80096ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3718      	adds	r7, #24
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80096fe:	2300      	movs	r3, #0
 8009700:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d101      	bne.n	800970c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009708:	2303      	movs	r3, #3
 800970a:	e025      	b.n	8009758 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	683a      	ldr	r2, [r7, #0]
 8009710:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	32ae      	adds	r2, #174	; 0xae
 800971e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009724:	2b00      	cmp	r3, #0
 8009726:	d00f      	beq.n	8009748 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	32ae      	adds	r2, #174	; 0xae
 8009732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009738:	f107 020e 	add.w	r2, r7, #14
 800973c:	4610      	mov	r0, r2
 800973e:	4798      	blx	r3
 8009740:	4602      	mov	r2, r0
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800974e:	1c5a      	adds	r2, r3, #1
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009756:	2300      	movs	r3, #0
}
 8009758:	4618      	mov	r0, r3
 800975a:	3710      	adds	r7, #16
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f001 fe2d 	bl	800b3c8 <USBD_LL_Start>
 800976e:	4603      	mov	r3, r0
}
 8009770:	4618      	mov	r0, r3
 8009772:	3708      	adds	r7, #8
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009778:	b480      	push	{r7}
 800977a:	b083      	sub	sp, #12
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009780:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009782:	4618      	mov	r0, r3
 8009784:	370c      	adds	r7, #12
 8009786:	46bd      	mov	sp, r7
 8009788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978c:	4770      	bx	lr

0800978e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800978e:	b580      	push	{r7, lr}
 8009790:	b084      	sub	sp, #16
 8009792:	af00      	add	r7, sp, #0
 8009794:	6078      	str	r0, [r7, #4]
 8009796:	460b      	mov	r3, r1
 8009798:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800979a:	2300      	movs	r3, #0
 800979c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d009      	beq.n	80097bc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	78fa      	ldrb	r2, [r7, #3]
 80097b2:	4611      	mov	r1, r2
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	4798      	blx	r3
 80097b8:	4603      	mov	r3, r0
 80097ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80097bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3710      	adds	r7, #16
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b084      	sub	sp, #16
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
 80097ce:	460b      	mov	r3, r1
 80097d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80097d2:	2300      	movs	r3, #0
 80097d4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	78fa      	ldrb	r2, [r7, #3]
 80097e0:	4611      	mov	r1, r2
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	4798      	blx	r3
 80097e6:	4603      	mov	r3, r0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d001      	beq.n	80097f0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80097ec:	2303      	movs	r3, #3
 80097ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80097f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3710      	adds	r7, #16
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}

080097fa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80097fa:	b580      	push	{r7, lr}
 80097fc:	b084      	sub	sp, #16
 80097fe:	af00      	add	r7, sp, #0
 8009800:	6078      	str	r0, [r7, #4]
 8009802:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800980a:	6839      	ldr	r1, [r7, #0]
 800980c:	4618      	mov	r0, r3
 800980e:	f001 f908 	bl	800aa22 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2201      	movs	r2, #1
 8009816:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009820:	461a      	mov	r2, r3
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800982e:	f003 031f 	and.w	r3, r3, #31
 8009832:	2b02      	cmp	r3, #2
 8009834:	d01a      	beq.n	800986c <USBD_LL_SetupStage+0x72>
 8009836:	2b02      	cmp	r3, #2
 8009838:	d822      	bhi.n	8009880 <USBD_LL_SetupStage+0x86>
 800983a:	2b00      	cmp	r3, #0
 800983c:	d002      	beq.n	8009844 <USBD_LL_SetupStage+0x4a>
 800983e:	2b01      	cmp	r3, #1
 8009840:	d00a      	beq.n	8009858 <USBD_LL_SetupStage+0x5e>
 8009842:	e01d      	b.n	8009880 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800984a:	4619      	mov	r1, r3
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 fb5f 	bl	8009f10 <USBD_StdDevReq>
 8009852:	4603      	mov	r3, r0
 8009854:	73fb      	strb	r3, [r7, #15]
      break;
 8009856:	e020      	b.n	800989a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800985e:	4619      	mov	r1, r3
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 fbc7 	bl	8009ff4 <USBD_StdItfReq>
 8009866:	4603      	mov	r3, r0
 8009868:	73fb      	strb	r3, [r7, #15]
      break;
 800986a:	e016      	b.n	800989a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009872:	4619      	mov	r1, r3
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 fc29 	bl	800a0cc <USBD_StdEPReq>
 800987a:	4603      	mov	r3, r0
 800987c:	73fb      	strb	r3, [r7, #15]
      break;
 800987e:	e00c      	b.n	800989a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009886:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800988a:	b2db      	uxtb	r3, r3
 800988c:	4619      	mov	r1, r3
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f001 fdfa 	bl	800b488 <USBD_LL_StallEP>
 8009894:	4603      	mov	r3, r0
 8009896:	73fb      	strb	r3, [r7, #15]
      break;
 8009898:	bf00      	nop
  }

  return ret;
 800989a:	7bfb      	ldrb	r3, [r7, #15]
}
 800989c:	4618      	mov	r0, r3
 800989e:	3710      	adds	r7, #16
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b086      	sub	sp, #24
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	60f8      	str	r0, [r7, #12]
 80098ac:	460b      	mov	r3, r1
 80098ae:	607a      	str	r2, [r7, #4]
 80098b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80098b2:	2300      	movs	r3, #0
 80098b4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80098b6:	7afb      	ldrb	r3, [r7, #11]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d16e      	bne.n	800999a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80098c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80098ca:	2b03      	cmp	r3, #3
 80098cc:	f040 8098 	bne.w	8009a00 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	689a      	ldr	r2, [r3, #8]
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	68db      	ldr	r3, [r3, #12]
 80098d8:	429a      	cmp	r2, r3
 80098da:	d913      	bls.n	8009904 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	689a      	ldr	r2, [r3, #8]
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	1ad2      	subs	r2, r2, r3
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	68da      	ldr	r2, [r3, #12]
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	689b      	ldr	r3, [r3, #8]
 80098f2:	4293      	cmp	r3, r2
 80098f4:	bf28      	it	cs
 80098f6:	4613      	movcs	r3, r2
 80098f8:	461a      	mov	r2, r3
 80098fa:	6879      	ldr	r1, [r7, #4]
 80098fc:	68f8      	ldr	r0, [r7, #12]
 80098fe:	f001 f984 	bl	800ac0a <USBD_CtlContinueRx>
 8009902:	e07d      	b.n	8009a00 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800990a:	f003 031f 	and.w	r3, r3, #31
 800990e:	2b02      	cmp	r3, #2
 8009910:	d014      	beq.n	800993c <USBD_LL_DataOutStage+0x98>
 8009912:	2b02      	cmp	r3, #2
 8009914:	d81d      	bhi.n	8009952 <USBD_LL_DataOutStage+0xae>
 8009916:	2b00      	cmp	r3, #0
 8009918:	d002      	beq.n	8009920 <USBD_LL_DataOutStage+0x7c>
 800991a:	2b01      	cmp	r3, #1
 800991c:	d003      	beq.n	8009926 <USBD_LL_DataOutStage+0x82>
 800991e:	e018      	b.n	8009952 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009920:	2300      	movs	r3, #0
 8009922:	75bb      	strb	r3, [r7, #22]
            break;
 8009924:	e018      	b.n	8009958 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800992c:	b2db      	uxtb	r3, r3
 800992e:	4619      	mov	r1, r3
 8009930:	68f8      	ldr	r0, [r7, #12]
 8009932:	f000 fa5e 	bl	8009df2 <USBD_CoreFindIF>
 8009936:	4603      	mov	r3, r0
 8009938:	75bb      	strb	r3, [r7, #22]
            break;
 800993a:	e00d      	b.n	8009958 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009942:	b2db      	uxtb	r3, r3
 8009944:	4619      	mov	r1, r3
 8009946:	68f8      	ldr	r0, [r7, #12]
 8009948:	f000 fa60 	bl	8009e0c <USBD_CoreFindEP>
 800994c:	4603      	mov	r3, r0
 800994e:	75bb      	strb	r3, [r7, #22]
            break;
 8009950:	e002      	b.n	8009958 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009952:	2300      	movs	r3, #0
 8009954:	75bb      	strb	r3, [r7, #22]
            break;
 8009956:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009958:	7dbb      	ldrb	r3, [r7, #22]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d119      	bne.n	8009992 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009964:	b2db      	uxtb	r3, r3
 8009966:	2b03      	cmp	r3, #3
 8009968:	d113      	bne.n	8009992 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800996a:	7dba      	ldrb	r2, [r7, #22]
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	32ae      	adds	r2, #174	; 0xae
 8009970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009974:	691b      	ldr	r3, [r3, #16]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d00b      	beq.n	8009992 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800997a:	7dba      	ldrb	r2, [r7, #22]
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009982:	7dba      	ldrb	r2, [r7, #22]
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	32ae      	adds	r2, #174	; 0xae
 8009988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800998c:	691b      	ldr	r3, [r3, #16]
 800998e:	68f8      	ldr	r0, [r7, #12]
 8009990:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009992:	68f8      	ldr	r0, [r7, #12]
 8009994:	f001 f94a 	bl	800ac2c <USBD_CtlSendStatus>
 8009998:	e032      	b.n	8009a00 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800999a:	7afb      	ldrb	r3, [r7, #11]
 800999c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099a0:	b2db      	uxtb	r3, r3
 80099a2:	4619      	mov	r1, r3
 80099a4:	68f8      	ldr	r0, [r7, #12]
 80099a6:	f000 fa31 	bl	8009e0c <USBD_CoreFindEP>
 80099aa:	4603      	mov	r3, r0
 80099ac:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80099ae:	7dbb      	ldrb	r3, [r7, #22]
 80099b0:	2bff      	cmp	r3, #255	; 0xff
 80099b2:	d025      	beq.n	8009a00 <USBD_LL_DataOutStage+0x15c>
 80099b4:	7dbb      	ldrb	r3, [r7, #22]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d122      	bne.n	8009a00 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099c0:	b2db      	uxtb	r3, r3
 80099c2:	2b03      	cmp	r3, #3
 80099c4:	d117      	bne.n	80099f6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80099c6:	7dba      	ldrb	r2, [r7, #22]
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	32ae      	adds	r2, #174	; 0xae
 80099cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099d0:	699b      	ldr	r3, [r3, #24]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d00f      	beq.n	80099f6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80099d6:	7dba      	ldrb	r2, [r7, #22]
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80099de:	7dba      	ldrb	r2, [r7, #22]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	32ae      	adds	r2, #174	; 0xae
 80099e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099e8:	699b      	ldr	r3, [r3, #24]
 80099ea:	7afa      	ldrb	r2, [r7, #11]
 80099ec:	4611      	mov	r1, r2
 80099ee:	68f8      	ldr	r0, [r7, #12]
 80099f0:	4798      	blx	r3
 80099f2:	4603      	mov	r3, r0
 80099f4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80099f6:	7dfb      	ldrb	r3, [r7, #23]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d001      	beq.n	8009a00 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80099fc:	7dfb      	ldrb	r3, [r7, #23]
 80099fe:	e000      	b.n	8009a02 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009a00:	2300      	movs	r3, #0
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3718      	adds	r7, #24
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b086      	sub	sp, #24
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	60f8      	str	r0, [r7, #12]
 8009a12:	460b      	mov	r3, r1
 8009a14:	607a      	str	r2, [r7, #4]
 8009a16:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009a18:	7afb      	ldrb	r3, [r7, #11]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d16f      	bne.n	8009afe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	3314      	adds	r3, #20
 8009a22:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009a2a:	2b02      	cmp	r3, #2
 8009a2c:	d15a      	bne.n	8009ae4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	689a      	ldr	r2, [r3, #8]
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	68db      	ldr	r3, [r3, #12]
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d914      	bls.n	8009a64 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	689a      	ldr	r2, [r3, #8]
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	68db      	ldr	r3, [r3, #12]
 8009a42:	1ad2      	subs	r2, r2, r3
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	689b      	ldr	r3, [r3, #8]
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	6879      	ldr	r1, [r7, #4]
 8009a50:	68f8      	ldr	r0, [r7, #12]
 8009a52:	f001 f8ac 	bl	800abae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a56:	2300      	movs	r3, #0
 8009a58:	2200      	movs	r2, #0
 8009a5a:	2100      	movs	r1, #0
 8009a5c:	68f8      	ldr	r0, [r7, #12]
 8009a5e:	f001 fdbd 	bl	800b5dc <USBD_LL_PrepareReceive>
 8009a62:	e03f      	b.n	8009ae4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	68da      	ldr	r2, [r3, #12]
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d11c      	bne.n	8009aaa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	685a      	ldr	r2, [r3, #4]
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d316      	bcc.n	8009aaa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	685a      	ldr	r2, [r3, #4]
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d20f      	bcs.n	8009aaa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	2100      	movs	r1, #0
 8009a8e:	68f8      	ldr	r0, [r7, #12]
 8009a90:	f001 f88d 	bl	800abae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2200      	movs	r2, #0
 8009a98:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	2100      	movs	r1, #0
 8009aa2:	68f8      	ldr	r0, [r7, #12]
 8009aa4:	f001 fd9a 	bl	800b5dc <USBD_LL_PrepareReceive>
 8009aa8:	e01c      	b.n	8009ae4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	2b03      	cmp	r3, #3
 8009ab4:	d10f      	bne.n	8009ad6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009abc:	68db      	ldr	r3, [r3, #12]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d009      	beq.n	8009ad6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ad0:	68db      	ldr	r3, [r3, #12]
 8009ad2:	68f8      	ldr	r0, [r7, #12]
 8009ad4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ad6:	2180      	movs	r1, #128	; 0x80
 8009ad8:	68f8      	ldr	r0, [r7, #12]
 8009ada:	f001 fcd5 	bl	800b488 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009ade:	68f8      	ldr	r0, [r7, #12]
 8009ae0:	f001 f8b7 	bl	800ac52 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d03a      	beq.n	8009b64 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009aee:	68f8      	ldr	r0, [r7, #12]
 8009af0:	f7ff fe42 	bl	8009778 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	2200      	movs	r2, #0
 8009af8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009afc:	e032      	b.n	8009b64 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009afe:	7afb      	ldrb	r3, [r7, #11]
 8009b00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009b04:	b2db      	uxtb	r3, r3
 8009b06:	4619      	mov	r1, r3
 8009b08:	68f8      	ldr	r0, [r7, #12]
 8009b0a:	f000 f97f 	bl	8009e0c <USBD_CoreFindEP>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b12:	7dfb      	ldrb	r3, [r7, #23]
 8009b14:	2bff      	cmp	r3, #255	; 0xff
 8009b16:	d025      	beq.n	8009b64 <USBD_LL_DataInStage+0x15a>
 8009b18:	7dfb      	ldrb	r3, [r7, #23]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d122      	bne.n	8009b64 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b24:	b2db      	uxtb	r3, r3
 8009b26:	2b03      	cmp	r3, #3
 8009b28:	d11c      	bne.n	8009b64 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009b2a:	7dfa      	ldrb	r2, [r7, #23]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	32ae      	adds	r2, #174	; 0xae
 8009b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b34:	695b      	ldr	r3, [r3, #20]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d014      	beq.n	8009b64 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009b3a:	7dfa      	ldrb	r2, [r7, #23]
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009b42:	7dfa      	ldrb	r2, [r7, #23]
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	32ae      	adds	r2, #174	; 0xae
 8009b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b4c:	695b      	ldr	r3, [r3, #20]
 8009b4e:	7afa      	ldrb	r2, [r7, #11]
 8009b50:	4611      	mov	r1, r2
 8009b52:	68f8      	ldr	r0, [r7, #12]
 8009b54:	4798      	blx	r3
 8009b56:	4603      	mov	r3, r0
 8009b58:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009b5a:	7dbb      	ldrb	r3, [r7, #22]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d001      	beq.n	8009b64 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009b60:	7dbb      	ldrb	r3, [r7, #22]
 8009b62:	e000      	b.n	8009b66 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009b64:	2300      	movs	r3, #0
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3718      	adds	r7, #24
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}

08009b6e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b084      	sub	sp, #16
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b76:	2300      	movs	r3, #0
 8009b78:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2200      	movs	r2, #0
 8009b86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d014      	beq.n	8009bd4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d00e      	beq.n	8009bd4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	6852      	ldr	r2, [r2, #4]
 8009bc2:	b2d2      	uxtb	r2, r2
 8009bc4:	4611      	mov	r1, r2
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	4798      	blx	r3
 8009bca:	4603      	mov	r3, r0
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d001      	beq.n	8009bd4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009bd0:	2303      	movs	r3, #3
 8009bd2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009bd4:	2340      	movs	r3, #64	; 0x40
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	2100      	movs	r1, #0
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f001 fc0f 	bl	800b3fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2201      	movs	r2, #1
 8009be4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2240      	movs	r2, #64	; 0x40
 8009bec:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009bf0:	2340      	movs	r3, #64	; 0x40
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	2180      	movs	r1, #128	; 0x80
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f001 fc01 	bl	800b3fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2201      	movs	r2, #1
 8009c00:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2240      	movs	r2, #64	; 0x40
 8009c06:	621a      	str	r2, [r3, #32]

  return ret;
 8009c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3710      	adds	r7, #16
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}

08009c12 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009c12:	b480      	push	{r7}
 8009c14:	b083      	sub	sp, #12
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	6078      	str	r0, [r7, #4]
 8009c1a:	460b      	mov	r3, r1
 8009c1c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	78fa      	ldrb	r2, [r7, #3]
 8009c22:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009c24:	2300      	movs	r3, #0
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	370c      	adds	r7, #12
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c30:	4770      	bx	lr

08009c32 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009c32:	b480      	push	{r7}
 8009c34:	b083      	sub	sp, #12
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c40:	b2da      	uxtb	r2, r3
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2204      	movs	r2, #4
 8009c4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009c50:	2300      	movs	r3, #0
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	370c      	adds	r7, #12
 8009c56:	46bd      	mov	sp, r7
 8009c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5c:	4770      	bx	lr

08009c5e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009c5e:	b480      	push	{r7}
 8009c60:	b083      	sub	sp, #12
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	2b04      	cmp	r3, #4
 8009c70:	d106      	bne.n	8009c80 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009c78:	b2da      	uxtb	r2, r3
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009c80:	2300      	movs	r3, #0
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	370c      	adds	r7, #12
 8009c86:	46bd      	mov	sp, r7
 8009c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8c:	4770      	bx	lr

08009c8e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009c8e:	b580      	push	{r7, lr}
 8009c90:	b082      	sub	sp, #8
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	2b03      	cmp	r3, #3
 8009ca0:	d110      	bne.n	8009cc4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d00b      	beq.n	8009cc4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cb2:	69db      	ldr	r3, [r3, #28]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d005      	beq.n	8009cc4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cbe:	69db      	ldr	r3, [r3, #28]
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3708      	adds	r7, #8
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b082      	sub	sp, #8
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
 8009cd6:	460b      	mov	r3, r1
 8009cd8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	32ae      	adds	r2, #174	; 0xae
 8009ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d101      	bne.n	8009cf0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009cec:	2303      	movs	r3, #3
 8009cee:	e01c      	b.n	8009d2a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cf6:	b2db      	uxtb	r3, r3
 8009cf8:	2b03      	cmp	r3, #3
 8009cfa:	d115      	bne.n	8009d28 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	32ae      	adds	r2, #174	; 0xae
 8009d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d0a:	6a1b      	ldr	r3, [r3, #32]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d00b      	beq.n	8009d28 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	32ae      	adds	r2, #174	; 0xae
 8009d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d1e:	6a1b      	ldr	r3, [r3, #32]
 8009d20:	78fa      	ldrb	r2, [r7, #3]
 8009d22:	4611      	mov	r1, r2
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009d28:	2300      	movs	r3, #0
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3708      	adds	r7, #8
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}

08009d32 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009d32:	b580      	push	{r7, lr}
 8009d34:	b082      	sub	sp, #8
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	6078      	str	r0, [r7, #4]
 8009d3a:	460b      	mov	r3, r1
 8009d3c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	32ae      	adds	r2, #174	; 0xae
 8009d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d101      	bne.n	8009d54 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009d50:	2303      	movs	r3, #3
 8009d52:	e01c      	b.n	8009d8e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d5a:	b2db      	uxtb	r3, r3
 8009d5c:	2b03      	cmp	r3, #3
 8009d5e:	d115      	bne.n	8009d8c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	32ae      	adds	r2, #174	; 0xae
 8009d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d00b      	beq.n	8009d8c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	32ae      	adds	r2, #174	; 0xae
 8009d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d84:	78fa      	ldrb	r2, [r7, #3]
 8009d86:	4611      	mov	r1, r2
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009d8c:	2300      	movs	r3, #0
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3708      	adds	r7, #8
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}

08009d96 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009d96:	b480      	push	{r7}
 8009d98:	b083      	sub	sp, #12
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009d9e:	2300      	movs	r3, #0
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	370c      	adds	r7, #12
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr

08009dac <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009db4:	2300      	movs	r3, #0
 8009db6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2201      	movs	r2, #1
 8009dbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d00e      	beq.n	8009de8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	6852      	ldr	r2, [r2, #4]
 8009dd6:	b2d2      	uxtb	r2, r2
 8009dd8:	4611      	mov	r1, r2
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	4798      	blx	r3
 8009dde:	4603      	mov	r3, r0
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d001      	beq.n	8009de8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009de4:	2303      	movs	r3, #3
 8009de6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3710      	adds	r7, #16
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}

08009df2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009df2:	b480      	push	{r7}
 8009df4:	b083      	sub	sp, #12
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
 8009dfa:	460b      	mov	r3, r1
 8009dfc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009dfe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	370c      	adds	r7, #12
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr

08009e0c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b083      	sub	sp, #12
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	460b      	mov	r3, r1
 8009e16:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009e18:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	370c      	adds	r7, #12
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e24:	4770      	bx	lr

08009e26 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009e26:	b580      	push	{r7, lr}
 8009e28:	b086      	sub	sp, #24
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	6078      	str	r0, [r7, #4]
 8009e2e:	460b      	mov	r3, r1
 8009e30:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	885b      	ldrh	r3, [r3, #2]
 8009e42:	b29a      	uxth	r2, r3
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d920      	bls.n	8009e90 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	b29b      	uxth	r3, r3
 8009e54:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009e56:	e013      	b.n	8009e80 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009e58:	f107 030a 	add.w	r3, r7, #10
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	6978      	ldr	r0, [r7, #20]
 8009e60:	f000 f81b 	bl	8009e9a <USBD_GetNextDesc>
 8009e64:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	785b      	ldrb	r3, [r3, #1]
 8009e6a:	2b05      	cmp	r3, #5
 8009e6c:	d108      	bne.n	8009e80 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	789b      	ldrb	r3, [r3, #2]
 8009e76:	78fa      	ldrb	r2, [r7, #3]
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d008      	beq.n	8009e8e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	885b      	ldrh	r3, [r3, #2]
 8009e84:	b29a      	uxth	r2, r3
 8009e86:	897b      	ldrh	r3, [r7, #10]
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d8e5      	bhi.n	8009e58 <USBD_GetEpDesc+0x32>
 8009e8c:	e000      	b.n	8009e90 <USBD_GetEpDesc+0x6a>
          break;
 8009e8e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009e90:	693b      	ldr	r3, [r7, #16]
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3718      	adds	r7, #24
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}

08009e9a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009e9a:	b480      	push	{r7}
 8009e9c:	b085      	sub	sp, #20
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]
 8009ea2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	881a      	ldrh	r2, [r3, #0]
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	781b      	ldrb	r3, [r3, #0]
 8009eb0:	b29b      	uxth	r3, r3
 8009eb2:	4413      	add	r3, r2
 8009eb4:	b29a      	uxth	r2, r3
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	781b      	ldrb	r3, [r3, #0]
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	4413      	add	r3, r2
 8009ec4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3714      	adds	r7, #20
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr

08009ed4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b087      	sub	sp, #28
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	781b      	ldrb	r3, [r3, #0]
 8009ee4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	3301      	adds	r3, #1
 8009eea:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	781b      	ldrb	r3, [r3, #0]
 8009ef0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009ef2:	8a3b      	ldrh	r3, [r7, #16]
 8009ef4:	021b      	lsls	r3, r3, #8
 8009ef6:	b21a      	sxth	r2, r3
 8009ef8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009efc:	4313      	orrs	r3, r2
 8009efe:	b21b      	sxth	r3, r3
 8009f00:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009f02:	89fb      	ldrh	r3, [r7, #14]
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	371c      	adds	r7, #28
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr

08009f10 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b084      	sub	sp, #16
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	781b      	ldrb	r3, [r3, #0]
 8009f22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f26:	2b40      	cmp	r3, #64	; 0x40
 8009f28:	d005      	beq.n	8009f36 <USBD_StdDevReq+0x26>
 8009f2a:	2b40      	cmp	r3, #64	; 0x40
 8009f2c:	d857      	bhi.n	8009fde <USBD_StdDevReq+0xce>
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d00f      	beq.n	8009f52 <USBD_StdDevReq+0x42>
 8009f32:	2b20      	cmp	r3, #32
 8009f34:	d153      	bne.n	8009fde <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	32ae      	adds	r2, #174	; 0xae
 8009f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f44:	689b      	ldr	r3, [r3, #8]
 8009f46:	6839      	ldr	r1, [r7, #0]
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	4798      	blx	r3
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	73fb      	strb	r3, [r7, #15]
      break;
 8009f50:	e04a      	b.n	8009fe8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	785b      	ldrb	r3, [r3, #1]
 8009f56:	2b09      	cmp	r3, #9
 8009f58:	d83b      	bhi.n	8009fd2 <USBD_StdDevReq+0xc2>
 8009f5a:	a201      	add	r2, pc, #4	; (adr r2, 8009f60 <USBD_StdDevReq+0x50>)
 8009f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f60:	08009fb5 	.word	0x08009fb5
 8009f64:	08009fc9 	.word	0x08009fc9
 8009f68:	08009fd3 	.word	0x08009fd3
 8009f6c:	08009fbf 	.word	0x08009fbf
 8009f70:	08009fd3 	.word	0x08009fd3
 8009f74:	08009f93 	.word	0x08009f93
 8009f78:	08009f89 	.word	0x08009f89
 8009f7c:	08009fd3 	.word	0x08009fd3
 8009f80:	08009fab 	.word	0x08009fab
 8009f84:	08009f9d 	.word	0x08009f9d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009f88:	6839      	ldr	r1, [r7, #0]
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f000 fa3c 	bl	800a408 <USBD_GetDescriptor>
          break;
 8009f90:	e024      	b.n	8009fdc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009f92:	6839      	ldr	r1, [r7, #0]
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f000 fba1 	bl	800a6dc <USBD_SetAddress>
          break;
 8009f9a:	e01f      	b.n	8009fdc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009f9c:	6839      	ldr	r1, [r7, #0]
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 fbe0 	bl	800a764 <USBD_SetConfig>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	73fb      	strb	r3, [r7, #15]
          break;
 8009fa8:	e018      	b.n	8009fdc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009faa:	6839      	ldr	r1, [r7, #0]
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f000 fc83 	bl	800a8b8 <USBD_GetConfig>
          break;
 8009fb2:	e013      	b.n	8009fdc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009fb4:	6839      	ldr	r1, [r7, #0]
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f000 fcb4 	bl	800a924 <USBD_GetStatus>
          break;
 8009fbc:	e00e      	b.n	8009fdc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009fbe:	6839      	ldr	r1, [r7, #0]
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f000 fce3 	bl	800a98c <USBD_SetFeature>
          break;
 8009fc6:	e009      	b.n	8009fdc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009fc8:	6839      	ldr	r1, [r7, #0]
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f000 fd07 	bl	800a9de <USBD_ClrFeature>
          break;
 8009fd0:	e004      	b.n	8009fdc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009fd2:	6839      	ldr	r1, [r7, #0]
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 fd5e 	bl	800aa96 <USBD_CtlError>
          break;
 8009fda:	bf00      	nop
      }
      break;
 8009fdc:	e004      	b.n	8009fe8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009fde:	6839      	ldr	r1, [r7, #0]
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f000 fd58 	bl	800aa96 <USBD_CtlError>
      break;
 8009fe6:	bf00      	nop
  }

  return ret;
 8009fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3710      	adds	r7, #16
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}
 8009ff2:	bf00      	nop

08009ff4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b084      	sub	sp, #16
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ffe:	2300      	movs	r3, #0
 800a000:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	781b      	ldrb	r3, [r3, #0]
 800a006:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a00a:	2b40      	cmp	r3, #64	; 0x40
 800a00c:	d005      	beq.n	800a01a <USBD_StdItfReq+0x26>
 800a00e:	2b40      	cmp	r3, #64	; 0x40
 800a010:	d852      	bhi.n	800a0b8 <USBD_StdItfReq+0xc4>
 800a012:	2b00      	cmp	r3, #0
 800a014:	d001      	beq.n	800a01a <USBD_StdItfReq+0x26>
 800a016:	2b20      	cmp	r3, #32
 800a018:	d14e      	bne.n	800a0b8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a020:	b2db      	uxtb	r3, r3
 800a022:	3b01      	subs	r3, #1
 800a024:	2b02      	cmp	r3, #2
 800a026:	d840      	bhi.n	800a0aa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	889b      	ldrh	r3, [r3, #4]
 800a02c:	b2db      	uxtb	r3, r3
 800a02e:	2b01      	cmp	r3, #1
 800a030:	d836      	bhi.n	800a0a0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	889b      	ldrh	r3, [r3, #4]
 800a036:	b2db      	uxtb	r3, r3
 800a038:	4619      	mov	r1, r3
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f7ff fed9 	bl	8009df2 <USBD_CoreFindIF>
 800a040:	4603      	mov	r3, r0
 800a042:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a044:	7bbb      	ldrb	r3, [r7, #14]
 800a046:	2bff      	cmp	r3, #255	; 0xff
 800a048:	d01d      	beq.n	800a086 <USBD_StdItfReq+0x92>
 800a04a:	7bbb      	ldrb	r3, [r7, #14]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d11a      	bne.n	800a086 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a050:	7bba      	ldrb	r2, [r7, #14]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	32ae      	adds	r2, #174	; 0xae
 800a056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a05a:	689b      	ldr	r3, [r3, #8]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d00f      	beq.n	800a080 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a060:	7bba      	ldrb	r2, [r7, #14]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a068:	7bba      	ldrb	r2, [r7, #14]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	32ae      	adds	r2, #174	; 0xae
 800a06e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a072:	689b      	ldr	r3, [r3, #8]
 800a074:	6839      	ldr	r1, [r7, #0]
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	4798      	blx	r3
 800a07a:	4603      	mov	r3, r0
 800a07c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a07e:	e004      	b.n	800a08a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a080:	2303      	movs	r3, #3
 800a082:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a084:	e001      	b.n	800a08a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a086:	2303      	movs	r3, #3
 800a088:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	88db      	ldrh	r3, [r3, #6]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d110      	bne.n	800a0b4 <USBD_StdItfReq+0xc0>
 800a092:	7bfb      	ldrb	r3, [r7, #15]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d10d      	bne.n	800a0b4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f000 fdc7 	bl	800ac2c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a09e:	e009      	b.n	800a0b4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a0a0:	6839      	ldr	r1, [r7, #0]
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 fcf7 	bl	800aa96 <USBD_CtlError>
          break;
 800a0a8:	e004      	b.n	800a0b4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a0aa:	6839      	ldr	r1, [r7, #0]
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f000 fcf2 	bl	800aa96 <USBD_CtlError>
          break;
 800a0b2:	e000      	b.n	800a0b6 <USBD_StdItfReq+0xc2>
          break;
 800a0b4:	bf00      	nop
      }
      break;
 800a0b6:	e004      	b.n	800a0c2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a0b8:	6839      	ldr	r1, [r7, #0]
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 fceb 	bl	800aa96 <USBD_CtlError>
      break;
 800a0c0:	bf00      	nop
  }

  return ret;
 800a0c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3710      	adds	r7, #16
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b084      	sub	sp, #16
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	889b      	ldrh	r3, [r3, #4]
 800a0de:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	781b      	ldrb	r3, [r3, #0]
 800a0e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a0e8:	2b40      	cmp	r3, #64	; 0x40
 800a0ea:	d007      	beq.n	800a0fc <USBD_StdEPReq+0x30>
 800a0ec:	2b40      	cmp	r3, #64	; 0x40
 800a0ee:	f200 817f 	bhi.w	800a3f0 <USBD_StdEPReq+0x324>
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d02a      	beq.n	800a14c <USBD_StdEPReq+0x80>
 800a0f6:	2b20      	cmp	r3, #32
 800a0f8:	f040 817a 	bne.w	800a3f0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a0fc:	7bbb      	ldrb	r3, [r7, #14]
 800a0fe:	4619      	mov	r1, r3
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f7ff fe83 	bl	8009e0c <USBD_CoreFindEP>
 800a106:	4603      	mov	r3, r0
 800a108:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a10a:	7b7b      	ldrb	r3, [r7, #13]
 800a10c:	2bff      	cmp	r3, #255	; 0xff
 800a10e:	f000 8174 	beq.w	800a3fa <USBD_StdEPReq+0x32e>
 800a112:	7b7b      	ldrb	r3, [r7, #13]
 800a114:	2b00      	cmp	r3, #0
 800a116:	f040 8170 	bne.w	800a3fa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a11a:	7b7a      	ldrb	r2, [r7, #13]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a122:	7b7a      	ldrb	r2, [r7, #13]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	32ae      	adds	r2, #174	; 0xae
 800a128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a12c:	689b      	ldr	r3, [r3, #8]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	f000 8163 	beq.w	800a3fa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a134:	7b7a      	ldrb	r2, [r7, #13]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	32ae      	adds	r2, #174	; 0xae
 800a13a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a13e:	689b      	ldr	r3, [r3, #8]
 800a140:	6839      	ldr	r1, [r7, #0]
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	4798      	blx	r3
 800a146:	4603      	mov	r3, r0
 800a148:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a14a:	e156      	b.n	800a3fa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	785b      	ldrb	r3, [r3, #1]
 800a150:	2b03      	cmp	r3, #3
 800a152:	d008      	beq.n	800a166 <USBD_StdEPReq+0x9a>
 800a154:	2b03      	cmp	r3, #3
 800a156:	f300 8145 	bgt.w	800a3e4 <USBD_StdEPReq+0x318>
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	f000 809b 	beq.w	800a296 <USBD_StdEPReq+0x1ca>
 800a160:	2b01      	cmp	r3, #1
 800a162:	d03c      	beq.n	800a1de <USBD_StdEPReq+0x112>
 800a164:	e13e      	b.n	800a3e4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a16c:	b2db      	uxtb	r3, r3
 800a16e:	2b02      	cmp	r3, #2
 800a170:	d002      	beq.n	800a178 <USBD_StdEPReq+0xac>
 800a172:	2b03      	cmp	r3, #3
 800a174:	d016      	beq.n	800a1a4 <USBD_StdEPReq+0xd8>
 800a176:	e02c      	b.n	800a1d2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a178:	7bbb      	ldrb	r3, [r7, #14]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d00d      	beq.n	800a19a <USBD_StdEPReq+0xce>
 800a17e:	7bbb      	ldrb	r3, [r7, #14]
 800a180:	2b80      	cmp	r3, #128	; 0x80
 800a182:	d00a      	beq.n	800a19a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a184:	7bbb      	ldrb	r3, [r7, #14]
 800a186:	4619      	mov	r1, r3
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f001 f97d 	bl	800b488 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a18e:	2180      	movs	r1, #128	; 0x80
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f001 f979 	bl	800b488 <USBD_LL_StallEP>
 800a196:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a198:	e020      	b.n	800a1dc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a19a:	6839      	ldr	r1, [r7, #0]
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f000 fc7a 	bl	800aa96 <USBD_CtlError>
              break;
 800a1a2:	e01b      	b.n	800a1dc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	885b      	ldrh	r3, [r3, #2]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d10e      	bne.n	800a1ca <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a1ac:	7bbb      	ldrb	r3, [r7, #14]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d00b      	beq.n	800a1ca <USBD_StdEPReq+0xfe>
 800a1b2:	7bbb      	ldrb	r3, [r7, #14]
 800a1b4:	2b80      	cmp	r3, #128	; 0x80
 800a1b6:	d008      	beq.n	800a1ca <USBD_StdEPReq+0xfe>
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	88db      	ldrh	r3, [r3, #6]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d104      	bne.n	800a1ca <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a1c0:	7bbb      	ldrb	r3, [r7, #14]
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f001 f95f 	bl	800b488 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f000 fd2e 	bl	800ac2c <USBD_CtlSendStatus>

              break;
 800a1d0:	e004      	b.n	800a1dc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a1d2:	6839      	ldr	r1, [r7, #0]
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f000 fc5e 	bl	800aa96 <USBD_CtlError>
              break;
 800a1da:	bf00      	nop
          }
          break;
 800a1dc:	e107      	b.n	800a3ee <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1e4:	b2db      	uxtb	r3, r3
 800a1e6:	2b02      	cmp	r3, #2
 800a1e8:	d002      	beq.n	800a1f0 <USBD_StdEPReq+0x124>
 800a1ea:	2b03      	cmp	r3, #3
 800a1ec:	d016      	beq.n	800a21c <USBD_StdEPReq+0x150>
 800a1ee:	e04b      	b.n	800a288 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a1f0:	7bbb      	ldrb	r3, [r7, #14]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d00d      	beq.n	800a212 <USBD_StdEPReq+0x146>
 800a1f6:	7bbb      	ldrb	r3, [r7, #14]
 800a1f8:	2b80      	cmp	r3, #128	; 0x80
 800a1fa:	d00a      	beq.n	800a212 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a1fc:	7bbb      	ldrb	r3, [r7, #14]
 800a1fe:	4619      	mov	r1, r3
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f001 f941 	bl	800b488 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a206:	2180      	movs	r1, #128	; 0x80
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f001 f93d 	bl	800b488 <USBD_LL_StallEP>
 800a20e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a210:	e040      	b.n	800a294 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a212:	6839      	ldr	r1, [r7, #0]
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f000 fc3e 	bl	800aa96 <USBD_CtlError>
              break;
 800a21a:	e03b      	b.n	800a294 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	885b      	ldrh	r3, [r3, #2]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d136      	bne.n	800a292 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a224:	7bbb      	ldrb	r3, [r7, #14]
 800a226:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d004      	beq.n	800a238 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a22e:	7bbb      	ldrb	r3, [r7, #14]
 800a230:	4619      	mov	r1, r3
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f001 f947 	bl	800b4c6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f000 fcf7 	bl	800ac2c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a23e:	7bbb      	ldrb	r3, [r7, #14]
 800a240:	4619      	mov	r1, r3
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f7ff fde2 	bl	8009e0c <USBD_CoreFindEP>
 800a248:	4603      	mov	r3, r0
 800a24a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a24c:	7b7b      	ldrb	r3, [r7, #13]
 800a24e:	2bff      	cmp	r3, #255	; 0xff
 800a250:	d01f      	beq.n	800a292 <USBD_StdEPReq+0x1c6>
 800a252:	7b7b      	ldrb	r3, [r7, #13]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d11c      	bne.n	800a292 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a258:	7b7a      	ldrb	r2, [r7, #13]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a260:	7b7a      	ldrb	r2, [r7, #13]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	32ae      	adds	r2, #174	; 0xae
 800a266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a26a:	689b      	ldr	r3, [r3, #8]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d010      	beq.n	800a292 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a270:	7b7a      	ldrb	r2, [r7, #13]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	32ae      	adds	r2, #174	; 0xae
 800a276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	6839      	ldr	r1, [r7, #0]
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	4798      	blx	r3
 800a282:	4603      	mov	r3, r0
 800a284:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a286:	e004      	b.n	800a292 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a288:	6839      	ldr	r1, [r7, #0]
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 fc03 	bl	800aa96 <USBD_CtlError>
              break;
 800a290:	e000      	b.n	800a294 <USBD_StdEPReq+0x1c8>
              break;
 800a292:	bf00      	nop
          }
          break;
 800a294:	e0ab      	b.n	800a3ee <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	2b02      	cmp	r3, #2
 800a2a0:	d002      	beq.n	800a2a8 <USBD_StdEPReq+0x1dc>
 800a2a2:	2b03      	cmp	r3, #3
 800a2a4:	d032      	beq.n	800a30c <USBD_StdEPReq+0x240>
 800a2a6:	e097      	b.n	800a3d8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a2a8:	7bbb      	ldrb	r3, [r7, #14]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d007      	beq.n	800a2be <USBD_StdEPReq+0x1f2>
 800a2ae:	7bbb      	ldrb	r3, [r7, #14]
 800a2b0:	2b80      	cmp	r3, #128	; 0x80
 800a2b2:	d004      	beq.n	800a2be <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a2b4:	6839      	ldr	r1, [r7, #0]
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f000 fbed 	bl	800aa96 <USBD_CtlError>
                break;
 800a2bc:	e091      	b.n	800a3e2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a2be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	da0b      	bge.n	800a2de <USBD_StdEPReq+0x212>
 800a2c6:	7bbb      	ldrb	r3, [r7, #14]
 800a2c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a2cc:	4613      	mov	r3, r2
 800a2ce:	009b      	lsls	r3, r3, #2
 800a2d0:	4413      	add	r3, r2
 800a2d2:	009b      	lsls	r3, r3, #2
 800a2d4:	3310      	adds	r3, #16
 800a2d6:	687a      	ldr	r2, [r7, #4]
 800a2d8:	4413      	add	r3, r2
 800a2da:	3304      	adds	r3, #4
 800a2dc:	e00b      	b.n	800a2f6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a2de:	7bbb      	ldrb	r3, [r7, #14]
 800a2e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a2e4:	4613      	mov	r3, r2
 800a2e6:	009b      	lsls	r3, r3, #2
 800a2e8:	4413      	add	r3, r2
 800a2ea:	009b      	lsls	r3, r3, #2
 800a2ec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a2f0:	687a      	ldr	r2, [r7, #4]
 800a2f2:	4413      	add	r3, r2
 800a2f4:	3304      	adds	r3, #4
 800a2f6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	2202      	movs	r2, #2
 800a302:	4619      	mov	r1, r3
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f000 fc37 	bl	800ab78 <USBD_CtlSendData>
              break;
 800a30a:	e06a      	b.n	800a3e2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a30c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a310:	2b00      	cmp	r3, #0
 800a312:	da11      	bge.n	800a338 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a314:	7bbb      	ldrb	r3, [r7, #14]
 800a316:	f003 020f 	and.w	r2, r3, #15
 800a31a:	6879      	ldr	r1, [r7, #4]
 800a31c:	4613      	mov	r3, r2
 800a31e:	009b      	lsls	r3, r3, #2
 800a320:	4413      	add	r3, r2
 800a322:	009b      	lsls	r3, r3, #2
 800a324:	440b      	add	r3, r1
 800a326:	3324      	adds	r3, #36	; 0x24
 800a328:	881b      	ldrh	r3, [r3, #0]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d117      	bne.n	800a35e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a32e:	6839      	ldr	r1, [r7, #0]
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f000 fbb0 	bl	800aa96 <USBD_CtlError>
                  break;
 800a336:	e054      	b.n	800a3e2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a338:	7bbb      	ldrb	r3, [r7, #14]
 800a33a:	f003 020f 	and.w	r2, r3, #15
 800a33e:	6879      	ldr	r1, [r7, #4]
 800a340:	4613      	mov	r3, r2
 800a342:	009b      	lsls	r3, r3, #2
 800a344:	4413      	add	r3, r2
 800a346:	009b      	lsls	r3, r3, #2
 800a348:	440b      	add	r3, r1
 800a34a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a34e:	881b      	ldrh	r3, [r3, #0]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d104      	bne.n	800a35e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a354:	6839      	ldr	r1, [r7, #0]
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f000 fb9d 	bl	800aa96 <USBD_CtlError>
                  break;
 800a35c:	e041      	b.n	800a3e2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a35e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a362:	2b00      	cmp	r3, #0
 800a364:	da0b      	bge.n	800a37e <USBD_StdEPReq+0x2b2>
 800a366:	7bbb      	ldrb	r3, [r7, #14]
 800a368:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a36c:	4613      	mov	r3, r2
 800a36e:	009b      	lsls	r3, r3, #2
 800a370:	4413      	add	r3, r2
 800a372:	009b      	lsls	r3, r3, #2
 800a374:	3310      	adds	r3, #16
 800a376:	687a      	ldr	r2, [r7, #4]
 800a378:	4413      	add	r3, r2
 800a37a:	3304      	adds	r3, #4
 800a37c:	e00b      	b.n	800a396 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a37e:	7bbb      	ldrb	r3, [r7, #14]
 800a380:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a384:	4613      	mov	r3, r2
 800a386:	009b      	lsls	r3, r3, #2
 800a388:	4413      	add	r3, r2
 800a38a:	009b      	lsls	r3, r3, #2
 800a38c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a390:	687a      	ldr	r2, [r7, #4]
 800a392:	4413      	add	r3, r2
 800a394:	3304      	adds	r3, #4
 800a396:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a398:	7bbb      	ldrb	r3, [r7, #14]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d002      	beq.n	800a3a4 <USBD_StdEPReq+0x2d8>
 800a39e:	7bbb      	ldrb	r3, [r7, #14]
 800a3a0:	2b80      	cmp	r3, #128	; 0x80
 800a3a2:	d103      	bne.n	800a3ac <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	601a      	str	r2, [r3, #0]
 800a3aa:	e00e      	b.n	800a3ca <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a3ac:	7bbb      	ldrb	r3, [r7, #14]
 800a3ae:	4619      	mov	r1, r3
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f001 f8a7 	bl	800b504 <USBD_LL_IsStallEP>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d003      	beq.n	800a3c4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	2201      	movs	r2, #1
 800a3c0:	601a      	str	r2, [r3, #0]
 800a3c2:	e002      	b.n	800a3ca <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	2202      	movs	r2, #2
 800a3ce:	4619      	mov	r1, r3
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f000 fbd1 	bl	800ab78 <USBD_CtlSendData>
              break;
 800a3d6:	e004      	b.n	800a3e2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a3d8:	6839      	ldr	r1, [r7, #0]
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 fb5b 	bl	800aa96 <USBD_CtlError>
              break;
 800a3e0:	bf00      	nop
          }
          break;
 800a3e2:	e004      	b.n	800a3ee <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a3e4:	6839      	ldr	r1, [r7, #0]
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f000 fb55 	bl	800aa96 <USBD_CtlError>
          break;
 800a3ec:	bf00      	nop
      }
      break;
 800a3ee:	e005      	b.n	800a3fc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a3f0:	6839      	ldr	r1, [r7, #0]
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 fb4f 	bl	800aa96 <USBD_CtlError>
      break;
 800a3f8:	e000      	b.n	800a3fc <USBD_StdEPReq+0x330>
      break;
 800a3fa:	bf00      	nop
  }

  return ret;
 800a3fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3710      	adds	r7, #16
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
	...

0800a408 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b084      	sub	sp, #16
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a412:	2300      	movs	r3, #0
 800a414:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a416:	2300      	movs	r3, #0
 800a418:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a41a:	2300      	movs	r3, #0
 800a41c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	885b      	ldrh	r3, [r3, #2]
 800a422:	0a1b      	lsrs	r3, r3, #8
 800a424:	b29b      	uxth	r3, r3
 800a426:	3b01      	subs	r3, #1
 800a428:	2b06      	cmp	r3, #6
 800a42a:	f200 8128 	bhi.w	800a67e <USBD_GetDescriptor+0x276>
 800a42e:	a201      	add	r2, pc, #4	; (adr r2, 800a434 <USBD_GetDescriptor+0x2c>)
 800a430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a434:	0800a451 	.word	0x0800a451
 800a438:	0800a469 	.word	0x0800a469
 800a43c:	0800a4a9 	.word	0x0800a4a9
 800a440:	0800a67f 	.word	0x0800a67f
 800a444:	0800a67f 	.word	0x0800a67f
 800a448:	0800a61f 	.word	0x0800a61f
 800a44c:	0800a64b 	.word	0x0800a64b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	687a      	ldr	r2, [r7, #4]
 800a45a:	7c12      	ldrb	r2, [r2, #16]
 800a45c:	f107 0108 	add.w	r1, r7, #8
 800a460:	4610      	mov	r0, r2
 800a462:	4798      	blx	r3
 800a464:	60f8      	str	r0, [r7, #12]
      break;
 800a466:	e112      	b.n	800a68e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	7c1b      	ldrb	r3, [r3, #16]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d10d      	bne.n	800a48c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a478:	f107 0208 	add.w	r2, r7, #8
 800a47c:	4610      	mov	r0, r2
 800a47e:	4798      	blx	r3
 800a480:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	3301      	adds	r3, #1
 800a486:	2202      	movs	r2, #2
 800a488:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a48a:	e100      	b.n	800a68e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a494:	f107 0208 	add.w	r2, r7, #8
 800a498:	4610      	mov	r0, r2
 800a49a:	4798      	blx	r3
 800a49c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	3301      	adds	r3, #1
 800a4a2:	2202      	movs	r2, #2
 800a4a4:	701a      	strb	r2, [r3, #0]
      break;
 800a4a6:	e0f2      	b.n	800a68e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	885b      	ldrh	r3, [r3, #2]
 800a4ac:	b2db      	uxtb	r3, r3
 800a4ae:	2b05      	cmp	r3, #5
 800a4b0:	f200 80ac 	bhi.w	800a60c <USBD_GetDescriptor+0x204>
 800a4b4:	a201      	add	r2, pc, #4	; (adr r2, 800a4bc <USBD_GetDescriptor+0xb4>)
 800a4b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ba:	bf00      	nop
 800a4bc:	0800a4d5 	.word	0x0800a4d5
 800a4c0:	0800a509 	.word	0x0800a509
 800a4c4:	0800a53d 	.word	0x0800a53d
 800a4c8:	0800a571 	.word	0x0800a571
 800a4cc:	0800a5a5 	.word	0x0800a5a5
 800a4d0:	0800a5d9 	.word	0x0800a5d9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d00b      	beq.n	800a4f8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	687a      	ldr	r2, [r7, #4]
 800a4ea:	7c12      	ldrb	r2, [r2, #16]
 800a4ec:	f107 0108 	add.w	r1, r7, #8
 800a4f0:	4610      	mov	r0, r2
 800a4f2:	4798      	blx	r3
 800a4f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4f6:	e091      	b.n	800a61c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a4f8:	6839      	ldr	r1, [r7, #0]
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f000 facb 	bl	800aa96 <USBD_CtlError>
            err++;
 800a500:	7afb      	ldrb	r3, [r7, #11]
 800a502:	3301      	adds	r3, #1
 800a504:	72fb      	strb	r3, [r7, #11]
          break;
 800a506:	e089      	b.n	800a61c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a50e:	689b      	ldr	r3, [r3, #8]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d00b      	beq.n	800a52c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a51a:	689b      	ldr	r3, [r3, #8]
 800a51c:	687a      	ldr	r2, [r7, #4]
 800a51e:	7c12      	ldrb	r2, [r2, #16]
 800a520:	f107 0108 	add.w	r1, r7, #8
 800a524:	4610      	mov	r0, r2
 800a526:	4798      	blx	r3
 800a528:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a52a:	e077      	b.n	800a61c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a52c:	6839      	ldr	r1, [r7, #0]
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f000 fab1 	bl	800aa96 <USBD_CtlError>
            err++;
 800a534:	7afb      	ldrb	r3, [r7, #11]
 800a536:	3301      	adds	r3, #1
 800a538:	72fb      	strb	r3, [r7, #11]
          break;
 800a53a:	e06f      	b.n	800a61c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a542:	68db      	ldr	r3, [r3, #12]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d00b      	beq.n	800a560 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a54e:	68db      	ldr	r3, [r3, #12]
 800a550:	687a      	ldr	r2, [r7, #4]
 800a552:	7c12      	ldrb	r2, [r2, #16]
 800a554:	f107 0108 	add.w	r1, r7, #8
 800a558:	4610      	mov	r0, r2
 800a55a:	4798      	blx	r3
 800a55c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a55e:	e05d      	b.n	800a61c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a560:	6839      	ldr	r1, [r7, #0]
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f000 fa97 	bl	800aa96 <USBD_CtlError>
            err++;
 800a568:	7afb      	ldrb	r3, [r7, #11]
 800a56a:	3301      	adds	r3, #1
 800a56c:	72fb      	strb	r3, [r7, #11]
          break;
 800a56e:	e055      	b.n	800a61c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a576:	691b      	ldr	r3, [r3, #16]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d00b      	beq.n	800a594 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a582:	691b      	ldr	r3, [r3, #16]
 800a584:	687a      	ldr	r2, [r7, #4]
 800a586:	7c12      	ldrb	r2, [r2, #16]
 800a588:	f107 0108 	add.w	r1, r7, #8
 800a58c:	4610      	mov	r0, r2
 800a58e:	4798      	blx	r3
 800a590:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a592:	e043      	b.n	800a61c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a594:	6839      	ldr	r1, [r7, #0]
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f000 fa7d 	bl	800aa96 <USBD_CtlError>
            err++;
 800a59c:	7afb      	ldrb	r3, [r7, #11]
 800a59e:	3301      	adds	r3, #1
 800a5a0:	72fb      	strb	r3, [r7, #11]
          break;
 800a5a2:	e03b      	b.n	800a61c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5aa:	695b      	ldr	r3, [r3, #20]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d00b      	beq.n	800a5c8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5b6:	695b      	ldr	r3, [r3, #20]
 800a5b8:	687a      	ldr	r2, [r7, #4]
 800a5ba:	7c12      	ldrb	r2, [r2, #16]
 800a5bc:	f107 0108 	add.w	r1, r7, #8
 800a5c0:	4610      	mov	r0, r2
 800a5c2:	4798      	blx	r3
 800a5c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5c6:	e029      	b.n	800a61c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a5c8:	6839      	ldr	r1, [r7, #0]
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f000 fa63 	bl	800aa96 <USBD_CtlError>
            err++;
 800a5d0:	7afb      	ldrb	r3, [r7, #11]
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	72fb      	strb	r3, [r7, #11]
          break;
 800a5d6:	e021      	b.n	800a61c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5de:	699b      	ldr	r3, [r3, #24]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d00b      	beq.n	800a5fc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5ea:	699b      	ldr	r3, [r3, #24]
 800a5ec:	687a      	ldr	r2, [r7, #4]
 800a5ee:	7c12      	ldrb	r2, [r2, #16]
 800a5f0:	f107 0108 	add.w	r1, r7, #8
 800a5f4:	4610      	mov	r0, r2
 800a5f6:	4798      	blx	r3
 800a5f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5fa:	e00f      	b.n	800a61c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a5fc:	6839      	ldr	r1, [r7, #0]
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f000 fa49 	bl	800aa96 <USBD_CtlError>
            err++;
 800a604:	7afb      	ldrb	r3, [r7, #11]
 800a606:	3301      	adds	r3, #1
 800a608:	72fb      	strb	r3, [r7, #11]
          break;
 800a60a:	e007      	b.n	800a61c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a60c:	6839      	ldr	r1, [r7, #0]
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f000 fa41 	bl	800aa96 <USBD_CtlError>
          err++;
 800a614:	7afb      	ldrb	r3, [r7, #11]
 800a616:	3301      	adds	r3, #1
 800a618:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a61a:	bf00      	nop
      }
      break;
 800a61c:	e037      	b.n	800a68e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	7c1b      	ldrb	r3, [r3, #16]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d109      	bne.n	800a63a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a62c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a62e:	f107 0208 	add.w	r2, r7, #8
 800a632:	4610      	mov	r0, r2
 800a634:	4798      	blx	r3
 800a636:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a638:	e029      	b.n	800a68e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a63a:	6839      	ldr	r1, [r7, #0]
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f000 fa2a 	bl	800aa96 <USBD_CtlError>
        err++;
 800a642:	7afb      	ldrb	r3, [r7, #11]
 800a644:	3301      	adds	r3, #1
 800a646:	72fb      	strb	r3, [r7, #11]
      break;
 800a648:	e021      	b.n	800a68e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	7c1b      	ldrb	r3, [r3, #16]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d10d      	bne.n	800a66e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a65a:	f107 0208 	add.w	r2, r7, #8
 800a65e:	4610      	mov	r0, r2
 800a660:	4798      	blx	r3
 800a662:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	3301      	adds	r3, #1
 800a668:	2207      	movs	r2, #7
 800a66a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a66c:	e00f      	b.n	800a68e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a66e:	6839      	ldr	r1, [r7, #0]
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f000 fa10 	bl	800aa96 <USBD_CtlError>
        err++;
 800a676:	7afb      	ldrb	r3, [r7, #11]
 800a678:	3301      	adds	r3, #1
 800a67a:	72fb      	strb	r3, [r7, #11]
      break;
 800a67c:	e007      	b.n	800a68e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a67e:	6839      	ldr	r1, [r7, #0]
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 fa08 	bl	800aa96 <USBD_CtlError>
      err++;
 800a686:	7afb      	ldrb	r3, [r7, #11]
 800a688:	3301      	adds	r3, #1
 800a68a:	72fb      	strb	r3, [r7, #11]
      break;
 800a68c:	bf00      	nop
  }

  if (err != 0U)
 800a68e:	7afb      	ldrb	r3, [r7, #11]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d11e      	bne.n	800a6d2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	88db      	ldrh	r3, [r3, #6]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d016      	beq.n	800a6ca <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a69c:	893b      	ldrh	r3, [r7, #8]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d00e      	beq.n	800a6c0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	88da      	ldrh	r2, [r3, #6]
 800a6a6:	893b      	ldrh	r3, [r7, #8]
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	bf28      	it	cs
 800a6ac:	4613      	movcs	r3, r2
 800a6ae:	b29b      	uxth	r3, r3
 800a6b0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a6b2:	893b      	ldrh	r3, [r7, #8]
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	68f9      	ldr	r1, [r7, #12]
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f000 fa5d 	bl	800ab78 <USBD_CtlSendData>
 800a6be:	e009      	b.n	800a6d4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a6c0:	6839      	ldr	r1, [r7, #0]
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f000 f9e7 	bl	800aa96 <USBD_CtlError>
 800a6c8:	e004      	b.n	800a6d4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 faae 	bl	800ac2c <USBD_CtlSendStatus>
 800a6d0:	e000      	b.n	800a6d4 <USBD_GetDescriptor+0x2cc>
    return;
 800a6d2:	bf00      	nop
  }
}
 800a6d4:	3710      	adds	r7, #16
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}
 800a6da:	bf00      	nop

0800a6dc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b084      	sub	sp, #16
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	889b      	ldrh	r3, [r3, #4]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d131      	bne.n	800a752 <USBD_SetAddress+0x76>
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	88db      	ldrh	r3, [r3, #6]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d12d      	bne.n	800a752 <USBD_SetAddress+0x76>
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	885b      	ldrh	r3, [r3, #2]
 800a6fa:	2b7f      	cmp	r3, #127	; 0x7f
 800a6fc:	d829      	bhi.n	800a752 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	885b      	ldrh	r3, [r3, #2]
 800a702:	b2db      	uxtb	r3, r3
 800a704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a708:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a710:	b2db      	uxtb	r3, r3
 800a712:	2b03      	cmp	r3, #3
 800a714:	d104      	bne.n	800a720 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a716:	6839      	ldr	r1, [r7, #0]
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f000 f9bc 	bl	800aa96 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a71e:	e01d      	b.n	800a75c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	7bfa      	ldrb	r2, [r7, #15]
 800a724:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a728:	7bfb      	ldrb	r3, [r7, #15]
 800a72a:	4619      	mov	r1, r3
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f000 ff15 	bl	800b55c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f000 fa7a 	bl	800ac2c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a738:	7bfb      	ldrb	r3, [r7, #15]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d004      	beq.n	800a748 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2202      	movs	r2, #2
 800a742:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a746:	e009      	b.n	800a75c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2201      	movs	r2, #1
 800a74c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a750:	e004      	b.n	800a75c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a752:	6839      	ldr	r1, [r7, #0]
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f000 f99e 	bl	800aa96 <USBD_CtlError>
  }
}
 800a75a:	bf00      	nop
 800a75c:	bf00      	nop
 800a75e:	3710      	adds	r7, #16
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b084      	sub	sp, #16
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a76e:	2300      	movs	r3, #0
 800a770:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	885b      	ldrh	r3, [r3, #2]
 800a776:	b2da      	uxtb	r2, r3
 800a778:	4b4e      	ldr	r3, [pc, #312]	; (800a8b4 <USBD_SetConfig+0x150>)
 800a77a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a77c:	4b4d      	ldr	r3, [pc, #308]	; (800a8b4 <USBD_SetConfig+0x150>)
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	2b01      	cmp	r3, #1
 800a782:	d905      	bls.n	800a790 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a784:	6839      	ldr	r1, [r7, #0]
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f000 f985 	bl	800aa96 <USBD_CtlError>
    return USBD_FAIL;
 800a78c:	2303      	movs	r3, #3
 800a78e:	e08c      	b.n	800a8aa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a796:	b2db      	uxtb	r3, r3
 800a798:	2b02      	cmp	r3, #2
 800a79a:	d002      	beq.n	800a7a2 <USBD_SetConfig+0x3e>
 800a79c:	2b03      	cmp	r3, #3
 800a79e:	d029      	beq.n	800a7f4 <USBD_SetConfig+0x90>
 800a7a0:	e075      	b.n	800a88e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a7a2:	4b44      	ldr	r3, [pc, #272]	; (800a8b4 <USBD_SetConfig+0x150>)
 800a7a4:	781b      	ldrb	r3, [r3, #0]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d020      	beq.n	800a7ec <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a7aa:	4b42      	ldr	r3, [pc, #264]	; (800a8b4 <USBD_SetConfig+0x150>)
 800a7ac:	781b      	ldrb	r3, [r3, #0]
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a7b4:	4b3f      	ldr	r3, [pc, #252]	; (800a8b4 <USBD_SetConfig+0x150>)
 800a7b6:	781b      	ldrb	r3, [r3, #0]
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f7fe ffe7 	bl	800978e <USBD_SetClassConfig>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a7c4:	7bfb      	ldrb	r3, [r7, #15]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d008      	beq.n	800a7dc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a7ca:	6839      	ldr	r1, [r7, #0]
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f000 f962 	bl	800aa96 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2202      	movs	r2, #2
 800a7d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a7da:	e065      	b.n	800a8a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f000 fa25 	bl	800ac2c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2203      	movs	r2, #3
 800a7e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a7ea:	e05d      	b.n	800a8a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f000 fa1d 	bl	800ac2c <USBD_CtlSendStatus>
      break;
 800a7f2:	e059      	b.n	800a8a8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a7f4:	4b2f      	ldr	r3, [pc, #188]	; (800a8b4 <USBD_SetConfig+0x150>)
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d112      	bne.n	800a822 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2202      	movs	r2, #2
 800a800:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a804:	4b2b      	ldr	r3, [pc, #172]	; (800a8b4 <USBD_SetConfig+0x150>)
 800a806:	781b      	ldrb	r3, [r3, #0]
 800a808:	461a      	mov	r2, r3
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a80e:	4b29      	ldr	r3, [pc, #164]	; (800a8b4 <USBD_SetConfig+0x150>)
 800a810:	781b      	ldrb	r3, [r3, #0]
 800a812:	4619      	mov	r1, r3
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f7fe ffd6 	bl	80097c6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f000 fa06 	bl	800ac2c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a820:	e042      	b.n	800a8a8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a822:	4b24      	ldr	r3, [pc, #144]	; (800a8b4 <USBD_SetConfig+0x150>)
 800a824:	781b      	ldrb	r3, [r3, #0]
 800a826:	461a      	mov	r2, r3
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	685b      	ldr	r3, [r3, #4]
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d02a      	beq.n	800a886 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	b2db      	uxtb	r3, r3
 800a836:	4619      	mov	r1, r3
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f7fe ffc4 	bl	80097c6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a83e:	4b1d      	ldr	r3, [pc, #116]	; (800a8b4 <USBD_SetConfig+0x150>)
 800a840:	781b      	ldrb	r3, [r3, #0]
 800a842:	461a      	mov	r2, r3
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a848:	4b1a      	ldr	r3, [pc, #104]	; (800a8b4 <USBD_SetConfig+0x150>)
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	4619      	mov	r1, r3
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f7fe ff9d 	bl	800978e <USBD_SetClassConfig>
 800a854:	4603      	mov	r3, r0
 800a856:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a858:	7bfb      	ldrb	r3, [r7, #15]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d00f      	beq.n	800a87e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a85e:	6839      	ldr	r1, [r7, #0]
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f000 f918 	bl	800aa96 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	685b      	ldr	r3, [r3, #4]
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	4619      	mov	r1, r3
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f7fe ffa9 	bl	80097c6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2202      	movs	r2, #2
 800a878:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a87c:	e014      	b.n	800a8a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f000 f9d4 	bl	800ac2c <USBD_CtlSendStatus>
      break;
 800a884:	e010      	b.n	800a8a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f000 f9d0 	bl	800ac2c <USBD_CtlSendStatus>
      break;
 800a88c:	e00c      	b.n	800a8a8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a88e:	6839      	ldr	r1, [r7, #0]
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 f900 	bl	800aa96 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a896:	4b07      	ldr	r3, [pc, #28]	; (800a8b4 <USBD_SetConfig+0x150>)
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	4619      	mov	r1, r3
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f7fe ff92 	bl	80097c6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a8a2:	2303      	movs	r3, #3
 800a8a4:	73fb      	strb	r3, [r7, #15]
      break;
 800a8a6:	bf00      	nop
  }

  return ret;
 800a8a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3710      	adds	r7, #16
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
 800a8b2:	bf00      	nop
 800a8b4:	2000057c 	.word	0x2000057c

0800a8b8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	88db      	ldrh	r3, [r3, #6]
 800a8c6:	2b01      	cmp	r3, #1
 800a8c8:	d004      	beq.n	800a8d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a8ca:	6839      	ldr	r1, [r7, #0]
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f000 f8e2 	bl	800aa96 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a8d2:	e023      	b.n	800a91c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8da:	b2db      	uxtb	r3, r3
 800a8dc:	2b02      	cmp	r3, #2
 800a8de:	dc02      	bgt.n	800a8e6 <USBD_GetConfig+0x2e>
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	dc03      	bgt.n	800a8ec <USBD_GetConfig+0x34>
 800a8e4:	e015      	b.n	800a912 <USBD_GetConfig+0x5a>
 800a8e6:	2b03      	cmp	r3, #3
 800a8e8:	d00b      	beq.n	800a902 <USBD_GetConfig+0x4a>
 800a8ea:	e012      	b.n	800a912 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	3308      	adds	r3, #8
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	4619      	mov	r1, r3
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f000 f93c 	bl	800ab78 <USBD_CtlSendData>
        break;
 800a900:	e00c      	b.n	800a91c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	3304      	adds	r3, #4
 800a906:	2201      	movs	r2, #1
 800a908:	4619      	mov	r1, r3
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f000 f934 	bl	800ab78 <USBD_CtlSendData>
        break;
 800a910:	e004      	b.n	800a91c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a912:	6839      	ldr	r1, [r7, #0]
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f000 f8be 	bl	800aa96 <USBD_CtlError>
        break;
 800a91a:	bf00      	nop
}
 800a91c:	bf00      	nop
 800a91e:	3708      	adds	r7, #8
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}

0800a924 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b082      	sub	sp, #8
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a934:	b2db      	uxtb	r3, r3
 800a936:	3b01      	subs	r3, #1
 800a938:	2b02      	cmp	r3, #2
 800a93a:	d81e      	bhi.n	800a97a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	88db      	ldrh	r3, [r3, #6]
 800a940:	2b02      	cmp	r3, #2
 800a942:	d004      	beq.n	800a94e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a944:	6839      	ldr	r1, [r7, #0]
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 f8a5 	bl	800aa96 <USBD_CtlError>
        break;
 800a94c:	e01a      	b.n	800a984 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2201      	movs	r2, #1
 800a952:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d005      	beq.n	800a96a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	68db      	ldr	r3, [r3, #12]
 800a962:	f043 0202 	orr.w	r2, r3, #2
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	330c      	adds	r3, #12
 800a96e:	2202      	movs	r2, #2
 800a970:	4619      	mov	r1, r3
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f000 f900 	bl	800ab78 <USBD_CtlSendData>
      break;
 800a978:	e004      	b.n	800a984 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a97a:	6839      	ldr	r1, [r7, #0]
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f000 f88a 	bl	800aa96 <USBD_CtlError>
      break;
 800a982:	bf00      	nop
  }
}
 800a984:	bf00      	nop
 800a986:	3708      	adds	r7, #8
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b082      	sub	sp, #8
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	885b      	ldrh	r3, [r3, #2]
 800a99a:	2b01      	cmp	r3, #1
 800a99c:	d107      	bne.n	800a9ae <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2201      	movs	r2, #1
 800a9a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 f940 	bl	800ac2c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a9ac:	e013      	b.n	800a9d6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	885b      	ldrh	r3, [r3, #2]
 800a9b2:	2b02      	cmp	r3, #2
 800a9b4:	d10b      	bne.n	800a9ce <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	889b      	ldrh	r3, [r3, #4]
 800a9ba:	0a1b      	lsrs	r3, r3, #8
 800a9bc:	b29b      	uxth	r3, r3
 800a9be:	b2da      	uxtb	r2, r3
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f000 f930 	bl	800ac2c <USBD_CtlSendStatus>
}
 800a9cc:	e003      	b.n	800a9d6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a9ce:	6839      	ldr	r1, [r7, #0]
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 f860 	bl	800aa96 <USBD_CtlError>
}
 800a9d6:	bf00      	nop
 800a9d8:	3708      	adds	r7, #8
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}

0800a9de <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9de:	b580      	push	{r7, lr}
 800a9e0:	b082      	sub	sp, #8
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]
 800a9e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9ee:	b2db      	uxtb	r3, r3
 800a9f0:	3b01      	subs	r3, #1
 800a9f2:	2b02      	cmp	r3, #2
 800a9f4:	d80b      	bhi.n	800aa0e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	885b      	ldrh	r3, [r3, #2]
 800a9fa:	2b01      	cmp	r3, #1
 800a9fc:	d10c      	bne.n	800aa18 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2200      	movs	r2, #0
 800aa02:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f000 f910 	bl	800ac2c <USBD_CtlSendStatus>
      }
      break;
 800aa0c:	e004      	b.n	800aa18 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800aa0e:	6839      	ldr	r1, [r7, #0]
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f000 f840 	bl	800aa96 <USBD_CtlError>
      break;
 800aa16:	e000      	b.n	800aa1a <USBD_ClrFeature+0x3c>
      break;
 800aa18:	bf00      	nop
  }
}
 800aa1a:	bf00      	nop
 800aa1c:	3708      	adds	r7, #8
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}

0800aa22 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800aa22:	b580      	push	{r7, lr}
 800aa24:	b084      	sub	sp, #16
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	6078      	str	r0, [r7, #4]
 800aa2a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	781a      	ldrb	r2, [r3, #0]
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	3301      	adds	r3, #1
 800aa3c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	781a      	ldrb	r2, [r3, #0]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	3301      	adds	r3, #1
 800aa4a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800aa4c:	68f8      	ldr	r0, [r7, #12]
 800aa4e:	f7ff fa41 	bl	8009ed4 <SWAPBYTE>
 800aa52:	4603      	mov	r3, r0
 800aa54:	461a      	mov	r2, r3
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	3301      	adds	r3, #1
 800aa5e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	3301      	adds	r3, #1
 800aa64:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800aa66:	68f8      	ldr	r0, [r7, #12]
 800aa68:	f7ff fa34 	bl	8009ed4 <SWAPBYTE>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	461a      	mov	r2, r3
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	3301      	adds	r3, #1
 800aa78:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	3301      	adds	r3, #1
 800aa7e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800aa80:	68f8      	ldr	r0, [r7, #12]
 800aa82:	f7ff fa27 	bl	8009ed4 <SWAPBYTE>
 800aa86:	4603      	mov	r3, r0
 800aa88:	461a      	mov	r2, r3
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	80da      	strh	r2, [r3, #6]
}
 800aa8e:	bf00      	nop
 800aa90:	3710      	adds	r7, #16
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}

0800aa96 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa96:	b580      	push	{r7, lr}
 800aa98:	b082      	sub	sp, #8
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
 800aa9e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800aaa0:	2180      	movs	r1, #128	; 0x80
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 fcf0 	bl	800b488 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800aaa8:	2100      	movs	r1, #0
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f000 fcec 	bl	800b488 <USBD_LL_StallEP>
}
 800aab0:	bf00      	nop
 800aab2:	3708      	adds	r7, #8
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b086      	sub	sp, #24
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	60f8      	str	r0, [r7, #12]
 800aac0:	60b9      	str	r1, [r7, #8]
 800aac2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800aac4:	2300      	movs	r3, #0
 800aac6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d036      	beq.n	800ab3c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800aad2:	6938      	ldr	r0, [r7, #16]
 800aad4:	f000 f836 	bl	800ab44 <USBD_GetLen>
 800aad8:	4603      	mov	r3, r0
 800aada:	3301      	adds	r3, #1
 800aadc:	b29b      	uxth	r3, r3
 800aade:	005b      	lsls	r3, r3, #1
 800aae0:	b29a      	uxth	r2, r3
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800aae6:	7dfb      	ldrb	r3, [r7, #23]
 800aae8:	68ba      	ldr	r2, [r7, #8]
 800aaea:	4413      	add	r3, r2
 800aaec:	687a      	ldr	r2, [r7, #4]
 800aaee:	7812      	ldrb	r2, [r2, #0]
 800aaf0:	701a      	strb	r2, [r3, #0]
  idx++;
 800aaf2:	7dfb      	ldrb	r3, [r7, #23]
 800aaf4:	3301      	adds	r3, #1
 800aaf6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800aaf8:	7dfb      	ldrb	r3, [r7, #23]
 800aafa:	68ba      	ldr	r2, [r7, #8]
 800aafc:	4413      	add	r3, r2
 800aafe:	2203      	movs	r2, #3
 800ab00:	701a      	strb	r2, [r3, #0]
  idx++;
 800ab02:	7dfb      	ldrb	r3, [r7, #23]
 800ab04:	3301      	adds	r3, #1
 800ab06:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ab08:	e013      	b.n	800ab32 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ab0a:	7dfb      	ldrb	r3, [r7, #23]
 800ab0c:	68ba      	ldr	r2, [r7, #8]
 800ab0e:	4413      	add	r3, r2
 800ab10:	693a      	ldr	r2, [r7, #16]
 800ab12:	7812      	ldrb	r2, [r2, #0]
 800ab14:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ab16:	693b      	ldr	r3, [r7, #16]
 800ab18:	3301      	adds	r3, #1
 800ab1a:	613b      	str	r3, [r7, #16]
    idx++;
 800ab1c:	7dfb      	ldrb	r3, [r7, #23]
 800ab1e:	3301      	adds	r3, #1
 800ab20:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ab22:	7dfb      	ldrb	r3, [r7, #23]
 800ab24:	68ba      	ldr	r2, [r7, #8]
 800ab26:	4413      	add	r3, r2
 800ab28:	2200      	movs	r2, #0
 800ab2a:	701a      	strb	r2, [r3, #0]
    idx++;
 800ab2c:	7dfb      	ldrb	r3, [r7, #23]
 800ab2e:	3301      	adds	r3, #1
 800ab30:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	781b      	ldrb	r3, [r3, #0]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d1e7      	bne.n	800ab0a <USBD_GetString+0x52>
 800ab3a:	e000      	b.n	800ab3e <USBD_GetString+0x86>
    return;
 800ab3c:	bf00      	nop
  }
}
 800ab3e:	3718      	adds	r7, #24
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}

0800ab44 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b085      	sub	sp, #20
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ab54:	e005      	b.n	800ab62 <USBD_GetLen+0x1e>
  {
    len++;
 800ab56:	7bfb      	ldrb	r3, [r7, #15]
 800ab58:	3301      	adds	r3, #1
 800ab5a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	3301      	adds	r3, #1
 800ab60:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	781b      	ldrb	r3, [r3, #0]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d1f5      	bne.n	800ab56 <USBD_GetLen+0x12>
  }

  return len;
 800ab6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3714      	adds	r7, #20
 800ab70:	46bd      	mov	sp, r7
 800ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab76:	4770      	bx	lr

0800ab78 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b084      	sub	sp, #16
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	60f8      	str	r0, [r7, #12]
 800ab80:	60b9      	str	r1, [r7, #8]
 800ab82:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	2202      	movs	r2, #2
 800ab88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	687a      	ldr	r2, [r7, #4]
 800ab90:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	687a      	ldr	r2, [r7, #4]
 800ab96:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	68ba      	ldr	r2, [r7, #8]
 800ab9c:	2100      	movs	r1, #0
 800ab9e:	68f8      	ldr	r0, [r7, #12]
 800aba0:	f000 fcfb 	bl	800b59a <USBD_LL_Transmit>

  return USBD_OK;
 800aba4:	2300      	movs	r3, #0
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3710      	adds	r7, #16
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}

0800abae <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800abae:	b580      	push	{r7, lr}
 800abb0:	b084      	sub	sp, #16
 800abb2:	af00      	add	r7, sp, #0
 800abb4:	60f8      	str	r0, [r7, #12]
 800abb6:	60b9      	str	r1, [r7, #8]
 800abb8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	68ba      	ldr	r2, [r7, #8]
 800abbe:	2100      	movs	r1, #0
 800abc0:	68f8      	ldr	r0, [r7, #12]
 800abc2:	f000 fcea 	bl	800b59a <USBD_LL_Transmit>

  return USBD_OK;
 800abc6:	2300      	movs	r3, #0
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3710      	adds	r7, #16
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b084      	sub	sp, #16
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	60f8      	str	r0, [r7, #12]
 800abd8:	60b9      	str	r1, [r7, #8]
 800abda:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2203      	movs	r2, #3
 800abe0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	687a      	ldr	r2, [r7, #4]
 800abe8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	687a      	ldr	r2, [r7, #4]
 800abf0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	68ba      	ldr	r2, [r7, #8]
 800abf8:	2100      	movs	r1, #0
 800abfa:	68f8      	ldr	r0, [r7, #12]
 800abfc:	f000 fcee 	bl	800b5dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac00:	2300      	movs	r3, #0
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	3710      	adds	r7, #16
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}

0800ac0a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ac0a:	b580      	push	{r7, lr}
 800ac0c:	b084      	sub	sp, #16
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	60f8      	str	r0, [r7, #12]
 800ac12:	60b9      	str	r1, [r7, #8]
 800ac14:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	68ba      	ldr	r2, [r7, #8]
 800ac1a:	2100      	movs	r1, #0
 800ac1c:	68f8      	ldr	r0, [r7, #12]
 800ac1e:	f000 fcdd 	bl	800b5dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac22:	2300      	movs	r3, #0
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3710      	adds	r7, #16
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}

0800ac2c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b082      	sub	sp, #8
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2204      	movs	r2, #4
 800ac38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	2200      	movs	r2, #0
 800ac40:	2100      	movs	r1, #0
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f000 fca9 	bl	800b59a <USBD_LL_Transmit>

  return USBD_OK;
 800ac48:	2300      	movs	r3, #0
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3708      	adds	r7, #8
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}

0800ac52 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b082      	sub	sp, #8
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2205      	movs	r2, #5
 800ac5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ac62:	2300      	movs	r3, #0
 800ac64:	2200      	movs	r2, #0
 800ac66:	2100      	movs	r1, #0
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f000 fcb7 	bl	800b5dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac6e:	2300      	movs	r3, #0
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3708      	adds	r7, #8
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}

0800ac78 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	4912      	ldr	r1, [pc, #72]	; (800acc8 <MX_USB_DEVICE_Init+0x50>)
 800ac80:	4812      	ldr	r0, [pc, #72]	; (800accc <MX_USB_DEVICE_Init+0x54>)
 800ac82:	f7fe fd07 	bl	8009694 <USBD_Init>
 800ac86:	4603      	mov	r3, r0
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d001      	beq.n	800ac90 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ac8c:	f7f8 f8b0 	bl	8002df0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ac90:	490f      	ldr	r1, [pc, #60]	; (800acd0 <MX_USB_DEVICE_Init+0x58>)
 800ac92:	480e      	ldr	r0, [pc, #56]	; (800accc <MX_USB_DEVICE_Init+0x54>)
 800ac94:	f7fe fd2e 	bl	80096f4 <USBD_RegisterClass>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d001      	beq.n	800aca2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ac9e:	f7f8 f8a7 	bl	8002df0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800aca2:	490c      	ldr	r1, [pc, #48]	; (800acd4 <MX_USB_DEVICE_Init+0x5c>)
 800aca4:	4809      	ldr	r0, [pc, #36]	; (800accc <MX_USB_DEVICE_Init+0x54>)
 800aca6:	f7fe fc1f 	bl	80094e8 <USBD_CDC_RegisterInterface>
 800acaa:	4603      	mov	r3, r0
 800acac:	2b00      	cmp	r3, #0
 800acae:	d001      	beq.n	800acb4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800acb0:	f7f8 f89e 	bl	8002df0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800acb4:	4805      	ldr	r0, [pc, #20]	; (800accc <MX_USB_DEVICE_Init+0x54>)
 800acb6:	f7fe fd53 	bl	8009760 <USBD_Start>
 800acba:	4603      	mov	r3, r0
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d001      	beq.n	800acc4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800acc0:	f7f8 f896 	bl	8002df0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800acc4:	bf00      	nop
 800acc6:	bd80      	pop	{r7, pc}
 800acc8:	200000ac 	.word	0x200000ac
 800accc:	20000580 	.word	0x20000580
 800acd0:	20000018 	.word	0x20000018
 800acd4:	20000098 	.word	0x20000098

0800acd8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800acdc:	2200      	movs	r2, #0
 800acde:	4905      	ldr	r1, [pc, #20]	; (800acf4 <CDC_Init_FS+0x1c>)
 800ace0:	4805      	ldr	r0, [pc, #20]	; (800acf8 <CDC_Init_FS+0x20>)
 800ace2:	f7fe fc1b 	bl	800951c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ace6:	4905      	ldr	r1, [pc, #20]	; (800acfc <CDC_Init_FS+0x24>)
 800ace8:	4803      	ldr	r0, [pc, #12]	; (800acf8 <CDC_Init_FS+0x20>)
 800acea:	f7fe fc39 	bl	8009560 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800acee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	bd80      	pop	{r7, pc}
 800acf4:	2000105c 	.word	0x2000105c
 800acf8:	20000580 	.word	0x20000580
 800acfc:	2000085c 	.word	0x2000085c

0800ad00 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ad00:	b480      	push	{r7}
 800ad02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ad04:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr

0800ad10 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b083      	sub	sp, #12
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	4603      	mov	r3, r0
 800ad18:	6039      	str	r1, [r7, #0]
 800ad1a:	71fb      	strb	r3, [r7, #7]
 800ad1c:	4613      	mov	r3, r2
 800ad1e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ad20:	79fb      	ldrb	r3, [r7, #7]
 800ad22:	2b23      	cmp	r3, #35	; 0x23
 800ad24:	d84a      	bhi.n	800adbc <CDC_Control_FS+0xac>
 800ad26:	a201      	add	r2, pc, #4	; (adr r2, 800ad2c <CDC_Control_FS+0x1c>)
 800ad28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad2c:	0800adbd 	.word	0x0800adbd
 800ad30:	0800adbd 	.word	0x0800adbd
 800ad34:	0800adbd 	.word	0x0800adbd
 800ad38:	0800adbd 	.word	0x0800adbd
 800ad3c:	0800adbd 	.word	0x0800adbd
 800ad40:	0800adbd 	.word	0x0800adbd
 800ad44:	0800adbd 	.word	0x0800adbd
 800ad48:	0800adbd 	.word	0x0800adbd
 800ad4c:	0800adbd 	.word	0x0800adbd
 800ad50:	0800adbd 	.word	0x0800adbd
 800ad54:	0800adbd 	.word	0x0800adbd
 800ad58:	0800adbd 	.word	0x0800adbd
 800ad5c:	0800adbd 	.word	0x0800adbd
 800ad60:	0800adbd 	.word	0x0800adbd
 800ad64:	0800adbd 	.word	0x0800adbd
 800ad68:	0800adbd 	.word	0x0800adbd
 800ad6c:	0800adbd 	.word	0x0800adbd
 800ad70:	0800adbd 	.word	0x0800adbd
 800ad74:	0800adbd 	.word	0x0800adbd
 800ad78:	0800adbd 	.word	0x0800adbd
 800ad7c:	0800adbd 	.word	0x0800adbd
 800ad80:	0800adbd 	.word	0x0800adbd
 800ad84:	0800adbd 	.word	0x0800adbd
 800ad88:	0800adbd 	.word	0x0800adbd
 800ad8c:	0800adbd 	.word	0x0800adbd
 800ad90:	0800adbd 	.word	0x0800adbd
 800ad94:	0800adbd 	.word	0x0800adbd
 800ad98:	0800adbd 	.word	0x0800adbd
 800ad9c:	0800adbd 	.word	0x0800adbd
 800ada0:	0800adbd 	.word	0x0800adbd
 800ada4:	0800adbd 	.word	0x0800adbd
 800ada8:	0800adbd 	.word	0x0800adbd
 800adac:	0800adbd 	.word	0x0800adbd
 800adb0:	0800adbd 	.word	0x0800adbd
 800adb4:	0800adbd 	.word	0x0800adbd
 800adb8:	0800adbd 	.word	0x0800adbd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800adbc:	bf00      	nop
  }

  return (USBD_OK);
 800adbe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	370c      	adds	r7, #12
 800adc4:	46bd      	mov	sp, r7
 800adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adca:	4770      	bx	lr

0800adcc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b084      	sub	sp, #16
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800add6:	6879      	ldr	r1, [r7, #4]
 800add8:	4811      	ldr	r0, [pc, #68]	; (800ae20 <CDC_Receive_FS+0x54>)
 800adda:	f7fe fbc1 	bl	8009560 <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800adde:	4810      	ldr	r0, [pc, #64]	; (800ae20 <CDC_Receive_FS+0x54>)
 800ade0:	f7fe fc22 	bl	8009628 <USBD_CDC_ReceivePacket>
	  memset (serial_buffer, '\0', 64);  // clear the buffer
 800ade4:	2240      	movs	r2, #64	; 0x40
 800ade6:	2100      	movs	r1, #0
 800ade8:	480e      	ldr	r0, [pc, #56]	; (800ae24 <CDC_Receive_FS+0x58>)
 800adea:	f000 fe97 	bl	800bb1c <memset>
	  uint8_t len = (uint8_t)*Len;
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	73fb      	strb	r3, [r7, #15]
	  memcpy(serial_buffer, Buf, len);  // copy the data to the buffer
 800adf4:	7bfb      	ldrb	r3, [r7, #15]
 800adf6:	461a      	mov	r2, r3
 800adf8:	6879      	ldr	r1, [r7, #4]
 800adfa:	480a      	ldr	r0, [pc, #40]	; (800ae24 <CDC_Receive_FS+0x58>)
 800adfc:	f000 ff09 	bl	800bc12 <memcpy>
	  memset(Buf, '\0', len);   // clear the Buf also
 800ae00:	7bfb      	ldrb	r3, [r7, #15]
 800ae02:	461a      	mov	r2, r3
 800ae04:	2100      	movs	r1, #0
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 fe88 	bl	800bb1c <memset>
	  serial_received(len);
 800ae0c:	7bfb      	ldrb	r3, [r7, #15]
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7f6 fc5e 	bl	80016d0 <serial_received>

  return (USBD_OK);
 800ae14:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3710      	adds	r7, #16
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
 800ae1e:	bf00      	nop
 800ae20:	20000580 	.word	0x20000580
 800ae24:	200001e4 	.word	0x200001e4

0800ae28 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b084      	sub	sp, #16
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
 800ae30:	460b      	mov	r3, r1
 800ae32:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ae34:	2300      	movs	r3, #0
 800ae36:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ae38:	4b0d      	ldr	r3, [pc, #52]	; (800ae70 <CDC_Transmit_FS+0x48>)
 800ae3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae3e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d001      	beq.n	800ae4e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	e00b      	b.n	800ae66 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ae4e:	887b      	ldrh	r3, [r7, #2]
 800ae50:	461a      	mov	r2, r3
 800ae52:	6879      	ldr	r1, [r7, #4]
 800ae54:	4806      	ldr	r0, [pc, #24]	; (800ae70 <CDC_Transmit_FS+0x48>)
 800ae56:	f7fe fb61 	bl	800951c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ae5a:	4805      	ldr	r0, [pc, #20]	; (800ae70 <CDC_Transmit_FS+0x48>)
 800ae5c:	f7fe fb9e 	bl	800959c <USBD_CDC_TransmitPacket>
 800ae60:	4603      	mov	r3, r0
 800ae62:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ae64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3710      	adds	r7, #16
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}
 800ae6e:	bf00      	nop
 800ae70:	20000580 	.word	0x20000580

0800ae74 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b087      	sub	sp, #28
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	60b9      	str	r1, [r7, #8]
 800ae7e:	4613      	mov	r3, r2
 800ae80:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ae82:	2300      	movs	r3, #0
 800ae84:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ae86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	371c      	adds	r7, #28
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae94:	4770      	bx	lr
	...

0800ae98 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b083      	sub	sp, #12
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	4603      	mov	r3, r0
 800aea0:	6039      	str	r1, [r7, #0]
 800aea2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	2212      	movs	r2, #18
 800aea8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800aeaa:	4b03      	ldr	r3, [pc, #12]	; (800aeb8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	370c      	adds	r7, #12
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb6:	4770      	bx	lr
 800aeb8:	200000c8 	.word	0x200000c8

0800aebc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aebc:	b480      	push	{r7}
 800aebe:	b083      	sub	sp, #12
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	4603      	mov	r3, r0
 800aec4:	6039      	str	r1, [r7, #0]
 800aec6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	2204      	movs	r2, #4
 800aecc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aece:	4b03      	ldr	r3, [pc, #12]	; (800aedc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	370c      	adds	r7, #12
 800aed4:	46bd      	mov	sp, r7
 800aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeda:	4770      	bx	lr
 800aedc:	200000dc 	.word	0x200000dc

0800aee0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b082      	sub	sp, #8
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	4603      	mov	r3, r0
 800aee8:	6039      	str	r1, [r7, #0]
 800aeea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aeec:	79fb      	ldrb	r3, [r7, #7]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d105      	bne.n	800aefe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aef2:	683a      	ldr	r2, [r7, #0]
 800aef4:	4907      	ldr	r1, [pc, #28]	; (800af14 <USBD_FS_ProductStrDescriptor+0x34>)
 800aef6:	4808      	ldr	r0, [pc, #32]	; (800af18 <USBD_FS_ProductStrDescriptor+0x38>)
 800aef8:	f7ff fdde 	bl	800aab8 <USBD_GetString>
 800aefc:	e004      	b.n	800af08 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aefe:	683a      	ldr	r2, [r7, #0]
 800af00:	4904      	ldr	r1, [pc, #16]	; (800af14 <USBD_FS_ProductStrDescriptor+0x34>)
 800af02:	4805      	ldr	r0, [pc, #20]	; (800af18 <USBD_FS_ProductStrDescriptor+0x38>)
 800af04:	f7ff fdd8 	bl	800aab8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800af08:	4b02      	ldr	r3, [pc, #8]	; (800af14 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3708      	adds	r7, #8
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
 800af12:	bf00      	nop
 800af14:	2000185c 	.word	0x2000185c
 800af18:	0800d9d4 	.word	0x0800d9d4

0800af1c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b082      	sub	sp, #8
 800af20:	af00      	add	r7, sp, #0
 800af22:	4603      	mov	r3, r0
 800af24:	6039      	str	r1, [r7, #0]
 800af26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800af28:	683a      	ldr	r2, [r7, #0]
 800af2a:	4904      	ldr	r1, [pc, #16]	; (800af3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800af2c:	4804      	ldr	r0, [pc, #16]	; (800af40 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800af2e:	f7ff fdc3 	bl	800aab8 <USBD_GetString>
  return USBD_StrDesc;
 800af32:	4b02      	ldr	r3, [pc, #8]	; (800af3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800af34:	4618      	mov	r0, r3
 800af36:	3708      	adds	r7, #8
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}
 800af3c:	2000185c 	.word	0x2000185c
 800af40:	0800d9ec 	.word	0x0800d9ec

0800af44 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b082      	sub	sp, #8
 800af48:	af00      	add	r7, sp, #0
 800af4a:	4603      	mov	r3, r0
 800af4c:	6039      	str	r1, [r7, #0]
 800af4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	221a      	movs	r2, #26
 800af54:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800af56:	f000 f843 	bl	800afe0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800af5a:	4b02      	ldr	r3, [pc, #8]	; (800af64 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3708      	adds	r7, #8
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}
 800af64:	200000e0 	.word	0x200000e0

0800af68 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	4603      	mov	r3, r0
 800af70:	6039      	str	r1, [r7, #0]
 800af72:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800af74:	79fb      	ldrb	r3, [r7, #7]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d105      	bne.n	800af86 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800af7a:	683a      	ldr	r2, [r7, #0]
 800af7c:	4907      	ldr	r1, [pc, #28]	; (800af9c <USBD_FS_ConfigStrDescriptor+0x34>)
 800af7e:	4808      	ldr	r0, [pc, #32]	; (800afa0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800af80:	f7ff fd9a 	bl	800aab8 <USBD_GetString>
 800af84:	e004      	b.n	800af90 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800af86:	683a      	ldr	r2, [r7, #0]
 800af88:	4904      	ldr	r1, [pc, #16]	; (800af9c <USBD_FS_ConfigStrDescriptor+0x34>)
 800af8a:	4805      	ldr	r0, [pc, #20]	; (800afa0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800af8c:	f7ff fd94 	bl	800aab8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800af90:	4b02      	ldr	r3, [pc, #8]	; (800af9c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800af92:	4618      	mov	r0, r3
 800af94:	3708      	adds	r7, #8
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
 800af9a:	bf00      	nop
 800af9c:	2000185c 	.word	0x2000185c
 800afa0:	0800da00 	.word	0x0800da00

0800afa4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b082      	sub	sp, #8
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	4603      	mov	r3, r0
 800afac:	6039      	str	r1, [r7, #0]
 800afae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800afb0:	79fb      	ldrb	r3, [r7, #7]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d105      	bne.n	800afc2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800afb6:	683a      	ldr	r2, [r7, #0]
 800afb8:	4907      	ldr	r1, [pc, #28]	; (800afd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800afba:	4808      	ldr	r0, [pc, #32]	; (800afdc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800afbc:	f7ff fd7c 	bl	800aab8 <USBD_GetString>
 800afc0:	e004      	b.n	800afcc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800afc2:	683a      	ldr	r2, [r7, #0]
 800afc4:	4904      	ldr	r1, [pc, #16]	; (800afd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800afc6:	4805      	ldr	r0, [pc, #20]	; (800afdc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800afc8:	f7ff fd76 	bl	800aab8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800afcc:	4b02      	ldr	r3, [pc, #8]	; (800afd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3708      	adds	r7, #8
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}
 800afd6:	bf00      	nop
 800afd8:	2000185c 	.word	0x2000185c
 800afdc:	0800da0c 	.word	0x0800da0c

0800afe0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b084      	sub	sp, #16
 800afe4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800afe6:	4b0f      	ldr	r3, [pc, #60]	; (800b024 <Get_SerialNum+0x44>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800afec:	4b0e      	ldr	r3, [pc, #56]	; (800b028 <Get_SerialNum+0x48>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800aff2:	4b0e      	ldr	r3, [pc, #56]	; (800b02c <Get_SerialNum+0x4c>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800aff8:	68fa      	ldr	r2, [r7, #12]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	4413      	add	r3, r2
 800affe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d009      	beq.n	800b01a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b006:	2208      	movs	r2, #8
 800b008:	4909      	ldr	r1, [pc, #36]	; (800b030 <Get_SerialNum+0x50>)
 800b00a:	68f8      	ldr	r0, [r7, #12]
 800b00c:	f000 f814 	bl	800b038 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b010:	2204      	movs	r2, #4
 800b012:	4908      	ldr	r1, [pc, #32]	; (800b034 <Get_SerialNum+0x54>)
 800b014:	68b8      	ldr	r0, [r7, #8]
 800b016:	f000 f80f 	bl	800b038 <IntToUnicode>
  }
}
 800b01a:	bf00      	nop
 800b01c:	3710      	adds	r7, #16
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}
 800b022:	bf00      	nop
 800b024:	1fff7a10 	.word	0x1fff7a10
 800b028:	1fff7a14 	.word	0x1fff7a14
 800b02c:	1fff7a18 	.word	0x1fff7a18
 800b030:	200000e2 	.word	0x200000e2
 800b034:	200000f2 	.word	0x200000f2

0800b038 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b038:	b480      	push	{r7}
 800b03a:	b087      	sub	sp, #28
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	60f8      	str	r0, [r7, #12]
 800b040:	60b9      	str	r1, [r7, #8]
 800b042:	4613      	mov	r3, r2
 800b044:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b046:	2300      	movs	r3, #0
 800b048:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b04a:	2300      	movs	r3, #0
 800b04c:	75fb      	strb	r3, [r7, #23]
 800b04e:	e027      	b.n	800b0a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	0f1b      	lsrs	r3, r3, #28
 800b054:	2b09      	cmp	r3, #9
 800b056:	d80b      	bhi.n	800b070 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	0f1b      	lsrs	r3, r3, #28
 800b05c:	b2da      	uxtb	r2, r3
 800b05e:	7dfb      	ldrb	r3, [r7, #23]
 800b060:	005b      	lsls	r3, r3, #1
 800b062:	4619      	mov	r1, r3
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	440b      	add	r3, r1
 800b068:	3230      	adds	r2, #48	; 0x30
 800b06a:	b2d2      	uxtb	r2, r2
 800b06c:	701a      	strb	r2, [r3, #0]
 800b06e:	e00a      	b.n	800b086 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	0f1b      	lsrs	r3, r3, #28
 800b074:	b2da      	uxtb	r2, r3
 800b076:	7dfb      	ldrb	r3, [r7, #23]
 800b078:	005b      	lsls	r3, r3, #1
 800b07a:	4619      	mov	r1, r3
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	440b      	add	r3, r1
 800b080:	3237      	adds	r2, #55	; 0x37
 800b082:	b2d2      	uxtb	r2, r2
 800b084:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	011b      	lsls	r3, r3, #4
 800b08a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b08c:	7dfb      	ldrb	r3, [r7, #23]
 800b08e:	005b      	lsls	r3, r3, #1
 800b090:	3301      	adds	r3, #1
 800b092:	68ba      	ldr	r2, [r7, #8]
 800b094:	4413      	add	r3, r2
 800b096:	2200      	movs	r2, #0
 800b098:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b09a:	7dfb      	ldrb	r3, [r7, #23]
 800b09c:	3301      	adds	r3, #1
 800b09e:	75fb      	strb	r3, [r7, #23]
 800b0a0:	7dfa      	ldrb	r2, [r7, #23]
 800b0a2:	79fb      	ldrb	r3, [r7, #7]
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d3d3      	bcc.n	800b050 <IntToUnicode+0x18>
  }
}
 800b0a8:	bf00      	nop
 800b0aa:	bf00      	nop
 800b0ac:	371c      	adds	r7, #28
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b4:	4770      	bx	lr
	...

0800b0b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b08a      	sub	sp, #40	; 0x28
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b0c0:	f107 0314 	add.w	r3, r7, #20
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	601a      	str	r2, [r3, #0]
 800b0c8:	605a      	str	r2, [r3, #4]
 800b0ca:	609a      	str	r2, [r3, #8]
 800b0cc:	60da      	str	r2, [r3, #12]
 800b0ce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b0d8:	d13a      	bne.n	800b150 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b0da:	2300      	movs	r3, #0
 800b0dc:	613b      	str	r3, [r7, #16]
 800b0de:	4b1e      	ldr	r3, [pc, #120]	; (800b158 <HAL_PCD_MspInit+0xa0>)
 800b0e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0e2:	4a1d      	ldr	r2, [pc, #116]	; (800b158 <HAL_PCD_MspInit+0xa0>)
 800b0e4:	f043 0301 	orr.w	r3, r3, #1
 800b0e8:	6313      	str	r3, [r2, #48]	; 0x30
 800b0ea:	4b1b      	ldr	r3, [pc, #108]	; (800b158 <HAL_PCD_MspInit+0xa0>)
 800b0ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ee:	f003 0301 	and.w	r3, r3, #1
 800b0f2:	613b      	str	r3, [r7, #16]
 800b0f4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b0f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b0fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b0fc:	2302      	movs	r3, #2
 800b0fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b100:	2300      	movs	r3, #0
 800b102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b104:	2303      	movs	r3, #3
 800b106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b108:	230a      	movs	r3, #10
 800b10a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b10c:	f107 0314 	add.w	r3, r7, #20
 800b110:	4619      	mov	r1, r3
 800b112:	4812      	ldr	r0, [pc, #72]	; (800b15c <HAL_PCD_MspInit+0xa4>)
 800b114:	f7f8 feca 	bl	8003eac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b118:	4b0f      	ldr	r3, [pc, #60]	; (800b158 <HAL_PCD_MspInit+0xa0>)
 800b11a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b11c:	4a0e      	ldr	r2, [pc, #56]	; (800b158 <HAL_PCD_MspInit+0xa0>)
 800b11e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b122:	6353      	str	r3, [r2, #52]	; 0x34
 800b124:	2300      	movs	r3, #0
 800b126:	60fb      	str	r3, [r7, #12]
 800b128:	4b0b      	ldr	r3, [pc, #44]	; (800b158 <HAL_PCD_MspInit+0xa0>)
 800b12a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b12c:	4a0a      	ldr	r2, [pc, #40]	; (800b158 <HAL_PCD_MspInit+0xa0>)
 800b12e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b132:	6453      	str	r3, [r2, #68]	; 0x44
 800b134:	4b08      	ldr	r3, [pc, #32]	; (800b158 <HAL_PCD_MspInit+0xa0>)
 800b136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b138:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b13c:	60fb      	str	r3, [r7, #12]
 800b13e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b140:	2200      	movs	r2, #0
 800b142:	2100      	movs	r1, #0
 800b144:	2043      	movs	r0, #67	; 0x43
 800b146:	f7f8 fe7a 	bl	8003e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b14a:	2043      	movs	r0, #67	; 0x43
 800b14c:	f7f8 fe93 	bl	8003e76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b150:	bf00      	nop
 800b152:	3728      	adds	r7, #40	; 0x28
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}
 800b158:	40023800 	.word	0x40023800
 800b15c:	40020000 	.word	0x40020000

0800b160 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b082      	sub	sp, #8
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b174:	4619      	mov	r1, r3
 800b176:	4610      	mov	r0, r2
 800b178:	f7fe fb3f 	bl	80097fa <USBD_LL_SetupStage>
}
 800b17c:	bf00      	nop
 800b17e:	3708      	adds	r7, #8
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}

0800b184 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b082      	sub	sp, #8
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	460b      	mov	r3, r1
 800b18e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b196:	78fa      	ldrb	r2, [r7, #3]
 800b198:	6879      	ldr	r1, [r7, #4]
 800b19a:	4613      	mov	r3, r2
 800b19c:	00db      	lsls	r3, r3, #3
 800b19e:	4413      	add	r3, r2
 800b1a0:	009b      	lsls	r3, r3, #2
 800b1a2:	440b      	add	r3, r1
 800b1a4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b1a8:	681a      	ldr	r2, [r3, #0]
 800b1aa:	78fb      	ldrb	r3, [r7, #3]
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	f7fe fb79 	bl	80098a4 <USBD_LL_DataOutStage>
}
 800b1b2:	bf00      	nop
 800b1b4:	3708      	adds	r7, #8
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}

0800b1ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1ba:	b580      	push	{r7, lr}
 800b1bc:	b082      	sub	sp, #8
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	6078      	str	r0, [r7, #4]
 800b1c2:	460b      	mov	r3, r1
 800b1c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b1cc:	78fa      	ldrb	r2, [r7, #3]
 800b1ce:	6879      	ldr	r1, [r7, #4]
 800b1d0:	4613      	mov	r3, r2
 800b1d2:	00db      	lsls	r3, r3, #3
 800b1d4:	4413      	add	r3, r2
 800b1d6:	009b      	lsls	r3, r3, #2
 800b1d8:	440b      	add	r3, r1
 800b1da:	334c      	adds	r3, #76	; 0x4c
 800b1dc:	681a      	ldr	r2, [r3, #0]
 800b1de:	78fb      	ldrb	r3, [r7, #3]
 800b1e0:	4619      	mov	r1, r3
 800b1e2:	f7fe fc12 	bl	8009a0a <USBD_LL_DataInStage>
}
 800b1e6:	bf00      	nop
 800b1e8:	3708      	adds	r7, #8
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}

0800b1ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1ee:	b580      	push	{r7, lr}
 800b1f0:	b082      	sub	sp, #8
 800b1f2:	af00      	add	r7, sp, #0
 800b1f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f7fe fd46 	bl	8009c8e <USBD_LL_SOF>
}
 800b202:	bf00      	nop
 800b204:	3708      	adds	r7, #8
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}

0800b20a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b20a:	b580      	push	{r7, lr}
 800b20c:	b084      	sub	sp, #16
 800b20e:	af00      	add	r7, sp, #0
 800b210:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b212:	2301      	movs	r3, #1
 800b214:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	68db      	ldr	r3, [r3, #12]
 800b21a:	2b02      	cmp	r3, #2
 800b21c:	d001      	beq.n	800b222 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b21e:	f7f7 fde7 	bl	8002df0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b228:	7bfa      	ldrb	r2, [r7, #15]
 800b22a:	4611      	mov	r1, r2
 800b22c:	4618      	mov	r0, r3
 800b22e:	f7fe fcf0 	bl	8009c12 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b238:	4618      	mov	r0, r3
 800b23a:	f7fe fc98 	bl	8009b6e <USBD_LL_Reset>
}
 800b23e:	bf00      	nop
 800b240:	3710      	adds	r7, #16
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}
	...

0800b248 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b082      	sub	sp, #8
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b256:	4618      	mov	r0, r3
 800b258:	f7fe fceb 	bl	8009c32 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	687a      	ldr	r2, [r7, #4]
 800b268:	6812      	ldr	r2, [r2, #0]
 800b26a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b26e:	f043 0301 	orr.w	r3, r3, #1
 800b272:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6a1b      	ldr	r3, [r3, #32]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d005      	beq.n	800b288 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b27c:	4b04      	ldr	r3, [pc, #16]	; (800b290 <HAL_PCD_SuspendCallback+0x48>)
 800b27e:	691b      	ldr	r3, [r3, #16]
 800b280:	4a03      	ldr	r2, [pc, #12]	; (800b290 <HAL_PCD_SuspendCallback+0x48>)
 800b282:	f043 0306 	orr.w	r3, r3, #6
 800b286:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b288:	bf00      	nop
 800b28a:	3708      	adds	r7, #8
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}
 800b290:	e000ed00 	.word	0xe000ed00

0800b294 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b082      	sub	sp, #8
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f7fe fcdb 	bl	8009c5e <USBD_LL_Resume>
}
 800b2a8:	bf00      	nop
 800b2aa:	3708      	adds	r7, #8
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}

0800b2b0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b082      	sub	sp, #8
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	460b      	mov	r3, r1
 800b2ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b2c2:	78fa      	ldrb	r2, [r7, #3]
 800b2c4:	4611      	mov	r1, r2
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f7fe fd33 	bl	8009d32 <USBD_LL_IsoOUTIncomplete>
}
 800b2cc:	bf00      	nop
 800b2ce:	3708      	adds	r7, #8
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}

0800b2d4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b082      	sub	sp, #8
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	460b      	mov	r3, r1
 800b2de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b2e6:	78fa      	ldrb	r2, [r7, #3]
 800b2e8:	4611      	mov	r1, r2
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f7fe fcef 	bl	8009cce <USBD_LL_IsoINIncomplete>
}
 800b2f0:	bf00      	nop
 800b2f2:	3708      	adds	r7, #8
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b082      	sub	sp, #8
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b306:	4618      	mov	r0, r3
 800b308:	f7fe fd45 	bl	8009d96 <USBD_LL_DevConnected>
}
 800b30c:	bf00      	nop
 800b30e:	3708      	adds	r7, #8
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}

0800b314 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b082      	sub	sp, #8
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b322:	4618      	mov	r0, r3
 800b324:	f7fe fd42 	bl	8009dac <USBD_LL_DevDisconnected>
}
 800b328:	bf00      	nop
 800b32a:	3708      	adds	r7, #8
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}

0800b330 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b082      	sub	sp, #8
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	781b      	ldrb	r3, [r3, #0]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d13c      	bne.n	800b3ba <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b340:	4a20      	ldr	r2, [pc, #128]	; (800b3c4 <USBD_LL_Init+0x94>)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	4a1e      	ldr	r2, [pc, #120]	; (800b3c4 <USBD_LL_Init+0x94>)
 800b34c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b350:	4b1c      	ldr	r3, [pc, #112]	; (800b3c4 <USBD_LL_Init+0x94>)
 800b352:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b356:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b358:	4b1a      	ldr	r3, [pc, #104]	; (800b3c4 <USBD_LL_Init+0x94>)
 800b35a:	2204      	movs	r2, #4
 800b35c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b35e:	4b19      	ldr	r3, [pc, #100]	; (800b3c4 <USBD_LL_Init+0x94>)
 800b360:	2202      	movs	r2, #2
 800b362:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b364:	4b17      	ldr	r3, [pc, #92]	; (800b3c4 <USBD_LL_Init+0x94>)
 800b366:	2200      	movs	r2, #0
 800b368:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b36a:	4b16      	ldr	r3, [pc, #88]	; (800b3c4 <USBD_LL_Init+0x94>)
 800b36c:	2202      	movs	r2, #2
 800b36e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b370:	4b14      	ldr	r3, [pc, #80]	; (800b3c4 <USBD_LL_Init+0x94>)
 800b372:	2200      	movs	r2, #0
 800b374:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b376:	4b13      	ldr	r3, [pc, #76]	; (800b3c4 <USBD_LL_Init+0x94>)
 800b378:	2200      	movs	r2, #0
 800b37a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b37c:	4b11      	ldr	r3, [pc, #68]	; (800b3c4 <USBD_LL_Init+0x94>)
 800b37e:	2200      	movs	r2, #0
 800b380:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b382:	4b10      	ldr	r3, [pc, #64]	; (800b3c4 <USBD_LL_Init+0x94>)
 800b384:	2200      	movs	r2, #0
 800b386:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b388:	4b0e      	ldr	r3, [pc, #56]	; (800b3c4 <USBD_LL_Init+0x94>)
 800b38a:	2200      	movs	r2, #0
 800b38c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b38e:	480d      	ldr	r0, [pc, #52]	; (800b3c4 <USBD_LL_Init+0x94>)
 800b390:	f7f8 ff5a 	bl	8004248 <HAL_PCD_Init>
 800b394:	4603      	mov	r3, r0
 800b396:	2b00      	cmp	r3, #0
 800b398:	d001      	beq.n	800b39e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b39a:	f7f7 fd29 	bl	8002df0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b39e:	2180      	movs	r1, #128	; 0x80
 800b3a0:	4808      	ldr	r0, [pc, #32]	; (800b3c4 <USBD_LL_Init+0x94>)
 800b3a2:	f7fa f9b2 	bl	800570a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b3a6:	2240      	movs	r2, #64	; 0x40
 800b3a8:	2100      	movs	r1, #0
 800b3aa:	4806      	ldr	r0, [pc, #24]	; (800b3c4 <USBD_LL_Init+0x94>)
 800b3ac:	f7fa f966 	bl	800567c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b3b0:	2280      	movs	r2, #128	; 0x80
 800b3b2:	2101      	movs	r1, #1
 800b3b4:	4803      	ldr	r0, [pc, #12]	; (800b3c4 <USBD_LL_Init+0x94>)
 800b3b6:	f7fa f961 	bl	800567c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b3ba:	2300      	movs	r3, #0
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3708      	adds	r7, #8
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}
 800b3c4:	20001a5c 	.word	0x20001a5c

0800b3c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b084      	sub	sp, #16
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f7f9 f84f 	bl	8004482 <HAL_PCD_Start>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3e8:	7bfb      	ldrb	r3, [r7, #15]
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f000 f942 	bl	800b674 <USBD_Get_USB_Status>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3710      	adds	r7, #16
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}

0800b3fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b3fe:	b580      	push	{r7, lr}
 800b400:	b084      	sub	sp, #16
 800b402:	af00      	add	r7, sp, #0
 800b404:	6078      	str	r0, [r7, #4]
 800b406:	4608      	mov	r0, r1
 800b408:	4611      	mov	r1, r2
 800b40a:	461a      	mov	r2, r3
 800b40c:	4603      	mov	r3, r0
 800b40e:	70fb      	strb	r3, [r7, #3]
 800b410:	460b      	mov	r3, r1
 800b412:	70bb      	strb	r3, [r7, #2]
 800b414:	4613      	mov	r3, r2
 800b416:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b418:	2300      	movs	r3, #0
 800b41a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b41c:	2300      	movs	r3, #0
 800b41e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b426:	78bb      	ldrb	r3, [r7, #2]
 800b428:	883a      	ldrh	r2, [r7, #0]
 800b42a:	78f9      	ldrb	r1, [r7, #3]
 800b42c:	f7f9 fd20 	bl	8004e70 <HAL_PCD_EP_Open>
 800b430:	4603      	mov	r3, r0
 800b432:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b434:	7bfb      	ldrb	r3, [r7, #15]
 800b436:	4618      	mov	r0, r3
 800b438:	f000 f91c 	bl	800b674 <USBD_Get_USB_Status>
 800b43c:	4603      	mov	r3, r0
 800b43e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b440:	7bbb      	ldrb	r3, [r7, #14]
}
 800b442:	4618      	mov	r0, r3
 800b444:	3710      	adds	r7, #16
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}

0800b44a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b44a:	b580      	push	{r7, lr}
 800b44c:	b084      	sub	sp, #16
 800b44e:	af00      	add	r7, sp, #0
 800b450:	6078      	str	r0, [r7, #4]
 800b452:	460b      	mov	r3, r1
 800b454:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b456:	2300      	movs	r3, #0
 800b458:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b45a:	2300      	movs	r3, #0
 800b45c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b464:	78fa      	ldrb	r2, [r7, #3]
 800b466:	4611      	mov	r1, r2
 800b468:	4618      	mov	r0, r3
 800b46a:	f7f9 fd69 	bl	8004f40 <HAL_PCD_EP_Close>
 800b46e:	4603      	mov	r3, r0
 800b470:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b472:	7bfb      	ldrb	r3, [r7, #15]
 800b474:	4618      	mov	r0, r3
 800b476:	f000 f8fd 	bl	800b674 <USBD_Get_USB_Status>
 800b47a:	4603      	mov	r3, r0
 800b47c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b47e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b480:	4618      	mov	r0, r3
 800b482:	3710      	adds	r7, #16
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}

0800b488 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b084      	sub	sp, #16
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	460b      	mov	r3, r1
 800b492:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b494:	2300      	movs	r3, #0
 800b496:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b498:	2300      	movs	r3, #0
 800b49a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b4a2:	78fa      	ldrb	r2, [r7, #3]
 800b4a4:	4611      	mov	r1, r2
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f7f9 fe41 	bl	800512e <HAL_PCD_EP_SetStall>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4b0:	7bfb      	ldrb	r3, [r7, #15]
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f000 f8de 	bl	800b674 <USBD_Get_USB_Status>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3710      	adds	r7, #16
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}

0800b4c6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b4c6:	b580      	push	{r7, lr}
 800b4c8:	b084      	sub	sp, #16
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	6078      	str	r0, [r7, #4]
 800b4ce:	460b      	mov	r3, r1
 800b4d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b4e0:	78fa      	ldrb	r2, [r7, #3]
 800b4e2:	4611      	mov	r1, r2
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f7f9 fe86 	bl	80051f6 <HAL_PCD_EP_ClrStall>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4ee:	7bfb      	ldrb	r3, [r7, #15]
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f000 f8bf 	bl	800b674 <USBD_Get_USB_Status>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3710      	adds	r7, #16
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b504:	b480      	push	{r7}
 800b506:	b085      	sub	sp, #20
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	460b      	mov	r3, r1
 800b50e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b516:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b518:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	da0b      	bge.n	800b538 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b520:	78fb      	ldrb	r3, [r7, #3]
 800b522:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b526:	68f9      	ldr	r1, [r7, #12]
 800b528:	4613      	mov	r3, r2
 800b52a:	00db      	lsls	r3, r3, #3
 800b52c:	4413      	add	r3, r2
 800b52e:	009b      	lsls	r3, r3, #2
 800b530:	440b      	add	r3, r1
 800b532:	333e      	adds	r3, #62	; 0x3e
 800b534:	781b      	ldrb	r3, [r3, #0]
 800b536:	e00b      	b.n	800b550 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b538:	78fb      	ldrb	r3, [r7, #3]
 800b53a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b53e:	68f9      	ldr	r1, [r7, #12]
 800b540:	4613      	mov	r3, r2
 800b542:	00db      	lsls	r3, r3, #3
 800b544:	4413      	add	r3, r2
 800b546:	009b      	lsls	r3, r3, #2
 800b548:	440b      	add	r3, r1
 800b54a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b54e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b550:	4618      	mov	r0, r3
 800b552:	3714      	adds	r7, #20
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr

0800b55c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b084      	sub	sp, #16
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	460b      	mov	r3, r1
 800b566:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b568:	2300      	movs	r3, #0
 800b56a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b56c:	2300      	movs	r3, #0
 800b56e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b576:	78fa      	ldrb	r2, [r7, #3]
 800b578:	4611      	mov	r1, r2
 800b57a:	4618      	mov	r0, r3
 800b57c:	f7f9 fc53 	bl	8004e26 <HAL_PCD_SetAddress>
 800b580:	4603      	mov	r3, r0
 800b582:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b584:	7bfb      	ldrb	r3, [r7, #15]
 800b586:	4618      	mov	r0, r3
 800b588:	f000 f874 	bl	800b674 <USBD_Get_USB_Status>
 800b58c:	4603      	mov	r3, r0
 800b58e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b590:	7bbb      	ldrb	r3, [r7, #14]
}
 800b592:	4618      	mov	r0, r3
 800b594:	3710      	adds	r7, #16
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}

0800b59a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b59a:	b580      	push	{r7, lr}
 800b59c:	b086      	sub	sp, #24
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	60f8      	str	r0, [r7, #12]
 800b5a2:	607a      	str	r2, [r7, #4]
 800b5a4:	603b      	str	r3, [r7, #0]
 800b5a6:	460b      	mov	r3, r1
 800b5a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b5b8:	7af9      	ldrb	r1, [r7, #11]
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	687a      	ldr	r2, [r7, #4]
 800b5be:	f7f9 fd6c 	bl	800509a <HAL_PCD_EP_Transmit>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5c6:	7dfb      	ldrb	r3, [r7, #23]
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f000 f853 	bl	800b674 <USBD_Get_USB_Status>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b5d2:	7dbb      	ldrb	r3, [r7, #22]
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3718      	adds	r7, #24
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b086      	sub	sp, #24
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	60f8      	str	r0, [r7, #12]
 800b5e4:	607a      	str	r2, [r7, #4]
 800b5e6:	603b      	str	r3, [r7, #0]
 800b5e8:	460b      	mov	r3, r1
 800b5ea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b5fa:	7af9      	ldrb	r1, [r7, #11]
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	687a      	ldr	r2, [r7, #4]
 800b600:	f7f9 fce8 	bl	8004fd4 <HAL_PCD_EP_Receive>
 800b604:	4603      	mov	r3, r0
 800b606:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b608:	7dfb      	ldrb	r3, [r7, #23]
 800b60a:	4618      	mov	r0, r3
 800b60c:	f000 f832 	bl	800b674 <USBD_Get_USB_Status>
 800b610:	4603      	mov	r3, r0
 800b612:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b614:	7dbb      	ldrb	r3, [r7, #22]
}
 800b616:	4618      	mov	r0, r3
 800b618:	3718      	adds	r7, #24
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}

0800b61e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b61e:	b580      	push	{r7, lr}
 800b620:	b082      	sub	sp, #8
 800b622:	af00      	add	r7, sp, #0
 800b624:	6078      	str	r0, [r7, #4]
 800b626:	460b      	mov	r3, r1
 800b628:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b630:	78fa      	ldrb	r2, [r7, #3]
 800b632:	4611      	mov	r1, r2
 800b634:	4618      	mov	r0, r3
 800b636:	f7f9 fd18 	bl	800506a <HAL_PCD_EP_GetRxCount>
 800b63a:	4603      	mov	r3, r0
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3708      	adds	r7, #8
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}

0800b644 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b644:	b480      	push	{r7}
 800b646:	b083      	sub	sp, #12
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b64c:	4b03      	ldr	r3, [pc, #12]	; (800b65c <USBD_static_malloc+0x18>)
}
 800b64e:	4618      	mov	r0, r3
 800b650:	370c      	adds	r7, #12
 800b652:	46bd      	mov	sp, r7
 800b654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b658:	4770      	bx	lr
 800b65a:	bf00      	nop
 800b65c:	20001f68 	.word	0x20001f68

0800b660 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b660:	b480      	push	{r7}
 800b662:	b083      	sub	sp, #12
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]

}
 800b668:	bf00      	nop
 800b66a:	370c      	adds	r7, #12
 800b66c:	46bd      	mov	sp, r7
 800b66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b672:	4770      	bx	lr

0800b674 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b674:	b480      	push	{r7}
 800b676:	b085      	sub	sp, #20
 800b678:	af00      	add	r7, sp, #0
 800b67a:	4603      	mov	r3, r0
 800b67c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b67e:	2300      	movs	r3, #0
 800b680:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b682:	79fb      	ldrb	r3, [r7, #7]
 800b684:	2b03      	cmp	r3, #3
 800b686:	d817      	bhi.n	800b6b8 <USBD_Get_USB_Status+0x44>
 800b688:	a201      	add	r2, pc, #4	; (adr r2, 800b690 <USBD_Get_USB_Status+0x1c>)
 800b68a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b68e:	bf00      	nop
 800b690:	0800b6a1 	.word	0x0800b6a1
 800b694:	0800b6a7 	.word	0x0800b6a7
 800b698:	0800b6ad 	.word	0x0800b6ad
 800b69c:	0800b6b3 	.word	0x0800b6b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	73fb      	strb	r3, [r7, #15]
    break;
 800b6a4:	e00b      	b.n	800b6be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b6a6:	2303      	movs	r3, #3
 800b6a8:	73fb      	strb	r3, [r7, #15]
    break;
 800b6aa:	e008      	b.n	800b6be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	73fb      	strb	r3, [r7, #15]
    break;
 800b6b0:	e005      	b.n	800b6be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b6b2:	2303      	movs	r3, #3
 800b6b4:	73fb      	strb	r3, [r7, #15]
    break;
 800b6b6:	e002      	b.n	800b6be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b6b8:	2303      	movs	r3, #3
 800b6ba:	73fb      	strb	r3, [r7, #15]
    break;
 800b6bc:	bf00      	nop
  }
  return usb_status;
 800b6be:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3714      	adds	r7, #20
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr

0800b6cc <std>:
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	b510      	push	{r4, lr}
 800b6d0:	4604      	mov	r4, r0
 800b6d2:	e9c0 3300 	strd	r3, r3, [r0]
 800b6d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b6da:	6083      	str	r3, [r0, #8]
 800b6dc:	8181      	strh	r1, [r0, #12]
 800b6de:	6643      	str	r3, [r0, #100]	; 0x64
 800b6e0:	81c2      	strh	r2, [r0, #14]
 800b6e2:	6183      	str	r3, [r0, #24]
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	2208      	movs	r2, #8
 800b6e8:	305c      	adds	r0, #92	; 0x5c
 800b6ea:	f000 fa17 	bl	800bb1c <memset>
 800b6ee:	4b0d      	ldr	r3, [pc, #52]	; (800b724 <std+0x58>)
 800b6f0:	6263      	str	r3, [r4, #36]	; 0x24
 800b6f2:	4b0d      	ldr	r3, [pc, #52]	; (800b728 <std+0x5c>)
 800b6f4:	62a3      	str	r3, [r4, #40]	; 0x28
 800b6f6:	4b0d      	ldr	r3, [pc, #52]	; (800b72c <std+0x60>)
 800b6f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b6fa:	4b0d      	ldr	r3, [pc, #52]	; (800b730 <std+0x64>)
 800b6fc:	6323      	str	r3, [r4, #48]	; 0x30
 800b6fe:	4b0d      	ldr	r3, [pc, #52]	; (800b734 <std+0x68>)
 800b700:	6224      	str	r4, [r4, #32]
 800b702:	429c      	cmp	r4, r3
 800b704:	d006      	beq.n	800b714 <std+0x48>
 800b706:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b70a:	4294      	cmp	r4, r2
 800b70c:	d002      	beq.n	800b714 <std+0x48>
 800b70e:	33d0      	adds	r3, #208	; 0xd0
 800b710:	429c      	cmp	r4, r3
 800b712:	d105      	bne.n	800b720 <std+0x54>
 800b714:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b71c:	f000 ba76 	b.w	800bc0c <__retarget_lock_init_recursive>
 800b720:	bd10      	pop	{r4, pc}
 800b722:	bf00      	nop
 800b724:	0800b96d 	.word	0x0800b96d
 800b728:	0800b98f 	.word	0x0800b98f
 800b72c:	0800b9c7 	.word	0x0800b9c7
 800b730:	0800b9eb 	.word	0x0800b9eb
 800b734:	20002188 	.word	0x20002188

0800b738 <stdio_exit_handler>:
 800b738:	4a02      	ldr	r2, [pc, #8]	; (800b744 <stdio_exit_handler+0xc>)
 800b73a:	4903      	ldr	r1, [pc, #12]	; (800b748 <stdio_exit_handler+0x10>)
 800b73c:	4803      	ldr	r0, [pc, #12]	; (800b74c <stdio_exit_handler+0x14>)
 800b73e:	f000 b869 	b.w	800b814 <_fwalk_sglue>
 800b742:	bf00      	nop
 800b744:	200000fc 	.word	0x200000fc
 800b748:	0800c785 	.word	0x0800c785
 800b74c:	20000108 	.word	0x20000108

0800b750 <cleanup_stdio>:
 800b750:	6841      	ldr	r1, [r0, #4]
 800b752:	4b0c      	ldr	r3, [pc, #48]	; (800b784 <cleanup_stdio+0x34>)
 800b754:	4299      	cmp	r1, r3
 800b756:	b510      	push	{r4, lr}
 800b758:	4604      	mov	r4, r0
 800b75a:	d001      	beq.n	800b760 <cleanup_stdio+0x10>
 800b75c:	f001 f812 	bl	800c784 <_fflush_r>
 800b760:	68a1      	ldr	r1, [r4, #8]
 800b762:	4b09      	ldr	r3, [pc, #36]	; (800b788 <cleanup_stdio+0x38>)
 800b764:	4299      	cmp	r1, r3
 800b766:	d002      	beq.n	800b76e <cleanup_stdio+0x1e>
 800b768:	4620      	mov	r0, r4
 800b76a:	f001 f80b 	bl	800c784 <_fflush_r>
 800b76e:	68e1      	ldr	r1, [r4, #12]
 800b770:	4b06      	ldr	r3, [pc, #24]	; (800b78c <cleanup_stdio+0x3c>)
 800b772:	4299      	cmp	r1, r3
 800b774:	d004      	beq.n	800b780 <cleanup_stdio+0x30>
 800b776:	4620      	mov	r0, r4
 800b778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b77c:	f001 b802 	b.w	800c784 <_fflush_r>
 800b780:	bd10      	pop	{r4, pc}
 800b782:	bf00      	nop
 800b784:	20002188 	.word	0x20002188
 800b788:	200021f0 	.word	0x200021f0
 800b78c:	20002258 	.word	0x20002258

0800b790 <global_stdio_init.part.0>:
 800b790:	b510      	push	{r4, lr}
 800b792:	4b0b      	ldr	r3, [pc, #44]	; (800b7c0 <global_stdio_init.part.0+0x30>)
 800b794:	4c0b      	ldr	r4, [pc, #44]	; (800b7c4 <global_stdio_init.part.0+0x34>)
 800b796:	4a0c      	ldr	r2, [pc, #48]	; (800b7c8 <global_stdio_init.part.0+0x38>)
 800b798:	601a      	str	r2, [r3, #0]
 800b79a:	4620      	mov	r0, r4
 800b79c:	2200      	movs	r2, #0
 800b79e:	2104      	movs	r1, #4
 800b7a0:	f7ff ff94 	bl	800b6cc <std>
 800b7a4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b7a8:	2201      	movs	r2, #1
 800b7aa:	2109      	movs	r1, #9
 800b7ac:	f7ff ff8e 	bl	800b6cc <std>
 800b7b0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b7b4:	2202      	movs	r2, #2
 800b7b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7ba:	2112      	movs	r1, #18
 800b7bc:	f7ff bf86 	b.w	800b6cc <std>
 800b7c0:	200022c0 	.word	0x200022c0
 800b7c4:	20002188 	.word	0x20002188
 800b7c8:	0800b739 	.word	0x0800b739

0800b7cc <__sfp_lock_acquire>:
 800b7cc:	4801      	ldr	r0, [pc, #4]	; (800b7d4 <__sfp_lock_acquire+0x8>)
 800b7ce:	f000 ba1e 	b.w	800bc0e <__retarget_lock_acquire_recursive>
 800b7d2:	bf00      	nop
 800b7d4:	200022c9 	.word	0x200022c9

0800b7d8 <__sfp_lock_release>:
 800b7d8:	4801      	ldr	r0, [pc, #4]	; (800b7e0 <__sfp_lock_release+0x8>)
 800b7da:	f000 ba19 	b.w	800bc10 <__retarget_lock_release_recursive>
 800b7de:	bf00      	nop
 800b7e0:	200022c9 	.word	0x200022c9

0800b7e4 <__sinit>:
 800b7e4:	b510      	push	{r4, lr}
 800b7e6:	4604      	mov	r4, r0
 800b7e8:	f7ff fff0 	bl	800b7cc <__sfp_lock_acquire>
 800b7ec:	6a23      	ldr	r3, [r4, #32]
 800b7ee:	b11b      	cbz	r3, 800b7f8 <__sinit+0x14>
 800b7f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7f4:	f7ff bff0 	b.w	800b7d8 <__sfp_lock_release>
 800b7f8:	4b04      	ldr	r3, [pc, #16]	; (800b80c <__sinit+0x28>)
 800b7fa:	6223      	str	r3, [r4, #32]
 800b7fc:	4b04      	ldr	r3, [pc, #16]	; (800b810 <__sinit+0x2c>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d1f5      	bne.n	800b7f0 <__sinit+0xc>
 800b804:	f7ff ffc4 	bl	800b790 <global_stdio_init.part.0>
 800b808:	e7f2      	b.n	800b7f0 <__sinit+0xc>
 800b80a:	bf00      	nop
 800b80c:	0800b751 	.word	0x0800b751
 800b810:	200022c0 	.word	0x200022c0

0800b814 <_fwalk_sglue>:
 800b814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b818:	4607      	mov	r7, r0
 800b81a:	4688      	mov	r8, r1
 800b81c:	4614      	mov	r4, r2
 800b81e:	2600      	movs	r6, #0
 800b820:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b824:	f1b9 0901 	subs.w	r9, r9, #1
 800b828:	d505      	bpl.n	800b836 <_fwalk_sglue+0x22>
 800b82a:	6824      	ldr	r4, [r4, #0]
 800b82c:	2c00      	cmp	r4, #0
 800b82e:	d1f7      	bne.n	800b820 <_fwalk_sglue+0xc>
 800b830:	4630      	mov	r0, r6
 800b832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b836:	89ab      	ldrh	r3, [r5, #12]
 800b838:	2b01      	cmp	r3, #1
 800b83a:	d907      	bls.n	800b84c <_fwalk_sglue+0x38>
 800b83c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b840:	3301      	adds	r3, #1
 800b842:	d003      	beq.n	800b84c <_fwalk_sglue+0x38>
 800b844:	4629      	mov	r1, r5
 800b846:	4638      	mov	r0, r7
 800b848:	47c0      	blx	r8
 800b84a:	4306      	orrs	r6, r0
 800b84c:	3568      	adds	r5, #104	; 0x68
 800b84e:	e7e9      	b.n	800b824 <_fwalk_sglue+0x10>

0800b850 <iprintf>:
 800b850:	b40f      	push	{r0, r1, r2, r3}
 800b852:	b507      	push	{r0, r1, r2, lr}
 800b854:	4906      	ldr	r1, [pc, #24]	; (800b870 <iprintf+0x20>)
 800b856:	ab04      	add	r3, sp, #16
 800b858:	6808      	ldr	r0, [r1, #0]
 800b85a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b85e:	6881      	ldr	r1, [r0, #8]
 800b860:	9301      	str	r3, [sp, #4]
 800b862:	f000 fc5f 	bl	800c124 <_vfiprintf_r>
 800b866:	b003      	add	sp, #12
 800b868:	f85d eb04 	ldr.w	lr, [sp], #4
 800b86c:	b004      	add	sp, #16
 800b86e:	4770      	bx	lr
 800b870:	20000154 	.word	0x20000154

0800b874 <_puts_r>:
 800b874:	6a03      	ldr	r3, [r0, #32]
 800b876:	b570      	push	{r4, r5, r6, lr}
 800b878:	6884      	ldr	r4, [r0, #8]
 800b87a:	4605      	mov	r5, r0
 800b87c:	460e      	mov	r6, r1
 800b87e:	b90b      	cbnz	r3, 800b884 <_puts_r+0x10>
 800b880:	f7ff ffb0 	bl	800b7e4 <__sinit>
 800b884:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b886:	07db      	lsls	r3, r3, #31
 800b888:	d405      	bmi.n	800b896 <_puts_r+0x22>
 800b88a:	89a3      	ldrh	r3, [r4, #12]
 800b88c:	0598      	lsls	r0, r3, #22
 800b88e:	d402      	bmi.n	800b896 <_puts_r+0x22>
 800b890:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b892:	f000 f9bc 	bl	800bc0e <__retarget_lock_acquire_recursive>
 800b896:	89a3      	ldrh	r3, [r4, #12]
 800b898:	0719      	lsls	r1, r3, #28
 800b89a:	d513      	bpl.n	800b8c4 <_puts_r+0x50>
 800b89c:	6923      	ldr	r3, [r4, #16]
 800b89e:	b18b      	cbz	r3, 800b8c4 <_puts_r+0x50>
 800b8a0:	3e01      	subs	r6, #1
 800b8a2:	68a3      	ldr	r3, [r4, #8]
 800b8a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b8a8:	3b01      	subs	r3, #1
 800b8aa:	60a3      	str	r3, [r4, #8]
 800b8ac:	b9e9      	cbnz	r1, 800b8ea <_puts_r+0x76>
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	da2e      	bge.n	800b910 <_puts_r+0x9c>
 800b8b2:	4622      	mov	r2, r4
 800b8b4:	210a      	movs	r1, #10
 800b8b6:	4628      	mov	r0, r5
 800b8b8:	f000 f89b 	bl	800b9f2 <__swbuf_r>
 800b8bc:	3001      	adds	r0, #1
 800b8be:	d007      	beq.n	800b8d0 <_puts_r+0x5c>
 800b8c0:	250a      	movs	r5, #10
 800b8c2:	e007      	b.n	800b8d4 <_puts_r+0x60>
 800b8c4:	4621      	mov	r1, r4
 800b8c6:	4628      	mov	r0, r5
 800b8c8:	f000 f8d0 	bl	800ba6c <__swsetup_r>
 800b8cc:	2800      	cmp	r0, #0
 800b8ce:	d0e7      	beq.n	800b8a0 <_puts_r+0x2c>
 800b8d0:	f04f 35ff 	mov.w	r5, #4294967295
 800b8d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b8d6:	07da      	lsls	r2, r3, #31
 800b8d8:	d405      	bmi.n	800b8e6 <_puts_r+0x72>
 800b8da:	89a3      	ldrh	r3, [r4, #12]
 800b8dc:	059b      	lsls	r3, r3, #22
 800b8de:	d402      	bmi.n	800b8e6 <_puts_r+0x72>
 800b8e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8e2:	f000 f995 	bl	800bc10 <__retarget_lock_release_recursive>
 800b8e6:	4628      	mov	r0, r5
 800b8e8:	bd70      	pop	{r4, r5, r6, pc}
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	da04      	bge.n	800b8f8 <_puts_r+0x84>
 800b8ee:	69a2      	ldr	r2, [r4, #24]
 800b8f0:	429a      	cmp	r2, r3
 800b8f2:	dc06      	bgt.n	800b902 <_puts_r+0x8e>
 800b8f4:	290a      	cmp	r1, #10
 800b8f6:	d004      	beq.n	800b902 <_puts_r+0x8e>
 800b8f8:	6823      	ldr	r3, [r4, #0]
 800b8fa:	1c5a      	adds	r2, r3, #1
 800b8fc:	6022      	str	r2, [r4, #0]
 800b8fe:	7019      	strb	r1, [r3, #0]
 800b900:	e7cf      	b.n	800b8a2 <_puts_r+0x2e>
 800b902:	4622      	mov	r2, r4
 800b904:	4628      	mov	r0, r5
 800b906:	f000 f874 	bl	800b9f2 <__swbuf_r>
 800b90a:	3001      	adds	r0, #1
 800b90c:	d1c9      	bne.n	800b8a2 <_puts_r+0x2e>
 800b90e:	e7df      	b.n	800b8d0 <_puts_r+0x5c>
 800b910:	6823      	ldr	r3, [r4, #0]
 800b912:	250a      	movs	r5, #10
 800b914:	1c5a      	adds	r2, r3, #1
 800b916:	6022      	str	r2, [r4, #0]
 800b918:	701d      	strb	r5, [r3, #0]
 800b91a:	e7db      	b.n	800b8d4 <_puts_r+0x60>

0800b91c <puts>:
 800b91c:	4b02      	ldr	r3, [pc, #8]	; (800b928 <puts+0xc>)
 800b91e:	4601      	mov	r1, r0
 800b920:	6818      	ldr	r0, [r3, #0]
 800b922:	f7ff bfa7 	b.w	800b874 <_puts_r>
 800b926:	bf00      	nop
 800b928:	20000154 	.word	0x20000154

0800b92c <siprintf>:
 800b92c:	b40e      	push	{r1, r2, r3}
 800b92e:	b500      	push	{lr}
 800b930:	b09c      	sub	sp, #112	; 0x70
 800b932:	ab1d      	add	r3, sp, #116	; 0x74
 800b934:	9002      	str	r0, [sp, #8]
 800b936:	9006      	str	r0, [sp, #24]
 800b938:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b93c:	4809      	ldr	r0, [pc, #36]	; (800b964 <siprintf+0x38>)
 800b93e:	9107      	str	r1, [sp, #28]
 800b940:	9104      	str	r1, [sp, #16]
 800b942:	4909      	ldr	r1, [pc, #36]	; (800b968 <siprintf+0x3c>)
 800b944:	f853 2b04 	ldr.w	r2, [r3], #4
 800b948:	9105      	str	r1, [sp, #20]
 800b94a:	6800      	ldr	r0, [r0, #0]
 800b94c:	9301      	str	r3, [sp, #4]
 800b94e:	a902      	add	r1, sp, #8
 800b950:	f000 fac0 	bl	800bed4 <_svfiprintf_r>
 800b954:	9b02      	ldr	r3, [sp, #8]
 800b956:	2200      	movs	r2, #0
 800b958:	701a      	strb	r2, [r3, #0]
 800b95a:	b01c      	add	sp, #112	; 0x70
 800b95c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b960:	b003      	add	sp, #12
 800b962:	4770      	bx	lr
 800b964:	20000154 	.word	0x20000154
 800b968:	ffff0208 	.word	0xffff0208

0800b96c <__sread>:
 800b96c:	b510      	push	{r4, lr}
 800b96e:	460c      	mov	r4, r1
 800b970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b974:	f000 f8fc 	bl	800bb70 <_read_r>
 800b978:	2800      	cmp	r0, #0
 800b97a:	bfab      	itete	ge
 800b97c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b97e:	89a3      	ldrhlt	r3, [r4, #12]
 800b980:	181b      	addge	r3, r3, r0
 800b982:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b986:	bfac      	ite	ge
 800b988:	6563      	strge	r3, [r4, #84]	; 0x54
 800b98a:	81a3      	strhlt	r3, [r4, #12]
 800b98c:	bd10      	pop	{r4, pc}

0800b98e <__swrite>:
 800b98e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b992:	461f      	mov	r7, r3
 800b994:	898b      	ldrh	r3, [r1, #12]
 800b996:	05db      	lsls	r3, r3, #23
 800b998:	4605      	mov	r5, r0
 800b99a:	460c      	mov	r4, r1
 800b99c:	4616      	mov	r6, r2
 800b99e:	d505      	bpl.n	800b9ac <__swrite+0x1e>
 800b9a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9a4:	2302      	movs	r3, #2
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	f000 f8d0 	bl	800bb4c <_lseek_r>
 800b9ac:	89a3      	ldrh	r3, [r4, #12]
 800b9ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b9b6:	81a3      	strh	r3, [r4, #12]
 800b9b8:	4632      	mov	r2, r6
 800b9ba:	463b      	mov	r3, r7
 800b9bc:	4628      	mov	r0, r5
 800b9be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9c2:	f000 b8e7 	b.w	800bb94 <_write_r>

0800b9c6 <__sseek>:
 800b9c6:	b510      	push	{r4, lr}
 800b9c8:	460c      	mov	r4, r1
 800b9ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9ce:	f000 f8bd 	bl	800bb4c <_lseek_r>
 800b9d2:	1c43      	adds	r3, r0, #1
 800b9d4:	89a3      	ldrh	r3, [r4, #12]
 800b9d6:	bf15      	itete	ne
 800b9d8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b9da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b9de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b9e2:	81a3      	strheq	r3, [r4, #12]
 800b9e4:	bf18      	it	ne
 800b9e6:	81a3      	strhne	r3, [r4, #12]
 800b9e8:	bd10      	pop	{r4, pc}

0800b9ea <__sclose>:
 800b9ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9ee:	f000 b89d 	b.w	800bb2c <_close_r>

0800b9f2 <__swbuf_r>:
 800b9f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9f4:	460e      	mov	r6, r1
 800b9f6:	4614      	mov	r4, r2
 800b9f8:	4605      	mov	r5, r0
 800b9fa:	b118      	cbz	r0, 800ba04 <__swbuf_r+0x12>
 800b9fc:	6a03      	ldr	r3, [r0, #32]
 800b9fe:	b90b      	cbnz	r3, 800ba04 <__swbuf_r+0x12>
 800ba00:	f7ff fef0 	bl	800b7e4 <__sinit>
 800ba04:	69a3      	ldr	r3, [r4, #24]
 800ba06:	60a3      	str	r3, [r4, #8]
 800ba08:	89a3      	ldrh	r3, [r4, #12]
 800ba0a:	071a      	lsls	r2, r3, #28
 800ba0c:	d525      	bpl.n	800ba5a <__swbuf_r+0x68>
 800ba0e:	6923      	ldr	r3, [r4, #16]
 800ba10:	b31b      	cbz	r3, 800ba5a <__swbuf_r+0x68>
 800ba12:	6823      	ldr	r3, [r4, #0]
 800ba14:	6922      	ldr	r2, [r4, #16]
 800ba16:	1a98      	subs	r0, r3, r2
 800ba18:	6963      	ldr	r3, [r4, #20]
 800ba1a:	b2f6      	uxtb	r6, r6
 800ba1c:	4283      	cmp	r3, r0
 800ba1e:	4637      	mov	r7, r6
 800ba20:	dc04      	bgt.n	800ba2c <__swbuf_r+0x3a>
 800ba22:	4621      	mov	r1, r4
 800ba24:	4628      	mov	r0, r5
 800ba26:	f000 fead 	bl	800c784 <_fflush_r>
 800ba2a:	b9e0      	cbnz	r0, 800ba66 <__swbuf_r+0x74>
 800ba2c:	68a3      	ldr	r3, [r4, #8]
 800ba2e:	3b01      	subs	r3, #1
 800ba30:	60a3      	str	r3, [r4, #8]
 800ba32:	6823      	ldr	r3, [r4, #0]
 800ba34:	1c5a      	adds	r2, r3, #1
 800ba36:	6022      	str	r2, [r4, #0]
 800ba38:	701e      	strb	r6, [r3, #0]
 800ba3a:	6962      	ldr	r2, [r4, #20]
 800ba3c:	1c43      	adds	r3, r0, #1
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d004      	beq.n	800ba4c <__swbuf_r+0x5a>
 800ba42:	89a3      	ldrh	r3, [r4, #12]
 800ba44:	07db      	lsls	r3, r3, #31
 800ba46:	d506      	bpl.n	800ba56 <__swbuf_r+0x64>
 800ba48:	2e0a      	cmp	r6, #10
 800ba4a:	d104      	bne.n	800ba56 <__swbuf_r+0x64>
 800ba4c:	4621      	mov	r1, r4
 800ba4e:	4628      	mov	r0, r5
 800ba50:	f000 fe98 	bl	800c784 <_fflush_r>
 800ba54:	b938      	cbnz	r0, 800ba66 <__swbuf_r+0x74>
 800ba56:	4638      	mov	r0, r7
 800ba58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba5a:	4621      	mov	r1, r4
 800ba5c:	4628      	mov	r0, r5
 800ba5e:	f000 f805 	bl	800ba6c <__swsetup_r>
 800ba62:	2800      	cmp	r0, #0
 800ba64:	d0d5      	beq.n	800ba12 <__swbuf_r+0x20>
 800ba66:	f04f 37ff 	mov.w	r7, #4294967295
 800ba6a:	e7f4      	b.n	800ba56 <__swbuf_r+0x64>

0800ba6c <__swsetup_r>:
 800ba6c:	b538      	push	{r3, r4, r5, lr}
 800ba6e:	4b2a      	ldr	r3, [pc, #168]	; (800bb18 <__swsetup_r+0xac>)
 800ba70:	4605      	mov	r5, r0
 800ba72:	6818      	ldr	r0, [r3, #0]
 800ba74:	460c      	mov	r4, r1
 800ba76:	b118      	cbz	r0, 800ba80 <__swsetup_r+0x14>
 800ba78:	6a03      	ldr	r3, [r0, #32]
 800ba7a:	b90b      	cbnz	r3, 800ba80 <__swsetup_r+0x14>
 800ba7c:	f7ff feb2 	bl	800b7e4 <__sinit>
 800ba80:	89a3      	ldrh	r3, [r4, #12]
 800ba82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba86:	0718      	lsls	r0, r3, #28
 800ba88:	d422      	bmi.n	800bad0 <__swsetup_r+0x64>
 800ba8a:	06d9      	lsls	r1, r3, #27
 800ba8c:	d407      	bmi.n	800ba9e <__swsetup_r+0x32>
 800ba8e:	2309      	movs	r3, #9
 800ba90:	602b      	str	r3, [r5, #0]
 800ba92:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ba96:	81a3      	strh	r3, [r4, #12]
 800ba98:	f04f 30ff 	mov.w	r0, #4294967295
 800ba9c:	e034      	b.n	800bb08 <__swsetup_r+0x9c>
 800ba9e:	0758      	lsls	r0, r3, #29
 800baa0:	d512      	bpl.n	800bac8 <__swsetup_r+0x5c>
 800baa2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800baa4:	b141      	cbz	r1, 800bab8 <__swsetup_r+0x4c>
 800baa6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800baaa:	4299      	cmp	r1, r3
 800baac:	d002      	beq.n	800bab4 <__swsetup_r+0x48>
 800baae:	4628      	mov	r0, r5
 800bab0:	f000 f8be 	bl	800bc30 <_free_r>
 800bab4:	2300      	movs	r3, #0
 800bab6:	6363      	str	r3, [r4, #52]	; 0x34
 800bab8:	89a3      	ldrh	r3, [r4, #12]
 800baba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800babe:	81a3      	strh	r3, [r4, #12]
 800bac0:	2300      	movs	r3, #0
 800bac2:	6063      	str	r3, [r4, #4]
 800bac4:	6923      	ldr	r3, [r4, #16]
 800bac6:	6023      	str	r3, [r4, #0]
 800bac8:	89a3      	ldrh	r3, [r4, #12]
 800baca:	f043 0308 	orr.w	r3, r3, #8
 800bace:	81a3      	strh	r3, [r4, #12]
 800bad0:	6923      	ldr	r3, [r4, #16]
 800bad2:	b94b      	cbnz	r3, 800bae8 <__swsetup_r+0x7c>
 800bad4:	89a3      	ldrh	r3, [r4, #12]
 800bad6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bade:	d003      	beq.n	800bae8 <__swsetup_r+0x7c>
 800bae0:	4621      	mov	r1, r4
 800bae2:	4628      	mov	r0, r5
 800bae4:	f000 fe9c 	bl	800c820 <__smakebuf_r>
 800bae8:	89a0      	ldrh	r0, [r4, #12]
 800baea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800baee:	f010 0301 	ands.w	r3, r0, #1
 800baf2:	d00a      	beq.n	800bb0a <__swsetup_r+0x9e>
 800baf4:	2300      	movs	r3, #0
 800baf6:	60a3      	str	r3, [r4, #8]
 800baf8:	6963      	ldr	r3, [r4, #20]
 800bafa:	425b      	negs	r3, r3
 800bafc:	61a3      	str	r3, [r4, #24]
 800bafe:	6923      	ldr	r3, [r4, #16]
 800bb00:	b943      	cbnz	r3, 800bb14 <__swsetup_r+0xa8>
 800bb02:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bb06:	d1c4      	bne.n	800ba92 <__swsetup_r+0x26>
 800bb08:	bd38      	pop	{r3, r4, r5, pc}
 800bb0a:	0781      	lsls	r1, r0, #30
 800bb0c:	bf58      	it	pl
 800bb0e:	6963      	ldrpl	r3, [r4, #20]
 800bb10:	60a3      	str	r3, [r4, #8]
 800bb12:	e7f4      	b.n	800bafe <__swsetup_r+0x92>
 800bb14:	2000      	movs	r0, #0
 800bb16:	e7f7      	b.n	800bb08 <__swsetup_r+0x9c>
 800bb18:	20000154 	.word	0x20000154

0800bb1c <memset>:
 800bb1c:	4402      	add	r2, r0
 800bb1e:	4603      	mov	r3, r0
 800bb20:	4293      	cmp	r3, r2
 800bb22:	d100      	bne.n	800bb26 <memset+0xa>
 800bb24:	4770      	bx	lr
 800bb26:	f803 1b01 	strb.w	r1, [r3], #1
 800bb2a:	e7f9      	b.n	800bb20 <memset+0x4>

0800bb2c <_close_r>:
 800bb2c:	b538      	push	{r3, r4, r5, lr}
 800bb2e:	4d06      	ldr	r5, [pc, #24]	; (800bb48 <_close_r+0x1c>)
 800bb30:	2300      	movs	r3, #0
 800bb32:	4604      	mov	r4, r0
 800bb34:	4608      	mov	r0, r1
 800bb36:	602b      	str	r3, [r5, #0]
 800bb38:	f7f7 ff69 	bl	8003a0e <_close>
 800bb3c:	1c43      	adds	r3, r0, #1
 800bb3e:	d102      	bne.n	800bb46 <_close_r+0x1a>
 800bb40:	682b      	ldr	r3, [r5, #0]
 800bb42:	b103      	cbz	r3, 800bb46 <_close_r+0x1a>
 800bb44:	6023      	str	r3, [r4, #0]
 800bb46:	bd38      	pop	{r3, r4, r5, pc}
 800bb48:	200022c4 	.word	0x200022c4

0800bb4c <_lseek_r>:
 800bb4c:	b538      	push	{r3, r4, r5, lr}
 800bb4e:	4d07      	ldr	r5, [pc, #28]	; (800bb6c <_lseek_r+0x20>)
 800bb50:	4604      	mov	r4, r0
 800bb52:	4608      	mov	r0, r1
 800bb54:	4611      	mov	r1, r2
 800bb56:	2200      	movs	r2, #0
 800bb58:	602a      	str	r2, [r5, #0]
 800bb5a:	461a      	mov	r2, r3
 800bb5c:	f7f7 ff7e 	bl	8003a5c <_lseek>
 800bb60:	1c43      	adds	r3, r0, #1
 800bb62:	d102      	bne.n	800bb6a <_lseek_r+0x1e>
 800bb64:	682b      	ldr	r3, [r5, #0]
 800bb66:	b103      	cbz	r3, 800bb6a <_lseek_r+0x1e>
 800bb68:	6023      	str	r3, [r4, #0]
 800bb6a:	bd38      	pop	{r3, r4, r5, pc}
 800bb6c:	200022c4 	.word	0x200022c4

0800bb70 <_read_r>:
 800bb70:	b538      	push	{r3, r4, r5, lr}
 800bb72:	4d07      	ldr	r5, [pc, #28]	; (800bb90 <_read_r+0x20>)
 800bb74:	4604      	mov	r4, r0
 800bb76:	4608      	mov	r0, r1
 800bb78:	4611      	mov	r1, r2
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	602a      	str	r2, [r5, #0]
 800bb7e:	461a      	mov	r2, r3
 800bb80:	f7f7 ff28 	bl	80039d4 <_read>
 800bb84:	1c43      	adds	r3, r0, #1
 800bb86:	d102      	bne.n	800bb8e <_read_r+0x1e>
 800bb88:	682b      	ldr	r3, [r5, #0]
 800bb8a:	b103      	cbz	r3, 800bb8e <_read_r+0x1e>
 800bb8c:	6023      	str	r3, [r4, #0]
 800bb8e:	bd38      	pop	{r3, r4, r5, pc}
 800bb90:	200022c4 	.word	0x200022c4

0800bb94 <_write_r>:
 800bb94:	b538      	push	{r3, r4, r5, lr}
 800bb96:	4d07      	ldr	r5, [pc, #28]	; (800bbb4 <_write_r+0x20>)
 800bb98:	4604      	mov	r4, r0
 800bb9a:	4608      	mov	r0, r1
 800bb9c:	4611      	mov	r1, r2
 800bb9e:	2200      	movs	r2, #0
 800bba0:	602a      	str	r2, [r5, #0]
 800bba2:	461a      	mov	r2, r3
 800bba4:	f7f6 fd88 	bl	80026b8 <_write>
 800bba8:	1c43      	adds	r3, r0, #1
 800bbaa:	d102      	bne.n	800bbb2 <_write_r+0x1e>
 800bbac:	682b      	ldr	r3, [r5, #0]
 800bbae:	b103      	cbz	r3, 800bbb2 <_write_r+0x1e>
 800bbb0:	6023      	str	r3, [r4, #0]
 800bbb2:	bd38      	pop	{r3, r4, r5, pc}
 800bbb4:	200022c4 	.word	0x200022c4

0800bbb8 <__errno>:
 800bbb8:	4b01      	ldr	r3, [pc, #4]	; (800bbc0 <__errno+0x8>)
 800bbba:	6818      	ldr	r0, [r3, #0]
 800bbbc:	4770      	bx	lr
 800bbbe:	bf00      	nop
 800bbc0:	20000154 	.word	0x20000154

0800bbc4 <__libc_init_array>:
 800bbc4:	b570      	push	{r4, r5, r6, lr}
 800bbc6:	4d0d      	ldr	r5, [pc, #52]	; (800bbfc <__libc_init_array+0x38>)
 800bbc8:	4c0d      	ldr	r4, [pc, #52]	; (800bc00 <__libc_init_array+0x3c>)
 800bbca:	1b64      	subs	r4, r4, r5
 800bbcc:	10a4      	asrs	r4, r4, #2
 800bbce:	2600      	movs	r6, #0
 800bbd0:	42a6      	cmp	r6, r4
 800bbd2:	d109      	bne.n	800bbe8 <__libc_init_array+0x24>
 800bbd4:	4d0b      	ldr	r5, [pc, #44]	; (800bc04 <__libc_init_array+0x40>)
 800bbd6:	4c0c      	ldr	r4, [pc, #48]	; (800bc08 <__libc_init_array+0x44>)
 800bbd8:	f001 fe1a 	bl	800d810 <_init>
 800bbdc:	1b64      	subs	r4, r4, r5
 800bbde:	10a4      	asrs	r4, r4, #2
 800bbe0:	2600      	movs	r6, #0
 800bbe2:	42a6      	cmp	r6, r4
 800bbe4:	d105      	bne.n	800bbf2 <__libc_init_array+0x2e>
 800bbe6:	bd70      	pop	{r4, r5, r6, pc}
 800bbe8:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbec:	4798      	blx	r3
 800bbee:	3601      	adds	r6, #1
 800bbf0:	e7ee      	b.n	800bbd0 <__libc_init_array+0xc>
 800bbf2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbf6:	4798      	blx	r3
 800bbf8:	3601      	adds	r6, #1
 800bbfa:	e7f2      	b.n	800bbe2 <__libc_init_array+0x1e>
 800bbfc:	0800daa8 	.word	0x0800daa8
 800bc00:	0800daa8 	.word	0x0800daa8
 800bc04:	0800daa8 	.word	0x0800daa8
 800bc08:	0800daac 	.word	0x0800daac

0800bc0c <__retarget_lock_init_recursive>:
 800bc0c:	4770      	bx	lr

0800bc0e <__retarget_lock_acquire_recursive>:
 800bc0e:	4770      	bx	lr

0800bc10 <__retarget_lock_release_recursive>:
 800bc10:	4770      	bx	lr

0800bc12 <memcpy>:
 800bc12:	440a      	add	r2, r1
 800bc14:	4291      	cmp	r1, r2
 800bc16:	f100 33ff 	add.w	r3, r0, #4294967295
 800bc1a:	d100      	bne.n	800bc1e <memcpy+0xc>
 800bc1c:	4770      	bx	lr
 800bc1e:	b510      	push	{r4, lr}
 800bc20:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc24:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc28:	4291      	cmp	r1, r2
 800bc2a:	d1f9      	bne.n	800bc20 <memcpy+0xe>
 800bc2c:	bd10      	pop	{r4, pc}
	...

0800bc30 <_free_r>:
 800bc30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc32:	2900      	cmp	r1, #0
 800bc34:	d044      	beq.n	800bcc0 <_free_r+0x90>
 800bc36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc3a:	9001      	str	r0, [sp, #4]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	f1a1 0404 	sub.w	r4, r1, #4
 800bc42:	bfb8      	it	lt
 800bc44:	18e4      	addlt	r4, r4, r3
 800bc46:	f000 f8df 	bl	800be08 <__malloc_lock>
 800bc4a:	4a1e      	ldr	r2, [pc, #120]	; (800bcc4 <_free_r+0x94>)
 800bc4c:	9801      	ldr	r0, [sp, #4]
 800bc4e:	6813      	ldr	r3, [r2, #0]
 800bc50:	b933      	cbnz	r3, 800bc60 <_free_r+0x30>
 800bc52:	6063      	str	r3, [r4, #4]
 800bc54:	6014      	str	r4, [r2, #0]
 800bc56:	b003      	add	sp, #12
 800bc58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc5c:	f000 b8da 	b.w	800be14 <__malloc_unlock>
 800bc60:	42a3      	cmp	r3, r4
 800bc62:	d908      	bls.n	800bc76 <_free_r+0x46>
 800bc64:	6825      	ldr	r5, [r4, #0]
 800bc66:	1961      	adds	r1, r4, r5
 800bc68:	428b      	cmp	r3, r1
 800bc6a:	bf01      	itttt	eq
 800bc6c:	6819      	ldreq	r1, [r3, #0]
 800bc6e:	685b      	ldreq	r3, [r3, #4]
 800bc70:	1949      	addeq	r1, r1, r5
 800bc72:	6021      	streq	r1, [r4, #0]
 800bc74:	e7ed      	b.n	800bc52 <_free_r+0x22>
 800bc76:	461a      	mov	r2, r3
 800bc78:	685b      	ldr	r3, [r3, #4]
 800bc7a:	b10b      	cbz	r3, 800bc80 <_free_r+0x50>
 800bc7c:	42a3      	cmp	r3, r4
 800bc7e:	d9fa      	bls.n	800bc76 <_free_r+0x46>
 800bc80:	6811      	ldr	r1, [r2, #0]
 800bc82:	1855      	adds	r5, r2, r1
 800bc84:	42a5      	cmp	r5, r4
 800bc86:	d10b      	bne.n	800bca0 <_free_r+0x70>
 800bc88:	6824      	ldr	r4, [r4, #0]
 800bc8a:	4421      	add	r1, r4
 800bc8c:	1854      	adds	r4, r2, r1
 800bc8e:	42a3      	cmp	r3, r4
 800bc90:	6011      	str	r1, [r2, #0]
 800bc92:	d1e0      	bne.n	800bc56 <_free_r+0x26>
 800bc94:	681c      	ldr	r4, [r3, #0]
 800bc96:	685b      	ldr	r3, [r3, #4]
 800bc98:	6053      	str	r3, [r2, #4]
 800bc9a:	440c      	add	r4, r1
 800bc9c:	6014      	str	r4, [r2, #0]
 800bc9e:	e7da      	b.n	800bc56 <_free_r+0x26>
 800bca0:	d902      	bls.n	800bca8 <_free_r+0x78>
 800bca2:	230c      	movs	r3, #12
 800bca4:	6003      	str	r3, [r0, #0]
 800bca6:	e7d6      	b.n	800bc56 <_free_r+0x26>
 800bca8:	6825      	ldr	r5, [r4, #0]
 800bcaa:	1961      	adds	r1, r4, r5
 800bcac:	428b      	cmp	r3, r1
 800bcae:	bf04      	itt	eq
 800bcb0:	6819      	ldreq	r1, [r3, #0]
 800bcb2:	685b      	ldreq	r3, [r3, #4]
 800bcb4:	6063      	str	r3, [r4, #4]
 800bcb6:	bf04      	itt	eq
 800bcb8:	1949      	addeq	r1, r1, r5
 800bcba:	6021      	streq	r1, [r4, #0]
 800bcbc:	6054      	str	r4, [r2, #4]
 800bcbe:	e7ca      	b.n	800bc56 <_free_r+0x26>
 800bcc0:	b003      	add	sp, #12
 800bcc2:	bd30      	pop	{r4, r5, pc}
 800bcc4:	200022cc 	.word	0x200022cc

0800bcc8 <sbrk_aligned>:
 800bcc8:	b570      	push	{r4, r5, r6, lr}
 800bcca:	4e0e      	ldr	r6, [pc, #56]	; (800bd04 <sbrk_aligned+0x3c>)
 800bccc:	460c      	mov	r4, r1
 800bcce:	6831      	ldr	r1, [r6, #0]
 800bcd0:	4605      	mov	r5, r0
 800bcd2:	b911      	cbnz	r1, 800bcda <sbrk_aligned+0x12>
 800bcd4:	f000 fe1c 	bl	800c910 <_sbrk_r>
 800bcd8:	6030      	str	r0, [r6, #0]
 800bcda:	4621      	mov	r1, r4
 800bcdc:	4628      	mov	r0, r5
 800bcde:	f000 fe17 	bl	800c910 <_sbrk_r>
 800bce2:	1c43      	adds	r3, r0, #1
 800bce4:	d00a      	beq.n	800bcfc <sbrk_aligned+0x34>
 800bce6:	1cc4      	adds	r4, r0, #3
 800bce8:	f024 0403 	bic.w	r4, r4, #3
 800bcec:	42a0      	cmp	r0, r4
 800bcee:	d007      	beq.n	800bd00 <sbrk_aligned+0x38>
 800bcf0:	1a21      	subs	r1, r4, r0
 800bcf2:	4628      	mov	r0, r5
 800bcf4:	f000 fe0c 	bl	800c910 <_sbrk_r>
 800bcf8:	3001      	adds	r0, #1
 800bcfa:	d101      	bne.n	800bd00 <sbrk_aligned+0x38>
 800bcfc:	f04f 34ff 	mov.w	r4, #4294967295
 800bd00:	4620      	mov	r0, r4
 800bd02:	bd70      	pop	{r4, r5, r6, pc}
 800bd04:	200022d0 	.word	0x200022d0

0800bd08 <_malloc_r>:
 800bd08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd0c:	1ccd      	adds	r5, r1, #3
 800bd0e:	f025 0503 	bic.w	r5, r5, #3
 800bd12:	3508      	adds	r5, #8
 800bd14:	2d0c      	cmp	r5, #12
 800bd16:	bf38      	it	cc
 800bd18:	250c      	movcc	r5, #12
 800bd1a:	2d00      	cmp	r5, #0
 800bd1c:	4607      	mov	r7, r0
 800bd1e:	db01      	blt.n	800bd24 <_malloc_r+0x1c>
 800bd20:	42a9      	cmp	r1, r5
 800bd22:	d905      	bls.n	800bd30 <_malloc_r+0x28>
 800bd24:	230c      	movs	r3, #12
 800bd26:	603b      	str	r3, [r7, #0]
 800bd28:	2600      	movs	r6, #0
 800bd2a:	4630      	mov	r0, r6
 800bd2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd30:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800be04 <_malloc_r+0xfc>
 800bd34:	f000 f868 	bl	800be08 <__malloc_lock>
 800bd38:	f8d8 3000 	ldr.w	r3, [r8]
 800bd3c:	461c      	mov	r4, r3
 800bd3e:	bb5c      	cbnz	r4, 800bd98 <_malloc_r+0x90>
 800bd40:	4629      	mov	r1, r5
 800bd42:	4638      	mov	r0, r7
 800bd44:	f7ff ffc0 	bl	800bcc8 <sbrk_aligned>
 800bd48:	1c43      	adds	r3, r0, #1
 800bd4a:	4604      	mov	r4, r0
 800bd4c:	d155      	bne.n	800bdfa <_malloc_r+0xf2>
 800bd4e:	f8d8 4000 	ldr.w	r4, [r8]
 800bd52:	4626      	mov	r6, r4
 800bd54:	2e00      	cmp	r6, #0
 800bd56:	d145      	bne.n	800bde4 <_malloc_r+0xdc>
 800bd58:	2c00      	cmp	r4, #0
 800bd5a:	d048      	beq.n	800bdee <_malloc_r+0xe6>
 800bd5c:	6823      	ldr	r3, [r4, #0]
 800bd5e:	4631      	mov	r1, r6
 800bd60:	4638      	mov	r0, r7
 800bd62:	eb04 0903 	add.w	r9, r4, r3
 800bd66:	f000 fdd3 	bl	800c910 <_sbrk_r>
 800bd6a:	4581      	cmp	r9, r0
 800bd6c:	d13f      	bne.n	800bdee <_malloc_r+0xe6>
 800bd6e:	6821      	ldr	r1, [r4, #0]
 800bd70:	1a6d      	subs	r5, r5, r1
 800bd72:	4629      	mov	r1, r5
 800bd74:	4638      	mov	r0, r7
 800bd76:	f7ff ffa7 	bl	800bcc8 <sbrk_aligned>
 800bd7a:	3001      	adds	r0, #1
 800bd7c:	d037      	beq.n	800bdee <_malloc_r+0xe6>
 800bd7e:	6823      	ldr	r3, [r4, #0]
 800bd80:	442b      	add	r3, r5
 800bd82:	6023      	str	r3, [r4, #0]
 800bd84:	f8d8 3000 	ldr.w	r3, [r8]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d038      	beq.n	800bdfe <_malloc_r+0xf6>
 800bd8c:	685a      	ldr	r2, [r3, #4]
 800bd8e:	42a2      	cmp	r2, r4
 800bd90:	d12b      	bne.n	800bdea <_malloc_r+0xe2>
 800bd92:	2200      	movs	r2, #0
 800bd94:	605a      	str	r2, [r3, #4]
 800bd96:	e00f      	b.n	800bdb8 <_malloc_r+0xb0>
 800bd98:	6822      	ldr	r2, [r4, #0]
 800bd9a:	1b52      	subs	r2, r2, r5
 800bd9c:	d41f      	bmi.n	800bdde <_malloc_r+0xd6>
 800bd9e:	2a0b      	cmp	r2, #11
 800bda0:	d917      	bls.n	800bdd2 <_malloc_r+0xca>
 800bda2:	1961      	adds	r1, r4, r5
 800bda4:	42a3      	cmp	r3, r4
 800bda6:	6025      	str	r5, [r4, #0]
 800bda8:	bf18      	it	ne
 800bdaa:	6059      	strne	r1, [r3, #4]
 800bdac:	6863      	ldr	r3, [r4, #4]
 800bdae:	bf08      	it	eq
 800bdb0:	f8c8 1000 	streq.w	r1, [r8]
 800bdb4:	5162      	str	r2, [r4, r5]
 800bdb6:	604b      	str	r3, [r1, #4]
 800bdb8:	4638      	mov	r0, r7
 800bdba:	f104 060b 	add.w	r6, r4, #11
 800bdbe:	f000 f829 	bl	800be14 <__malloc_unlock>
 800bdc2:	f026 0607 	bic.w	r6, r6, #7
 800bdc6:	1d23      	adds	r3, r4, #4
 800bdc8:	1af2      	subs	r2, r6, r3
 800bdca:	d0ae      	beq.n	800bd2a <_malloc_r+0x22>
 800bdcc:	1b9b      	subs	r3, r3, r6
 800bdce:	50a3      	str	r3, [r4, r2]
 800bdd0:	e7ab      	b.n	800bd2a <_malloc_r+0x22>
 800bdd2:	42a3      	cmp	r3, r4
 800bdd4:	6862      	ldr	r2, [r4, #4]
 800bdd6:	d1dd      	bne.n	800bd94 <_malloc_r+0x8c>
 800bdd8:	f8c8 2000 	str.w	r2, [r8]
 800bddc:	e7ec      	b.n	800bdb8 <_malloc_r+0xb0>
 800bdde:	4623      	mov	r3, r4
 800bde0:	6864      	ldr	r4, [r4, #4]
 800bde2:	e7ac      	b.n	800bd3e <_malloc_r+0x36>
 800bde4:	4634      	mov	r4, r6
 800bde6:	6876      	ldr	r6, [r6, #4]
 800bde8:	e7b4      	b.n	800bd54 <_malloc_r+0x4c>
 800bdea:	4613      	mov	r3, r2
 800bdec:	e7cc      	b.n	800bd88 <_malloc_r+0x80>
 800bdee:	230c      	movs	r3, #12
 800bdf0:	603b      	str	r3, [r7, #0]
 800bdf2:	4638      	mov	r0, r7
 800bdf4:	f000 f80e 	bl	800be14 <__malloc_unlock>
 800bdf8:	e797      	b.n	800bd2a <_malloc_r+0x22>
 800bdfa:	6025      	str	r5, [r4, #0]
 800bdfc:	e7dc      	b.n	800bdb8 <_malloc_r+0xb0>
 800bdfe:	605b      	str	r3, [r3, #4]
 800be00:	deff      	udf	#255	; 0xff
 800be02:	bf00      	nop
 800be04:	200022cc 	.word	0x200022cc

0800be08 <__malloc_lock>:
 800be08:	4801      	ldr	r0, [pc, #4]	; (800be10 <__malloc_lock+0x8>)
 800be0a:	f7ff bf00 	b.w	800bc0e <__retarget_lock_acquire_recursive>
 800be0e:	bf00      	nop
 800be10:	200022c8 	.word	0x200022c8

0800be14 <__malloc_unlock>:
 800be14:	4801      	ldr	r0, [pc, #4]	; (800be1c <__malloc_unlock+0x8>)
 800be16:	f7ff befb 	b.w	800bc10 <__retarget_lock_release_recursive>
 800be1a:	bf00      	nop
 800be1c:	200022c8 	.word	0x200022c8

0800be20 <__ssputs_r>:
 800be20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be24:	688e      	ldr	r6, [r1, #8]
 800be26:	461f      	mov	r7, r3
 800be28:	42be      	cmp	r6, r7
 800be2a:	680b      	ldr	r3, [r1, #0]
 800be2c:	4682      	mov	sl, r0
 800be2e:	460c      	mov	r4, r1
 800be30:	4690      	mov	r8, r2
 800be32:	d82c      	bhi.n	800be8e <__ssputs_r+0x6e>
 800be34:	898a      	ldrh	r2, [r1, #12]
 800be36:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800be3a:	d026      	beq.n	800be8a <__ssputs_r+0x6a>
 800be3c:	6965      	ldr	r5, [r4, #20]
 800be3e:	6909      	ldr	r1, [r1, #16]
 800be40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800be44:	eba3 0901 	sub.w	r9, r3, r1
 800be48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800be4c:	1c7b      	adds	r3, r7, #1
 800be4e:	444b      	add	r3, r9
 800be50:	106d      	asrs	r5, r5, #1
 800be52:	429d      	cmp	r5, r3
 800be54:	bf38      	it	cc
 800be56:	461d      	movcc	r5, r3
 800be58:	0553      	lsls	r3, r2, #21
 800be5a:	d527      	bpl.n	800beac <__ssputs_r+0x8c>
 800be5c:	4629      	mov	r1, r5
 800be5e:	f7ff ff53 	bl	800bd08 <_malloc_r>
 800be62:	4606      	mov	r6, r0
 800be64:	b360      	cbz	r0, 800bec0 <__ssputs_r+0xa0>
 800be66:	6921      	ldr	r1, [r4, #16]
 800be68:	464a      	mov	r2, r9
 800be6a:	f7ff fed2 	bl	800bc12 <memcpy>
 800be6e:	89a3      	ldrh	r3, [r4, #12]
 800be70:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800be74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be78:	81a3      	strh	r3, [r4, #12]
 800be7a:	6126      	str	r6, [r4, #16]
 800be7c:	6165      	str	r5, [r4, #20]
 800be7e:	444e      	add	r6, r9
 800be80:	eba5 0509 	sub.w	r5, r5, r9
 800be84:	6026      	str	r6, [r4, #0]
 800be86:	60a5      	str	r5, [r4, #8]
 800be88:	463e      	mov	r6, r7
 800be8a:	42be      	cmp	r6, r7
 800be8c:	d900      	bls.n	800be90 <__ssputs_r+0x70>
 800be8e:	463e      	mov	r6, r7
 800be90:	6820      	ldr	r0, [r4, #0]
 800be92:	4632      	mov	r2, r6
 800be94:	4641      	mov	r1, r8
 800be96:	f000 fcff 	bl	800c898 <memmove>
 800be9a:	68a3      	ldr	r3, [r4, #8]
 800be9c:	1b9b      	subs	r3, r3, r6
 800be9e:	60a3      	str	r3, [r4, #8]
 800bea0:	6823      	ldr	r3, [r4, #0]
 800bea2:	4433      	add	r3, r6
 800bea4:	6023      	str	r3, [r4, #0]
 800bea6:	2000      	movs	r0, #0
 800bea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800beac:	462a      	mov	r2, r5
 800beae:	f000 fd3f 	bl	800c930 <_realloc_r>
 800beb2:	4606      	mov	r6, r0
 800beb4:	2800      	cmp	r0, #0
 800beb6:	d1e0      	bne.n	800be7a <__ssputs_r+0x5a>
 800beb8:	6921      	ldr	r1, [r4, #16]
 800beba:	4650      	mov	r0, sl
 800bebc:	f7ff feb8 	bl	800bc30 <_free_r>
 800bec0:	230c      	movs	r3, #12
 800bec2:	f8ca 3000 	str.w	r3, [sl]
 800bec6:	89a3      	ldrh	r3, [r4, #12]
 800bec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800becc:	81a3      	strh	r3, [r4, #12]
 800bece:	f04f 30ff 	mov.w	r0, #4294967295
 800bed2:	e7e9      	b.n	800bea8 <__ssputs_r+0x88>

0800bed4 <_svfiprintf_r>:
 800bed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bed8:	4698      	mov	r8, r3
 800beda:	898b      	ldrh	r3, [r1, #12]
 800bedc:	061b      	lsls	r3, r3, #24
 800bede:	b09d      	sub	sp, #116	; 0x74
 800bee0:	4607      	mov	r7, r0
 800bee2:	460d      	mov	r5, r1
 800bee4:	4614      	mov	r4, r2
 800bee6:	d50e      	bpl.n	800bf06 <_svfiprintf_r+0x32>
 800bee8:	690b      	ldr	r3, [r1, #16]
 800beea:	b963      	cbnz	r3, 800bf06 <_svfiprintf_r+0x32>
 800beec:	2140      	movs	r1, #64	; 0x40
 800beee:	f7ff ff0b 	bl	800bd08 <_malloc_r>
 800bef2:	6028      	str	r0, [r5, #0]
 800bef4:	6128      	str	r0, [r5, #16]
 800bef6:	b920      	cbnz	r0, 800bf02 <_svfiprintf_r+0x2e>
 800bef8:	230c      	movs	r3, #12
 800befa:	603b      	str	r3, [r7, #0]
 800befc:	f04f 30ff 	mov.w	r0, #4294967295
 800bf00:	e0d0      	b.n	800c0a4 <_svfiprintf_r+0x1d0>
 800bf02:	2340      	movs	r3, #64	; 0x40
 800bf04:	616b      	str	r3, [r5, #20]
 800bf06:	2300      	movs	r3, #0
 800bf08:	9309      	str	r3, [sp, #36]	; 0x24
 800bf0a:	2320      	movs	r3, #32
 800bf0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf10:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf14:	2330      	movs	r3, #48	; 0x30
 800bf16:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c0bc <_svfiprintf_r+0x1e8>
 800bf1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf1e:	f04f 0901 	mov.w	r9, #1
 800bf22:	4623      	mov	r3, r4
 800bf24:	469a      	mov	sl, r3
 800bf26:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf2a:	b10a      	cbz	r2, 800bf30 <_svfiprintf_r+0x5c>
 800bf2c:	2a25      	cmp	r2, #37	; 0x25
 800bf2e:	d1f9      	bne.n	800bf24 <_svfiprintf_r+0x50>
 800bf30:	ebba 0b04 	subs.w	fp, sl, r4
 800bf34:	d00b      	beq.n	800bf4e <_svfiprintf_r+0x7a>
 800bf36:	465b      	mov	r3, fp
 800bf38:	4622      	mov	r2, r4
 800bf3a:	4629      	mov	r1, r5
 800bf3c:	4638      	mov	r0, r7
 800bf3e:	f7ff ff6f 	bl	800be20 <__ssputs_r>
 800bf42:	3001      	adds	r0, #1
 800bf44:	f000 80a9 	beq.w	800c09a <_svfiprintf_r+0x1c6>
 800bf48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf4a:	445a      	add	r2, fp
 800bf4c:	9209      	str	r2, [sp, #36]	; 0x24
 800bf4e:	f89a 3000 	ldrb.w	r3, [sl]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	f000 80a1 	beq.w	800c09a <_svfiprintf_r+0x1c6>
 800bf58:	2300      	movs	r3, #0
 800bf5a:	f04f 32ff 	mov.w	r2, #4294967295
 800bf5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf62:	f10a 0a01 	add.w	sl, sl, #1
 800bf66:	9304      	str	r3, [sp, #16]
 800bf68:	9307      	str	r3, [sp, #28]
 800bf6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf6e:	931a      	str	r3, [sp, #104]	; 0x68
 800bf70:	4654      	mov	r4, sl
 800bf72:	2205      	movs	r2, #5
 800bf74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf78:	4850      	ldr	r0, [pc, #320]	; (800c0bc <_svfiprintf_r+0x1e8>)
 800bf7a:	f7f4 f939 	bl	80001f0 <memchr>
 800bf7e:	9a04      	ldr	r2, [sp, #16]
 800bf80:	b9d8      	cbnz	r0, 800bfba <_svfiprintf_r+0xe6>
 800bf82:	06d0      	lsls	r0, r2, #27
 800bf84:	bf44      	itt	mi
 800bf86:	2320      	movmi	r3, #32
 800bf88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf8c:	0711      	lsls	r1, r2, #28
 800bf8e:	bf44      	itt	mi
 800bf90:	232b      	movmi	r3, #43	; 0x2b
 800bf92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf96:	f89a 3000 	ldrb.w	r3, [sl]
 800bf9a:	2b2a      	cmp	r3, #42	; 0x2a
 800bf9c:	d015      	beq.n	800bfca <_svfiprintf_r+0xf6>
 800bf9e:	9a07      	ldr	r2, [sp, #28]
 800bfa0:	4654      	mov	r4, sl
 800bfa2:	2000      	movs	r0, #0
 800bfa4:	f04f 0c0a 	mov.w	ip, #10
 800bfa8:	4621      	mov	r1, r4
 800bfaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfae:	3b30      	subs	r3, #48	; 0x30
 800bfb0:	2b09      	cmp	r3, #9
 800bfb2:	d94d      	bls.n	800c050 <_svfiprintf_r+0x17c>
 800bfb4:	b1b0      	cbz	r0, 800bfe4 <_svfiprintf_r+0x110>
 800bfb6:	9207      	str	r2, [sp, #28]
 800bfb8:	e014      	b.n	800bfe4 <_svfiprintf_r+0x110>
 800bfba:	eba0 0308 	sub.w	r3, r0, r8
 800bfbe:	fa09 f303 	lsl.w	r3, r9, r3
 800bfc2:	4313      	orrs	r3, r2
 800bfc4:	9304      	str	r3, [sp, #16]
 800bfc6:	46a2      	mov	sl, r4
 800bfc8:	e7d2      	b.n	800bf70 <_svfiprintf_r+0x9c>
 800bfca:	9b03      	ldr	r3, [sp, #12]
 800bfcc:	1d19      	adds	r1, r3, #4
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	9103      	str	r1, [sp, #12]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	bfbb      	ittet	lt
 800bfd6:	425b      	neglt	r3, r3
 800bfd8:	f042 0202 	orrlt.w	r2, r2, #2
 800bfdc:	9307      	strge	r3, [sp, #28]
 800bfde:	9307      	strlt	r3, [sp, #28]
 800bfe0:	bfb8      	it	lt
 800bfe2:	9204      	strlt	r2, [sp, #16]
 800bfe4:	7823      	ldrb	r3, [r4, #0]
 800bfe6:	2b2e      	cmp	r3, #46	; 0x2e
 800bfe8:	d10c      	bne.n	800c004 <_svfiprintf_r+0x130>
 800bfea:	7863      	ldrb	r3, [r4, #1]
 800bfec:	2b2a      	cmp	r3, #42	; 0x2a
 800bfee:	d134      	bne.n	800c05a <_svfiprintf_r+0x186>
 800bff0:	9b03      	ldr	r3, [sp, #12]
 800bff2:	1d1a      	adds	r2, r3, #4
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	9203      	str	r2, [sp, #12]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	bfb8      	it	lt
 800bffc:	f04f 33ff 	movlt.w	r3, #4294967295
 800c000:	3402      	adds	r4, #2
 800c002:	9305      	str	r3, [sp, #20]
 800c004:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c0cc <_svfiprintf_r+0x1f8>
 800c008:	7821      	ldrb	r1, [r4, #0]
 800c00a:	2203      	movs	r2, #3
 800c00c:	4650      	mov	r0, sl
 800c00e:	f7f4 f8ef 	bl	80001f0 <memchr>
 800c012:	b138      	cbz	r0, 800c024 <_svfiprintf_r+0x150>
 800c014:	9b04      	ldr	r3, [sp, #16]
 800c016:	eba0 000a 	sub.w	r0, r0, sl
 800c01a:	2240      	movs	r2, #64	; 0x40
 800c01c:	4082      	lsls	r2, r0
 800c01e:	4313      	orrs	r3, r2
 800c020:	3401      	adds	r4, #1
 800c022:	9304      	str	r3, [sp, #16]
 800c024:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c028:	4825      	ldr	r0, [pc, #148]	; (800c0c0 <_svfiprintf_r+0x1ec>)
 800c02a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c02e:	2206      	movs	r2, #6
 800c030:	f7f4 f8de 	bl	80001f0 <memchr>
 800c034:	2800      	cmp	r0, #0
 800c036:	d038      	beq.n	800c0aa <_svfiprintf_r+0x1d6>
 800c038:	4b22      	ldr	r3, [pc, #136]	; (800c0c4 <_svfiprintf_r+0x1f0>)
 800c03a:	bb1b      	cbnz	r3, 800c084 <_svfiprintf_r+0x1b0>
 800c03c:	9b03      	ldr	r3, [sp, #12]
 800c03e:	3307      	adds	r3, #7
 800c040:	f023 0307 	bic.w	r3, r3, #7
 800c044:	3308      	adds	r3, #8
 800c046:	9303      	str	r3, [sp, #12]
 800c048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c04a:	4433      	add	r3, r6
 800c04c:	9309      	str	r3, [sp, #36]	; 0x24
 800c04e:	e768      	b.n	800bf22 <_svfiprintf_r+0x4e>
 800c050:	fb0c 3202 	mla	r2, ip, r2, r3
 800c054:	460c      	mov	r4, r1
 800c056:	2001      	movs	r0, #1
 800c058:	e7a6      	b.n	800bfa8 <_svfiprintf_r+0xd4>
 800c05a:	2300      	movs	r3, #0
 800c05c:	3401      	adds	r4, #1
 800c05e:	9305      	str	r3, [sp, #20]
 800c060:	4619      	mov	r1, r3
 800c062:	f04f 0c0a 	mov.w	ip, #10
 800c066:	4620      	mov	r0, r4
 800c068:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c06c:	3a30      	subs	r2, #48	; 0x30
 800c06e:	2a09      	cmp	r2, #9
 800c070:	d903      	bls.n	800c07a <_svfiprintf_r+0x1a6>
 800c072:	2b00      	cmp	r3, #0
 800c074:	d0c6      	beq.n	800c004 <_svfiprintf_r+0x130>
 800c076:	9105      	str	r1, [sp, #20]
 800c078:	e7c4      	b.n	800c004 <_svfiprintf_r+0x130>
 800c07a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c07e:	4604      	mov	r4, r0
 800c080:	2301      	movs	r3, #1
 800c082:	e7f0      	b.n	800c066 <_svfiprintf_r+0x192>
 800c084:	ab03      	add	r3, sp, #12
 800c086:	9300      	str	r3, [sp, #0]
 800c088:	462a      	mov	r2, r5
 800c08a:	4b0f      	ldr	r3, [pc, #60]	; (800c0c8 <_svfiprintf_r+0x1f4>)
 800c08c:	a904      	add	r1, sp, #16
 800c08e:	4638      	mov	r0, r7
 800c090:	f3af 8000 	nop.w
 800c094:	1c42      	adds	r2, r0, #1
 800c096:	4606      	mov	r6, r0
 800c098:	d1d6      	bne.n	800c048 <_svfiprintf_r+0x174>
 800c09a:	89ab      	ldrh	r3, [r5, #12]
 800c09c:	065b      	lsls	r3, r3, #25
 800c09e:	f53f af2d 	bmi.w	800befc <_svfiprintf_r+0x28>
 800c0a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0a4:	b01d      	add	sp, #116	; 0x74
 800c0a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0aa:	ab03      	add	r3, sp, #12
 800c0ac:	9300      	str	r3, [sp, #0]
 800c0ae:	462a      	mov	r2, r5
 800c0b0:	4b05      	ldr	r3, [pc, #20]	; (800c0c8 <_svfiprintf_r+0x1f4>)
 800c0b2:	a904      	add	r1, sp, #16
 800c0b4:	4638      	mov	r0, r7
 800c0b6:	f000 f9bd 	bl	800c434 <_printf_i>
 800c0ba:	e7eb      	b.n	800c094 <_svfiprintf_r+0x1c0>
 800c0bc:	0800da38 	.word	0x0800da38
 800c0c0:	0800da42 	.word	0x0800da42
 800c0c4:	00000000 	.word	0x00000000
 800c0c8:	0800be21 	.word	0x0800be21
 800c0cc:	0800da3e 	.word	0x0800da3e

0800c0d0 <__sfputc_r>:
 800c0d0:	6893      	ldr	r3, [r2, #8]
 800c0d2:	3b01      	subs	r3, #1
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	b410      	push	{r4}
 800c0d8:	6093      	str	r3, [r2, #8]
 800c0da:	da08      	bge.n	800c0ee <__sfputc_r+0x1e>
 800c0dc:	6994      	ldr	r4, [r2, #24]
 800c0de:	42a3      	cmp	r3, r4
 800c0e0:	db01      	blt.n	800c0e6 <__sfputc_r+0x16>
 800c0e2:	290a      	cmp	r1, #10
 800c0e4:	d103      	bne.n	800c0ee <__sfputc_r+0x1e>
 800c0e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0ea:	f7ff bc82 	b.w	800b9f2 <__swbuf_r>
 800c0ee:	6813      	ldr	r3, [r2, #0]
 800c0f0:	1c58      	adds	r0, r3, #1
 800c0f2:	6010      	str	r0, [r2, #0]
 800c0f4:	7019      	strb	r1, [r3, #0]
 800c0f6:	4608      	mov	r0, r1
 800c0f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0fc:	4770      	bx	lr

0800c0fe <__sfputs_r>:
 800c0fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c100:	4606      	mov	r6, r0
 800c102:	460f      	mov	r7, r1
 800c104:	4614      	mov	r4, r2
 800c106:	18d5      	adds	r5, r2, r3
 800c108:	42ac      	cmp	r4, r5
 800c10a:	d101      	bne.n	800c110 <__sfputs_r+0x12>
 800c10c:	2000      	movs	r0, #0
 800c10e:	e007      	b.n	800c120 <__sfputs_r+0x22>
 800c110:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c114:	463a      	mov	r2, r7
 800c116:	4630      	mov	r0, r6
 800c118:	f7ff ffda 	bl	800c0d0 <__sfputc_r>
 800c11c:	1c43      	adds	r3, r0, #1
 800c11e:	d1f3      	bne.n	800c108 <__sfputs_r+0xa>
 800c120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c124 <_vfiprintf_r>:
 800c124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c128:	460d      	mov	r5, r1
 800c12a:	b09d      	sub	sp, #116	; 0x74
 800c12c:	4614      	mov	r4, r2
 800c12e:	4698      	mov	r8, r3
 800c130:	4606      	mov	r6, r0
 800c132:	b118      	cbz	r0, 800c13c <_vfiprintf_r+0x18>
 800c134:	6a03      	ldr	r3, [r0, #32]
 800c136:	b90b      	cbnz	r3, 800c13c <_vfiprintf_r+0x18>
 800c138:	f7ff fb54 	bl	800b7e4 <__sinit>
 800c13c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c13e:	07d9      	lsls	r1, r3, #31
 800c140:	d405      	bmi.n	800c14e <_vfiprintf_r+0x2a>
 800c142:	89ab      	ldrh	r3, [r5, #12]
 800c144:	059a      	lsls	r2, r3, #22
 800c146:	d402      	bmi.n	800c14e <_vfiprintf_r+0x2a>
 800c148:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c14a:	f7ff fd60 	bl	800bc0e <__retarget_lock_acquire_recursive>
 800c14e:	89ab      	ldrh	r3, [r5, #12]
 800c150:	071b      	lsls	r3, r3, #28
 800c152:	d501      	bpl.n	800c158 <_vfiprintf_r+0x34>
 800c154:	692b      	ldr	r3, [r5, #16]
 800c156:	b99b      	cbnz	r3, 800c180 <_vfiprintf_r+0x5c>
 800c158:	4629      	mov	r1, r5
 800c15a:	4630      	mov	r0, r6
 800c15c:	f7ff fc86 	bl	800ba6c <__swsetup_r>
 800c160:	b170      	cbz	r0, 800c180 <_vfiprintf_r+0x5c>
 800c162:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c164:	07dc      	lsls	r4, r3, #31
 800c166:	d504      	bpl.n	800c172 <_vfiprintf_r+0x4e>
 800c168:	f04f 30ff 	mov.w	r0, #4294967295
 800c16c:	b01d      	add	sp, #116	; 0x74
 800c16e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c172:	89ab      	ldrh	r3, [r5, #12]
 800c174:	0598      	lsls	r0, r3, #22
 800c176:	d4f7      	bmi.n	800c168 <_vfiprintf_r+0x44>
 800c178:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c17a:	f7ff fd49 	bl	800bc10 <__retarget_lock_release_recursive>
 800c17e:	e7f3      	b.n	800c168 <_vfiprintf_r+0x44>
 800c180:	2300      	movs	r3, #0
 800c182:	9309      	str	r3, [sp, #36]	; 0x24
 800c184:	2320      	movs	r3, #32
 800c186:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c18a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c18e:	2330      	movs	r3, #48	; 0x30
 800c190:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c344 <_vfiprintf_r+0x220>
 800c194:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c198:	f04f 0901 	mov.w	r9, #1
 800c19c:	4623      	mov	r3, r4
 800c19e:	469a      	mov	sl, r3
 800c1a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1a4:	b10a      	cbz	r2, 800c1aa <_vfiprintf_r+0x86>
 800c1a6:	2a25      	cmp	r2, #37	; 0x25
 800c1a8:	d1f9      	bne.n	800c19e <_vfiprintf_r+0x7a>
 800c1aa:	ebba 0b04 	subs.w	fp, sl, r4
 800c1ae:	d00b      	beq.n	800c1c8 <_vfiprintf_r+0xa4>
 800c1b0:	465b      	mov	r3, fp
 800c1b2:	4622      	mov	r2, r4
 800c1b4:	4629      	mov	r1, r5
 800c1b6:	4630      	mov	r0, r6
 800c1b8:	f7ff ffa1 	bl	800c0fe <__sfputs_r>
 800c1bc:	3001      	adds	r0, #1
 800c1be:	f000 80a9 	beq.w	800c314 <_vfiprintf_r+0x1f0>
 800c1c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c1c4:	445a      	add	r2, fp
 800c1c6:	9209      	str	r2, [sp, #36]	; 0x24
 800c1c8:	f89a 3000 	ldrb.w	r3, [sl]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	f000 80a1 	beq.w	800c314 <_vfiprintf_r+0x1f0>
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	f04f 32ff 	mov.w	r2, #4294967295
 800c1d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1dc:	f10a 0a01 	add.w	sl, sl, #1
 800c1e0:	9304      	str	r3, [sp, #16]
 800c1e2:	9307      	str	r3, [sp, #28]
 800c1e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c1e8:	931a      	str	r3, [sp, #104]	; 0x68
 800c1ea:	4654      	mov	r4, sl
 800c1ec:	2205      	movs	r2, #5
 800c1ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1f2:	4854      	ldr	r0, [pc, #336]	; (800c344 <_vfiprintf_r+0x220>)
 800c1f4:	f7f3 fffc 	bl	80001f0 <memchr>
 800c1f8:	9a04      	ldr	r2, [sp, #16]
 800c1fa:	b9d8      	cbnz	r0, 800c234 <_vfiprintf_r+0x110>
 800c1fc:	06d1      	lsls	r1, r2, #27
 800c1fe:	bf44      	itt	mi
 800c200:	2320      	movmi	r3, #32
 800c202:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c206:	0713      	lsls	r3, r2, #28
 800c208:	bf44      	itt	mi
 800c20a:	232b      	movmi	r3, #43	; 0x2b
 800c20c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c210:	f89a 3000 	ldrb.w	r3, [sl]
 800c214:	2b2a      	cmp	r3, #42	; 0x2a
 800c216:	d015      	beq.n	800c244 <_vfiprintf_r+0x120>
 800c218:	9a07      	ldr	r2, [sp, #28]
 800c21a:	4654      	mov	r4, sl
 800c21c:	2000      	movs	r0, #0
 800c21e:	f04f 0c0a 	mov.w	ip, #10
 800c222:	4621      	mov	r1, r4
 800c224:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c228:	3b30      	subs	r3, #48	; 0x30
 800c22a:	2b09      	cmp	r3, #9
 800c22c:	d94d      	bls.n	800c2ca <_vfiprintf_r+0x1a6>
 800c22e:	b1b0      	cbz	r0, 800c25e <_vfiprintf_r+0x13a>
 800c230:	9207      	str	r2, [sp, #28]
 800c232:	e014      	b.n	800c25e <_vfiprintf_r+0x13a>
 800c234:	eba0 0308 	sub.w	r3, r0, r8
 800c238:	fa09 f303 	lsl.w	r3, r9, r3
 800c23c:	4313      	orrs	r3, r2
 800c23e:	9304      	str	r3, [sp, #16]
 800c240:	46a2      	mov	sl, r4
 800c242:	e7d2      	b.n	800c1ea <_vfiprintf_r+0xc6>
 800c244:	9b03      	ldr	r3, [sp, #12]
 800c246:	1d19      	adds	r1, r3, #4
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	9103      	str	r1, [sp, #12]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	bfbb      	ittet	lt
 800c250:	425b      	neglt	r3, r3
 800c252:	f042 0202 	orrlt.w	r2, r2, #2
 800c256:	9307      	strge	r3, [sp, #28]
 800c258:	9307      	strlt	r3, [sp, #28]
 800c25a:	bfb8      	it	lt
 800c25c:	9204      	strlt	r2, [sp, #16]
 800c25e:	7823      	ldrb	r3, [r4, #0]
 800c260:	2b2e      	cmp	r3, #46	; 0x2e
 800c262:	d10c      	bne.n	800c27e <_vfiprintf_r+0x15a>
 800c264:	7863      	ldrb	r3, [r4, #1]
 800c266:	2b2a      	cmp	r3, #42	; 0x2a
 800c268:	d134      	bne.n	800c2d4 <_vfiprintf_r+0x1b0>
 800c26a:	9b03      	ldr	r3, [sp, #12]
 800c26c:	1d1a      	adds	r2, r3, #4
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	9203      	str	r2, [sp, #12]
 800c272:	2b00      	cmp	r3, #0
 800c274:	bfb8      	it	lt
 800c276:	f04f 33ff 	movlt.w	r3, #4294967295
 800c27a:	3402      	adds	r4, #2
 800c27c:	9305      	str	r3, [sp, #20]
 800c27e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c354 <_vfiprintf_r+0x230>
 800c282:	7821      	ldrb	r1, [r4, #0]
 800c284:	2203      	movs	r2, #3
 800c286:	4650      	mov	r0, sl
 800c288:	f7f3 ffb2 	bl	80001f0 <memchr>
 800c28c:	b138      	cbz	r0, 800c29e <_vfiprintf_r+0x17a>
 800c28e:	9b04      	ldr	r3, [sp, #16]
 800c290:	eba0 000a 	sub.w	r0, r0, sl
 800c294:	2240      	movs	r2, #64	; 0x40
 800c296:	4082      	lsls	r2, r0
 800c298:	4313      	orrs	r3, r2
 800c29a:	3401      	adds	r4, #1
 800c29c:	9304      	str	r3, [sp, #16]
 800c29e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2a2:	4829      	ldr	r0, [pc, #164]	; (800c348 <_vfiprintf_r+0x224>)
 800c2a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c2a8:	2206      	movs	r2, #6
 800c2aa:	f7f3 ffa1 	bl	80001f0 <memchr>
 800c2ae:	2800      	cmp	r0, #0
 800c2b0:	d03f      	beq.n	800c332 <_vfiprintf_r+0x20e>
 800c2b2:	4b26      	ldr	r3, [pc, #152]	; (800c34c <_vfiprintf_r+0x228>)
 800c2b4:	bb1b      	cbnz	r3, 800c2fe <_vfiprintf_r+0x1da>
 800c2b6:	9b03      	ldr	r3, [sp, #12]
 800c2b8:	3307      	adds	r3, #7
 800c2ba:	f023 0307 	bic.w	r3, r3, #7
 800c2be:	3308      	adds	r3, #8
 800c2c0:	9303      	str	r3, [sp, #12]
 800c2c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2c4:	443b      	add	r3, r7
 800c2c6:	9309      	str	r3, [sp, #36]	; 0x24
 800c2c8:	e768      	b.n	800c19c <_vfiprintf_r+0x78>
 800c2ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800c2ce:	460c      	mov	r4, r1
 800c2d0:	2001      	movs	r0, #1
 800c2d2:	e7a6      	b.n	800c222 <_vfiprintf_r+0xfe>
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	3401      	adds	r4, #1
 800c2d8:	9305      	str	r3, [sp, #20]
 800c2da:	4619      	mov	r1, r3
 800c2dc:	f04f 0c0a 	mov.w	ip, #10
 800c2e0:	4620      	mov	r0, r4
 800c2e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2e6:	3a30      	subs	r2, #48	; 0x30
 800c2e8:	2a09      	cmp	r2, #9
 800c2ea:	d903      	bls.n	800c2f4 <_vfiprintf_r+0x1d0>
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d0c6      	beq.n	800c27e <_vfiprintf_r+0x15a>
 800c2f0:	9105      	str	r1, [sp, #20]
 800c2f2:	e7c4      	b.n	800c27e <_vfiprintf_r+0x15a>
 800c2f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c2f8:	4604      	mov	r4, r0
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	e7f0      	b.n	800c2e0 <_vfiprintf_r+0x1bc>
 800c2fe:	ab03      	add	r3, sp, #12
 800c300:	9300      	str	r3, [sp, #0]
 800c302:	462a      	mov	r2, r5
 800c304:	4b12      	ldr	r3, [pc, #72]	; (800c350 <_vfiprintf_r+0x22c>)
 800c306:	a904      	add	r1, sp, #16
 800c308:	4630      	mov	r0, r6
 800c30a:	f3af 8000 	nop.w
 800c30e:	4607      	mov	r7, r0
 800c310:	1c78      	adds	r0, r7, #1
 800c312:	d1d6      	bne.n	800c2c2 <_vfiprintf_r+0x19e>
 800c314:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c316:	07d9      	lsls	r1, r3, #31
 800c318:	d405      	bmi.n	800c326 <_vfiprintf_r+0x202>
 800c31a:	89ab      	ldrh	r3, [r5, #12]
 800c31c:	059a      	lsls	r2, r3, #22
 800c31e:	d402      	bmi.n	800c326 <_vfiprintf_r+0x202>
 800c320:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c322:	f7ff fc75 	bl	800bc10 <__retarget_lock_release_recursive>
 800c326:	89ab      	ldrh	r3, [r5, #12]
 800c328:	065b      	lsls	r3, r3, #25
 800c32a:	f53f af1d 	bmi.w	800c168 <_vfiprintf_r+0x44>
 800c32e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c330:	e71c      	b.n	800c16c <_vfiprintf_r+0x48>
 800c332:	ab03      	add	r3, sp, #12
 800c334:	9300      	str	r3, [sp, #0]
 800c336:	462a      	mov	r2, r5
 800c338:	4b05      	ldr	r3, [pc, #20]	; (800c350 <_vfiprintf_r+0x22c>)
 800c33a:	a904      	add	r1, sp, #16
 800c33c:	4630      	mov	r0, r6
 800c33e:	f000 f879 	bl	800c434 <_printf_i>
 800c342:	e7e4      	b.n	800c30e <_vfiprintf_r+0x1ea>
 800c344:	0800da38 	.word	0x0800da38
 800c348:	0800da42 	.word	0x0800da42
 800c34c:	00000000 	.word	0x00000000
 800c350:	0800c0ff 	.word	0x0800c0ff
 800c354:	0800da3e 	.word	0x0800da3e

0800c358 <_printf_common>:
 800c358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c35c:	4616      	mov	r6, r2
 800c35e:	4699      	mov	r9, r3
 800c360:	688a      	ldr	r2, [r1, #8]
 800c362:	690b      	ldr	r3, [r1, #16]
 800c364:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c368:	4293      	cmp	r3, r2
 800c36a:	bfb8      	it	lt
 800c36c:	4613      	movlt	r3, r2
 800c36e:	6033      	str	r3, [r6, #0]
 800c370:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c374:	4607      	mov	r7, r0
 800c376:	460c      	mov	r4, r1
 800c378:	b10a      	cbz	r2, 800c37e <_printf_common+0x26>
 800c37a:	3301      	adds	r3, #1
 800c37c:	6033      	str	r3, [r6, #0]
 800c37e:	6823      	ldr	r3, [r4, #0]
 800c380:	0699      	lsls	r1, r3, #26
 800c382:	bf42      	ittt	mi
 800c384:	6833      	ldrmi	r3, [r6, #0]
 800c386:	3302      	addmi	r3, #2
 800c388:	6033      	strmi	r3, [r6, #0]
 800c38a:	6825      	ldr	r5, [r4, #0]
 800c38c:	f015 0506 	ands.w	r5, r5, #6
 800c390:	d106      	bne.n	800c3a0 <_printf_common+0x48>
 800c392:	f104 0a19 	add.w	sl, r4, #25
 800c396:	68e3      	ldr	r3, [r4, #12]
 800c398:	6832      	ldr	r2, [r6, #0]
 800c39a:	1a9b      	subs	r3, r3, r2
 800c39c:	42ab      	cmp	r3, r5
 800c39e:	dc26      	bgt.n	800c3ee <_printf_common+0x96>
 800c3a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c3a4:	1e13      	subs	r3, r2, #0
 800c3a6:	6822      	ldr	r2, [r4, #0]
 800c3a8:	bf18      	it	ne
 800c3aa:	2301      	movne	r3, #1
 800c3ac:	0692      	lsls	r2, r2, #26
 800c3ae:	d42b      	bmi.n	800c408 <_printf_common+0xb0>
 800c3b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c3b4:	4649      	mov	r1, r9
 800c3b6:	4638      	mov	r0, r7
 800c3b8:	47c0      	blx	r8
 800c3ba:	3001      	adds	r0, #1
 800c3bc:	d01e      	beq.n	800c3fc <_printf_common+0xa4>
 800c3be:	6823      	ldr	r3, [r4, #0]
 800c3c0:	6922      	ldr	r2, [r4, #16]
 800c3c2:	f003 0306 	and.w	r3, r3, #6
 800c3c6:	2b04      	cmp	r3, #4
 800c3c8:	bf02      	ittt	eq
 800c3ca:	68e5      	ldreq	r5, [r4, #12]
 800c3cc:	6833      	ldreq	r3, [r6, #0]
 800c3ce:	1aed      	subeq	r5, r5, r3
 800c3d0:	68a3      	ldr	r3, [r4, #8]
 800c3d2:	bf0c      	ite	eq
 800c3d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c3d8:	2500      	movne	r5, #0
 800c3da:	4293      	cmp	r3, r2
 800c3dc:	bfc4      	itt	gt
 800c3de:	1a9b      	subgt	r3, r3, r2
 800c3e0:	18ed      	addgt	r5, r5, r3
 800c3e2:	2600      	movs	r6, #0
 800c3e4:	341a      	adds	r4, #26
 800c3e6:	42b5      	cmp	r5, r6
 800c3e8:	d11a      	bne.n	800c420 <_printf_common+0xc8>
 800c3ea:	2000      	movs	r0, #0
 800c3ec:	e008      	b.n	800c400 <_printf_common+0xa8>
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	4652      	mov	r2, sl
 800c3f2:	4649      	mov	r1, r9
 800c3f4:	4638      	mov	r0, r7
 800c3f6:	47c0      	blx	r8
 800c3f8:	3001      	adds	r0, #1
 800c3fa:	d103      	bne.n	800c404 <_printf_common+0xac>
 800c3fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c404:	3501      	adds	r5, #1
 800c406:	e7c6      	b.n	800c396 <_printf_common+0x3e>
 800c408:	18e1      	adds	r1, r4, r3
 800c40a:	1c5a      	adds	r2, r3, #1
 800c40c:	2030      	movs	r0, #48	; 0x30
 800c40e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c412:	4422      	add	r2, r4
 800c414:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c418:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c41c:	3302      	adds	r3, #2
 800c41e:	e7c7      	b.n	800c3b0 <_printf_common+0x58>
 800c420:	2301      	movs	r3, #1
 800c422:	4622      	mov	r2, r4
 800c424:	4649      	mov	r1, r9
 800c426:	4638      	mov	r0, r7
 800c428:	47c0      	blx	r8
 800c42a:	3001      	adds	r0, #1
 800c42c:	d0e6      	beq.n	800c3fc <_printf_common+0xa4>
 800c42e:	3601      	adds	r6, #1
 800c430:	e7d9      	b.n	800c3e6 <_printf_common+0x8e>
	...

0800c434 <_printf_i>:
 800c434:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c438:	7e0f      	ldrb	r7, [r1, #24]
 800c43a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c43c:	2f78      	cmp	r7, #120	; 0x78
 800c43e:	4691      	mov	r9, r2
 800c440:	4680      	mov	r8, r0
 800c442:	460c      	mov	r4, r1
 800c444:	469a      	mov	sl, r3
 800c446:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c44a:	d807      	bhi.n	800c45c <_printf_i+0x28>
 800c44c:	2f62      	cmp	r7, #98	; 0x62
 800c44e:	d80a      	bhi.n	800c466 <_printf_i+0x32>
 800c450:	2f00      	cmp	r7, #0
 800c452:	f000 80d4 	beq.w	800c5fe <_printf_i+0x1ca>
 800c456:	2f58      	cmp	r7, #88	; 0x58
 800c458:	f000 80c0 	beq.w	800c5dc <_printf_i+0x1a8>
 800c45c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c460:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c464:	e03a      	b.n	800c4dc <_printf_i+0xa8>
 800c466:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c46a:	2b15      	cmp	r3, #21
 800c46c:	d8f6      	bhi.n	800c45c <_printf_i+0x28>
 800c46e:	a101      	add	r1, pc, #4	; (adr r1, 800c474 <_printf_i+0x40>)
 800c470:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c474:	0800c4cd 	.word	0x0800c4cd
 800c478:	0800c4e1 	.word	0x0800c4e1
 800c47c:	0800c45d 	.word	0x0800c45d
 800c480:	0800c45d 	.word	0x0800c45d
 800c484:	0800c45d 	.word	0x0800c45d
 800c488:	0800c45d 	.word	0x0800c45d
 800c48c:	0800c4e1 	.word	0x0800c4e1
 800c490:	0800c45d 	.word	0x0800c45d
 800c494:	0800c45d 	.word	0x0800c45d
 800c498:	0800c45d 	.word	0x0800c45d
 800c49c:	0800c45d 	.word	0x0800c45d
 800c4a0:	0800c5e5 	.word	0x0800c5e5
 800c4a4:	0800c50d 	.word	0x0800c50d
 800c4a8:	0800c59f 	.word	0x0800c59f
 800c4ac:	0800c45d 	.word	0x0800c45d
 800c4b0:	0800c45d 	.word	0x0800c45d
 800c4b4:	0800c607 	.word	0x0800c607
 800c4b8:	0800c45d 	.word	0x0800c45d
 800c4bc:	0800c50d 	.word	0x0800c50d
 800c4c0:	0800c45d 	.word	0x0800c45d
 800c4c4:	0800c45d 	.word	0x0800c45d
 800c4c8:	0800c5a7 	.word	0x0800c5a7
 800c4cc:	682b      	ldr	r3, [r5, #0]
 800c4ce:	1d1a      	adds	r2, r3, #4
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	602a      	str	r2, [r5, #0]
 800c4d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c4d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c4dc:	2301      	movs	r3, #1
 800c4de:	e09f      	b.n	800c620 <_printf_i+0x1ec>
 800c4e0:	6820      	ldr	r0, [r4, #0]
 800c4e2:	682b      	ldr	r3, [r5, #0]
 800c4e4:	0607      	lsls	r7, r0, #24
 800c4e6:	f103 0104 	add.w	r1, r3, #4
 800c4ea:	6029      	str	r1, [r5, #0]
 800c4ec:	d501      	bpl.n	800c4f2 <_printf_i+0xbe>
 800c4ee:	681e      	ldr	r6, [r3, #0]
 800c4f0:	e003      	b.n	800c4fa <_printf_i+0xc6>
 800c4f2:	0646      	lsls	r6, r0, #25
 800c4f4:	d5fb      	bpl.n	800c4ee <_printf_i+0xba>
 800c4f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c4fa:	2e00      	cmp	r6, #0
 800c4fc:	da03      	bge.n	800c506 <_printf_i+0xd2>
 800c4fe:	232d      	movs	r3, #45	; 0x2d
 800c500:	4276      	negs	r6, r6
 800c502:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c506:	485a      	ldr	r0, [pc, #360]	; (800c670 <_printf_i+0x23c>)
 800c508:	230a      	movs	r3, #10
 800c50a:	e012      	b.n	800c532 <_printf_i+0xfe>
 800c50c:	682b      	ldr	r3, [r5, #0]
 800c50e:	6820      	ldr	r0, [r4, #0]
 800c510:	1d19      	adds	r1, r3, #4
 800c512:	6029      	str	r1, [r5, #0]
 800c514:	0605      	lsls	r5, r0, #24
 800c516:	d501      	bpl.n	800c51c <_printf_i+0xe8>
 800c518:	681e      	ldr	r6, [r3, #0]
 800c51a:	e002      	b.n	800c522 <_printf_i+0xee>
 800c51c:	0641      	lsls	r1, r0, #25
 800c51e:	d5fb      	bpl.n	800c518 <_printf_i+0xe4>
 800c520:	881e      	ldrh	r6, [r3, #0]
 800c522:	4853      	ldr	r0, [pc, #332]	; (800c670 <_printf_i+0x23c>)
 800c524:	2f6f      	cmp	r7, #111	; 0x6f
 800c526:	bf0c      	ite	eq
 800c528:	2308      	moveq	r3, #8
 800c52a:	230a      	movne	r3, #10
 800c52c:	2100      	movs	r1, #0
 800c52e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c532:	6865      	ldr	r5, [r4, #4]
 800c534:	60a5      	str	r5, [r4, #8]
 800c536:	2d00      	cmp	r5, #0
 800c538:	bfa2      	ittt	ge
 800c53a:	6821      	ldrge	r1, [r4, #0]
 800c53c:	f021 0104 	bicge.w	r1, r1, #4
 800c540:	6021      	strge	r1, [r4, #0]
 800c542:	b90e      	cbnz	r6, 800c548 <_printf_i+0x114>
 800c544:	2d00      	cmp	r5, #0
 800c546:	d04b      	beq.n	800c5e0 <_printf_i+0x1ac>
 800c548:	4615      	mov	r5, r2
 800c54a:	fbb6 f1f3 	udiv	r1, r6, r3
 800c54e:	fb03 6711 	mls	r7, r3, r1, r6
 800c552:	5dc7      	ldrb	r7, [r0, r7]
 800c554:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c558:	4637      	mov	r7, r6
 800c55a:	42bb      	cmp	r3, r7
 800c55c:	460e      	mov	r6, r1
 800c55e:	d9f4      	bls.n	800c54a <_printf_i+0x116>
 800c560:	2b08      	cmp	r3, #8
 800c562:	d10b      	bne.n	800c57c <_printf_i+0x148>
 800c564:	6823      	ldr	r3, [r4, #0]
 800c566:	07de      	lsls	r6, r3, #31
 800c568:	d508      	bpl.n	800c57c <_printf_i+0x148>
 800c56a:	6923      	ldr	r3, [r4, #16]
 800c56c:	6861      	ldr	r1, [r4, #4]
 800c56e:	4299      	cmp	r1, r3
 800c570:	bfde      	ittt	le
 800c572:	2330      	movle	r3, #48	; 0x30
 800c574:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c578:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c57c:	1b52      	subs	r2, r2, r5
 800c57e:	6122      	str	r2, [r4, #16]
 800c580:	f8cd a000 	str.w	sl, [sp]
 800c584:	464b      	mov	r3, r9
 800c586:	aa03      	add	r2, sp, #12
 800c588:	4621      	mov	r1, r4
 800c58a:	4640      	mov	r0, r8
 800c58c:	f7ff fee4 	bl	800c358 <_printf_common>
 800c590:	3001      	adds	r0, #1
 800c592:	d14a      	bne.n	800c62a <_printf_i+0x1f6>
 800c594:	f04f 30ff 	mov.w	r0, #4294967295
 800c598:	b004      	add	sp, #16
 800c59a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c59e:	6823      	ldr	r3, [r4, #0]
 800c5a0:	f043 0320 	orr.w	r3, r3, #32
 800c5a4:	6023      	str	r3, [r4, #0]
 800c5a6:	4833      	ldr	r0, [pc, #204]	; (800c674 <_printf_i+0x240>)
 800c5a8:	2778      	movs	r7, #120	; 0x78
 800c5aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c5ae:	6823      	ldr	r3, [r4, #0]
 800c5b0:	6829      	ldr	r1, [r5, #0]
 800c5b2:	061f      	lsls	r7, r3, #24
 800c5b4:	f851 6b04 	ldr.w	r6, [r1], #4
 800c5b8:	d402      	bmi.n	800c5c0 <_printf_i+0x18c>
 800c5ba:	065f      	lsls	r7, r3, #25
 800c5bc:	bf48      	it	mi
 800c5be:	b2b6      	uxthmi	r6, r6
 800c5c0:	07df      	lsls	r7, r3, #31
 800c5c2:	bf48      	it	mi
 800c5c4:	f043 0320 	orrmi.w	r3, r3, #32
 800c5c8:	6029      	str	r1, [r5, #0]
 800c5ca:	bf48      	it	mi
 800c5cc:	6023      	strmi	r3, [r4, #0]
 800c5ce:	b91e      	cbnz	r6, 800c5d8 <_printf_i+0x1a4>
 800c5d0:	6823      	ldr	r3, [r4, #0]
 800c5d2:	f023 0320 	bic.w	r3, r3, #32
 800c5d6:	6023      	str	r3, [r4, #0]
 800c5d8:	2310      	movs	r3, #16
 800c5da:	e7a7      	b.n	800c52c <_printf_i+0xf8>
 800c5dc:	4824      	ldr	r0, [pc, #144]	; (800c670 <_printf_i+0x23c>)
 800c5de:	e7e4      	b.n	800c5aa <_printf_i+0x176>
 800c5e0:	4615      	mov	r5, r2
 800c5e2:	e7bd      	b.n	800c560 <_printf_i+0x12c>
 800c5e4:	682b      	ldr	r3, [r5, #0]
 800c5e6:	6826      	ldr	r6, [r4, #0]
 800c5e8:	6961      	ldr	r1, [r4, #20]
 800c5ea:	1d18      	adds	r0, r3, #4
 800c5ec:	6028      	str	r0, [r5, #0]
 800c5ee:	0635      	lsls	r5, r6, #24
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	d501      	bpl.n	800c5f8 <_printf_i+0x1c4>
 800c5f4:	6019      	str	r1, [r3, #0]
 800c5f6:	e002      	b.n	800c5fe <_printf_i+0x1ca>
 800c5f8:	0670      	lsls	r0, r6, #25
 800c5fa:	d5fb      	bpl.n	800c5f4 <_printf_i+0x1c0>
 800c5fc:	8019      	strh	r1, [r3, #0]
 800c5fe:	2300      	movs	r3, #0
 800c600:	6123      	str	r3, [r4, #16]
 800c602:	4615      	mov	r5, r2
 800c604:	e7bc      	b.n	800c580 <_printf_i+0x14c>
 800c606:	682b      	ldr	r3, [r5, #0]
 800c608:	1d1a      	adds	r2, r3, #4
 800c60a:	602a      	str	r2, [r5, #0]
 800c60c:	681d      	ldr	r5, [r3, #0]
 800c60e:	6862      	ldr	r2, [r4, #4]
 800c610:	2100      	movs	r1, #0
 800c612:	4628      	mov	r0, r5
 800c614:	f7f3 fdec 	bl	80001f0 <memchr>
 800c618:	b108      	cbz	r0, 800c61e <_printf_i+0x1ea>
 800c61a:	1b40      	subs	r0, r0, r5
 800c61c:	6060      	str	r0, [r4, #4]
 800c61e:	6863      	ldr	r3, [r4, #4]
 800c620:	6123      	str	r3, [r4, #16]
 800c622:	2300      	movs	r3, #0
 800c624:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c628:	e7aa      	b.n	800c580 <_printf_i+0x14c>
 800c62a:	6923      	ldr	r3, [r4, #16]
 800c62c:	462a      	mov	r2, r5
 800c62e:	4649      	mov	r1, r9
 800c630:	4640      	mov	r0, r8
 800c632:	47d0      	blx	sl
 800c634:	3001      	adds	r0, #1
 800c636:	d0ad      	beq.n	800c594 <_printf_i+0x160>
 800c638:	6823      	ldr	r3, [r4, #0]
 800c63a:	079b      	lsls	r3, r3, #30
 800c63c:	d413      	bmi.n	800c666 <_printf_i+0x232>
 800c63e:	68e0      	ldr	r0, [r4, #12]
 800c640:	9b03      	ldr	r3, [sp, #12]
 800c642:	4298      	cmp	r0, r3
 800c644:	bfb8      	it	lt
 800c646:	4618      	movlt	r0, r3
 800c648:	e7a6      	b.n	800c598 <_printf_i+0x164>
 800c64a:	2301      	movs	r3, #1
 800c64c:	4632      	mov	r2, r6
 800c64e:	4649      	mov	r1, r9
 800c650:	4640      	mov	r0, r8
 800c652:	47d0      	blx	sl
 800c654:	3001      	adds	r0, #1
 800c656:	d09d      	beq.n	800c594 <_printf_i+0x160>
 800c658:	3501      	adds	r5, #1
 800c65a:	68e3      	ldr	r3, [r4, #12]
 800c65c:	9903      	ldr	r1, [sp, #12]
 800c65e:	1a5b      	subs	r3, r3, r1
 800c660:	42ab      	cmp	r3, r5
 800c662:	dcf2      	bgt.n	800c64a <_printf_i+0x216>
 800c664:	e7eb      	b.n	800c63e <_printf_i+0x20a>
 800c666:	2500      	movs	r5, #0
 800c668:	f104 0619 	add.w	r6, r4, #25
 800c66c:	e7f5      	b.n	800c65a <_printf_i+0x226>
 800c66e:	bf00      	nop
 800c670:	0800da49 	.word	0x0800da49
 800c674:	0800da5a 	.word	0x0800da5a

0800c678 <__sflush_r>:
 800c678:	898a      	ldrh	r2, [r1, #12]
 800c67a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c67e:	4605      	mov	r5, r0
 800c680:	0710      	lsls	r0, r2, #28
 800c682:	460c      	mov	r4, r1
 800c684:	d458      	bmi.n	800c738 <__sflush_r+0xc0>
 800c686:	684b      	ldr	r3, [r1, #4]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	dc05      	bgt.n	800c698 <__sflush_r+0x20>
 800c68c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c68e:	2b00      	cmp	r3, #0
 800c690:	dc02      	bgt.n	800c698 <__sflush_r+0x20>
 800c692:	2000      	movs	r0, #0
 800c694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c698:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c69a:	2e00      	cmp	r6, #0
 800c69c:	d0f9      	beq.n	800c692 <__sflush_r+0x1a>
 800c69e:	2300      	movs	r3, #0
 800c6a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c6a4:	682f      	ldr	r7, [r5, #0]
 800c6a6:	6a21      	ldr	r1, [r4, #32]
 800c6a8:	602b      	str	r3, [r5, #0]
 800c6aa:	d032      	beq.n	800c712 <__sflush_r+0x9a>
 800c6ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c6ae:	89a3      	ldrh	r3, [r4, #12]
 800c6b0:	075a      	lsls	r2, r3, #29
 800c6b2:	d505      	bpl.n	800c6c0 <__sflush_r+0x48>
 800c6b4:	6863      	ldr	r3, [r4, #4]
 800c6b6:	1ac0      	subs	r0, r0, r3
 800c6b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c6ba:	b10b      	cbz	r3, 800c6c0 <__sflush_r+0x48>
 800c6bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c6be:	1ac0      	subs	r0, r0, r3
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	4602      	mov	r2, r0
 800c6c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c6c6:	6a21      	ldr	r1, [r4, #32]
 800c6c8:	4628      	mov	r0, r5
 800c6ca:	47b0      	blx	r6
 800c6cc:	1c43      	adds	r3, r0, #1
 800c6ce:	89a3      	ldrh	r3, [r4, #12]
 800c6d0:	d106      	bne.n	800c6e0 <__sflush_r+0x68>
 800c6d2:	6829      	ldr	r1, [r5, #0]
 800c6d4:	291d      	cmp	r1, #29
 800c6d6:	d82b      	bhi.n	800c730 <__sflush_r+0xb8>
 800c6d8:	4a29      	ldr	r2, [pc, #164]	; (800c780 <__sflush_r+0x108>)
 800c6da:	410a      	asrs	r2, r1
 800c6dc:	07d6      	lsls	r6, r2, #31
 800c6de:	d427      	bmi.n	800c730 <__sflush_r+0xb8>
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	6062      	str	r2, [r4, #4]
 800c6e4:	04d9      	lsls	r1, r3, #19
 800c6e6:	6922      	ldr	r2, [r4, #16]
 800c6e8:	6022      	str	r2, [r4, #0]
 800c6ea:	d504      	bpl.n	800c6f6 <__sflush_r+0x7e>
 800c6ec:	1c42      	adds	r2, r0, #1
 800c6ee:	d101      	bne.n	800c6f4 <__sflush_r+0x7c>
 800c6f0:	682b      	ldr	r3, [r5, #0]
 800c6f2:	b903      	cbnz	r3, 800c6f6 <__sflush_r+0x7e>
 800c6f4:	6560      	str	r0, [r4, #84]	; 0x54
 800c6f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c6f8:	602f      	str	r7, [r5, #0]
 800c6fa:	2900      	cmp	r1, #0
 800c6fc:	d0c9      	beq.n	800c692 <__sflush_r+0x1a>
 800c6fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c702:	4299      	cmp	r1, r3
 800c704:	d002      	beq.n	800c70c <__sflush_r+0x94>
 800c706:	4628      	mov	r0, r5
 800c708:	f7ff fa92 	bl	800bc30 <_free_r>
 800c70c:	2000      	movs	r0, #0
 800c70e:	6360      	str	r0, [r4, #52]	; 0x34
 800c710:	e7c0      	b.n	800c694 <__sflush_r+0x1c>
 800c712:	2301      	movs	r3, #1
 800c714:	4628      	mov	r0, r5
 800c716:	47b0      	blx	r6
 800c718:	1c41      	adds	r1, r0, #1
 800c71a:	d1c8      	bne.n	800c6ae <__sflush_r+0x36>
 800c71c:	682b      	ldr	r3, [r5, #0]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d0c5      	beq.n	800c6ae <__sflush_r+0x36>
 800c722:	2b1d      	cmp	r3, #29
 800c724:	d001      	beq.n	800c72a <__sflush_r+0xb2>
 800c726:	2b16      	cmp	r3, #22
 800c728:	d101      	bne.n	800c72e <__sflush_r+0xb6>
 800c72a:	602f      	str	r7, [r5, #0]
 800c72c:	e7b1      	b.n	800c692 <__sflush_r+0x1a>
 800c72e:	89a3      	ldrh	r3, [r4, #12]
 800c730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c734:	81a3      	strh	r3, [r4, #12]
 800c736:	e7ad      	b.n	800c694 <__sflush_r+0x1c>
 800c738:	690f      	ldr	r7, [r1, #16]
 800c73a:	2f00      	cmp	r7, #0
 800c73c:	d0a9      	beq.n	800c692 <__sflush_r+0x1a>
 800c73e:	0793      	lsls	r3, r2, #30
 800c740:	680e      	ldr	r6, [r1, #0]
 800c742:	bf08      	it	eq
 800c744:	694b      	ldreq	r3, [r1, #20]
 800c746:	600f      	str	r7, [r1, #0]
 800c748:	bf18      	it	ne
 800c74a:	2300      	movne	r3, #0
 800c74c:	eba6 0807 	sub.w	r8, r6, r7
 800c750:	608b      	str	r3, [r1, #8]
 800c752:	f1b8 0f00 	cmp.w	r8, #0
 800c756:	dd9c      	ble.n	800c692 <__sflush_r+0x1a>
 800c758:	6a21      	ldr	r1, [r4, #32]
 800c75a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c75c:	4643      	mov	r3, r8
 800c75e:	463a      	mov	r2, r7
 800c760:	4628      	mov	r0, r5
 800c762:	47b0      	blx	r6
 800c764:	2800      	cmp	r0, #0
 800c766:	dc06      	bgt.n	800c776 <__sflush_r+0xfe>
 800c768:	89a3      	ldrh	r3, [r4, #12]
 800c76a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c76e:	81a3      	strh	r3, [r4, #12]
 800c770:	f04f 30ff 	mov.w	r0, #4294967295
 800c774:	e78e      	b.n	800c694 <__sflush_r+0x1c>
 800c776:	4407      	add	r7, r0
 800c778:	eba8 0800 	sub.w	r8, r8, r0
 800c77c:	e7e9      	b.n	800c752 <__sflush_r+0xda>
 800c77e:	bf00      	nop
 800c780:	dfbffffe 	.word	0xdfbffffe

0800c784 <_fflush_r>:
 800c784:	b538      	push	{r3, r4, r5, lr}
 800c786:	690b      	ldr	r3, [r1, #16]
 800c788:	4605      	mov	r5, r0
 800c78a:	460c      	mov	r4, r1
 800c78c:	b913      	cbnz	r3, 800c794 <_fflush_r+0x10>
 800c78e:	2500      	movs	r5, #0
 800c790:	4628      	mov	r0, r5
 800c792:	bd38      	pop	{r3, r4, r5, pc}
 800c794:	b118      	cbz	r0, 800c79e <_fflush_r+0x1a>
 800c796:	6a03      	ldr	r3, [r0, #32]
 800c798:	b90b      	cbnz	r3, 800c79e <_fflush_r+0x1a>
 800c79a:	f7ff f823 	bl	800b7e4 <__sinit>
 800c79e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d0f3      	beq.n	800c78e <_fflush_r+0xa>
 800c7a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c7a8:	07d0      	lsls	r0, r2, #31
 800c7aa:	d404      	bmi.n	800c7b6 <_fflush_r+0x32>
 800c7ac:	0599      	lsls	r1, r3, #22
 800c7ae:	d402      	bmi.n	800c7b6 <_fflush_r+0x32>
 800c7b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c7b2:	f7ff fa2c 	bl	800bc0e <__retarget_lock_acquire_recursive>
 800c7b6:	4628      	mov	r0, r5
 800c7b8:	4621      	mov	r1, r4
 800c7ba:	f7ff ff5d 	bl	800c678 <__sflush_r>
 800c7be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c7c0:	07da      	lsls	r2, r3, #31
 800c7c2:	4605      	mov	r5, r0
 800c7c4:	d4e4      	bmi.n	800c790 <_fflush_r+0xc>
 800c7c6:	89a3      	ldrh	r3, [r4, #12]
 800c7c8:	059b      	lsls	r3, r3, #22
 800c7ca:	d4e1      	bmi.n	800c790 <_fflush_r+0xc>
 800c7cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c7ce:	f7ff fa1f 	bl	800bc10 <__retarget_lock_release_recursive>
 800c7d2:	e7dd      	b.n	800c790 <_fflush_r+0xc>

0800c7d4 <__swhatbuf_r>:
 800c7d4:	b570      	push	{r4, r5, r6, lr}
 800c7d6:	460c      	mov	r4, r1
 800c7d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7dc:	2900      	cmp	r1, #0
 800c7de:	b096      	sub	sp, #88	; 0x58
 800c7e0:	4615      	mov	r5, r2
 800c7e2:	461e      	mov	r6, r3
 800c7e4:	da0d      	bge.n	800c802 <__swhatbuf_r+0x2e>
 800c7e6:	89a3      	ldrh	r3, [r4, #12]
 800c7e8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c7ec:	f04f 0100 	mov.w	r1, #0
 800c7f0:	bf0c      	ite	eq
 800c7f2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c7f6:	2340      	movne	r3, #64	; 0x40
 800c7f8:	2000      	movs	r0, #0
 800c7fa:	6031      	str	r1, [r6, #0]
 800c7fc:	602b      	str	r3, [r5, #0]
 800c7fe:	b016      	add	sp, #88	; 0x58
 800c800:	bd70      	pop	{r4, r5, r6, pc}
 800c802:	466a      	mov	r2, sp
 800c804:	f000 f862 	bl	800c8cc <_fstat_r>
 800c808:	2800      	cmp	r0, #0
 800c80a:	dbec      	blt.n	800c7e6 <__swhatbuf_r+0x12>
 800c80c:	9901      	ldr	r1, [sp, #4]
 800c80e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c812:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c816:	4259      	negs	r1, r3
 800c818:	4159      	adcs	r1, r3
 800c81a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c81e:	e7eb      	b.n	800c7f8 <__swhatbuf_r+0x24>

0800c820 <__smakebuf_r>:
 800c820:	898b      	ldrh	r3, [r1, #12]
 800c822:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c824:	079d      	lsls	r5, r3, #30
 800c826:	4606      	mov	r6, r0
 800c828:	460c      	mov	r4, r1
 800c82a:	d507      	bpl.n	800c83c <__smakebuf_r+0x1c>
 800c82c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c830:	6023      	str	r3, [r4, #0]
 800c832:	6123      	str	r3, [r4, #16]
 800c834:	2301      	movs	r3, #1
 800c836:	6163      	str	r3, [r4, #20]
 800c838:	b002      	add	sp, #8
 800c83a:	bd70      	pop	{r4, r5, r6, pc}
 800c83c:	ab01      	add	r3, sp, #4
 800c83e:	466a      	mov	r2, sp
 800c840:	f7ff ffc8 	bl	800c7d4 <__swhatbuf_r>
 800c844:	9900      	ldr	r1, [sp, #0]
 800c846:	4605      	mov	r5, r0
 800c848:	4630      	mov	r0, r6
 800c84a:	f7ff fa5d 	bl	800bd08 <_malloc_r>
 800c84e:	b948      	cbnz	r0, 800c864 <__smakebuf_r+0x44>
 800c850:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c854:	059a      	lsls	r2, r3, #22
 800c856:	d4ef      	bmi.n	800c838 <__smakebuf_r+0x18>
 800c858:	f023 0303 	bic.w	r3, r3, #3
 800c85c:	f043 0302 	orr.w	r3, r3, #2
 800c860:	81a3      	strh	r3, [r4, #12]
 800c862:	e7e3      	b.n	800c82c <__smakebuf_r+0xc>
 800c864:	89a3      	ldrh	r3, [r4, #12]
 800c866:	6020      	str	r0, [r4, #0]
 800c868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c86c:	81a3      	strh	r3, [r4, #12]
 800c86e:	9b00      	ldr	r3, [sp, #0]
 800c870:	6163      	str	r3, [r4, #20]
 800c872:	9b01      	ldr	r3, [sp, #4]
 800c874:	6120      	str	r0, [r4, #16]
 800c876:	b15b      	cbz	r3, 800c890 <__smakebuf_r+0x70>
 800c878:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c87c:	4630      	mov	r0, r6
 800c87e:	f000 f837 	bl	800c8f0 <_isatty_r>
 800c882:	b128      	cbz	r0, 800c890 <__smakebuf_r+0x70>
 800c884:	89a3      	ldrh	r3, [r4, #12]
 800c886:	f023 0303 	bic.w	r3, r3, #3
 800c88a:	f043 0301 	orr.w	r3, r3, #1
 800c88e:	81a3      	strh	r3, [r4, #12]
 800c890:	89a3      	ldrh	r3, [r4, #12]
 800c892:	431d      	orrs	r5, r3
 800c894:	81a5      	strh	r5, [r4, #12]
 800c896:	e7cf      	b.n	800c838 <__smakebuf_r+0x18>

0800c898 <memmove>:
 800c898:	4288      	cmp	r0, r1
 800c89a:	b510      	push	{r4, lr}
 800c89c:	eb01 0402 	add.w	r4, r1, r2
 800c8a0:	d902      	bls.n	800c8a8 <memmove+0x10>
 800c8a2:	4284      	cmp	r4, r0
 800c8a4:	4623      	mov	r3, r4
 800c8a6:	d807      	bhi.n	800c8b8 <memmove+0x20>
 800c8a8:	1e43      	subs	r3, r0, #1
 800c8aa:	42a1      	cmp	r1, r4
 800c8ac:	d008      	beq.n	800c8c0 <memmove+0x28>
 800c8ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c8b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c8b6:	e7f8      	b.n	800c8aa <memmove+0x12>
 800c8b8:	4402      	add	r2, r0
 800c8ba:	4601      	mov	r1, r0
 800c8bc:	428a      	cmp	r2, r1
 800c8be:	d100      	bne.n	800c8c2 <memmove+0x2a>
 800c8c0:	bd10      	pop	{r4, pc}
 800c8c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c8c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c8ca:	e7f7      	b.n	800c8bc <memmove+0x24>

0800c8cc <_fstat_r>:
 800c8cc:	b538      	push	{r3, r4, r5, lr}
 800c8ce:	4d07      	ldr	r5, [pc, #28]	; (800c8ec <_fstat_r+0x20>)
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	4604      	mov	r4, r0
 800c8d4:	4608      	mov	r0, r1
 800c8d6:	4611      	mov	r1, r2
 800c8d8:	602b      	str	r3, [r5, #0]
 800c8da:	f7f7 f8a4 	bl	8003a26 <_fstat>
 800c8de:	1c43      	adds	r3, r0, #1
 800c8e0:	d102      	bne.n	800c8e8 <_fstat_r+0x1c>
 800c8e2:	682b      	ldr	r3, [r5, #0]
 800c8e4:	b103      	cbz	r3, 800c8e8 <_fstat_r+0x1c>
 800c8e6:	6023      	str	r3, [r4, #0]
 800c8e8:	bd38      	pop	{r3, r4, r5, pc}
 800c8ea:	bf00      	nop
 800c8ec:	200022c4 	.word	0x200022c4

0800c8f0 <_isatty_r>:
 800c8f0:	b538      	push	{r3, r4, r5, lr}
 800c8f2:	4d06      	ldr	r5, [pc, #24]	; (800c90c <_isatty_r+0x1c>)
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	4604      	mov	r4, r0
 800c8f8:	4608      	mov	r0, r1
 800c8fa:	602b      	str	r3, [r5, #0]
 800c8fc:	f7f7 f8a3 	bl	8003a46 <_isatty>
 800c900:	1c43      	adds	r3, r0, #1
 800c902:	d102      	bne.n	800c90a <_isatty_r+0x1a>
 800c904:	682b      	ldr	r3, [r5, #0]
 800c906:	b103      	cbz	r3, 800c90a <_isatty_r+0x1a>
 800c908:	6023      	str	r3, [r4, #0]
 800c90a:	bd38      	pop	{r3, r4, r5, pc}
 800c90c:	200022c4 	.word	0x200022c4

0800c910 <_sbrk_r>:
 800c910:	b538      	push	{r3, r4, r5, lr}
 800c912:	4d06      	ldr	r5, [pc, #24]	; (800c92c <_sbrk_r+0x1c>)
 800c914:	2300      	movs	r3, #0
 800c916:	4604      	mov	r4, r0
 800c918:	4608      	mov	r0, r1
 800c91a:	602b      	str	r3, [r5, #0]
 800c91c:	f7f7 f8ac 	bl	8003a78 <_sbrk>
 800c920:	1c43      	adds	r3, r0, #1
 800c922:	d102      	bne.n	800c92a <_sbrk_r+0x1a>
 800c924:	682b      	ldr	r3, [r5, #0]
 800c926:	b103      	cbz	r3, 800c92a <_sbrk_r+0x1a>
 800c928:	6023      	str	r3, [r4, #0]
 800c92a:	bd38      	pop	{r3, r4, r5, pc}
 800c92c:	200022c4 	.word	0x200022c4

0800c930 <_realloc_r>:
 800c930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c934:	4680      	mov	r8, r0
 800c936:	4614      	mov	r4, r2
 800c938:	460e      	mov	r6, r1
 800c93a:	b921      	cbnz	r1, 800c946 <_realloc_r+0x16>
 800c93c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c940:	4611      	mov	r1, r2
 800c942:	f7ff b9e1 	b.w	800bd08 <_malloc_r>
 800c946:	b92a      	cbnz	r2, 800c954 <_realloc_r+0x24>
 800c948:	f7ff f972 	bl	800bc30 <_free_r>
 800c94c:	4625      	mov	r5, r4
 800c94e:	4628      	mov	r0, r5
 800c950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c954:	f000 f81b 	bl	800c98e <_malloc_usable_size_r>
 800c958:	4284      	cmp	r4, r0
 800c95a:	4607      	mov	r7, r0
 800c95c:	d802      	bhi.n	800c964 <_realloc_r+0x34>
 800c95e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c962:	d812      	bhi.n	800c98a <_realloc_r+0x5a>
 800c964:	4621      	mov	r1, r4
 800c966:	4640      	mov	r0, r8
 800c968:	f7ff f9ce 	bl	800bd08 <_malloc_r>
 800c96c:	4605      	mov	r5, r0
 800c96e:	2800      	cmp	r0, #0
 800c970:	d0ed      	beq.n	800c94e <_realloc_r+0x1e>
 800c972:	42bc      	cmp	r4, r7
 800c974:	4622      	mov	r2, r4
 800c976:	4631      	mov	r1, r6
 800c978:	bf28      	it	cs
 800c97a:	463a      	movcs	r2, r7
 800c97c:	f7ff f949 	bl	800bc12 <memcpy>
 800c980:	4631      	mov	r1, r6
 800c982:	4640      	mov	r0, r8
 800c984:	f7ff f954 	bl	800bc30 <_free_r>
 800c988:	e7e1      	b.n	800c94e <_realloc_r+0x1e>
 800c98a:	4635      	mov	r5, r6
 800c98c:	e7df      	b.n	800c94e <_realloc_r+0x1e>

0800c98e <_malloc_usable_size_r>:
 800c98e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c992:	1f18      	subs	r0, r3, #4
 800c994:	2b00      	cmp	r3, #0
 800c996:	bfbc      	itt	lt
 800c998:	580b      	ldrlt	r3, [r1, r0]
 800c99a:	18c0      	addlt	r0, r0, r3
 800c99c:	4770      	bx	lr
	...

0800c9a0 <pow>:
 800c9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9a2:	ed2d 8b02 	vpush	{d8}
 800c9a6:	eeb0 8a40 	vmov.f32	s16, s0
 800c9aa:	eef0 8a60 	vmov.f32	s17, s1
 800c9ae:	ec55 4b11 	vmov	r4, r5, d1
 800c9b2:	f000 f871 	bl	800ca98 <__ieee754_pow>
 800c9b6:	4622      	mov	r2, r4
 800c9b8:	462b      	mov	r3, r5
 800c9ba:	4620      	mov	r0, r4
 800c9bc:	4629      	mov	r1, r5
 800c9be:	ec57 6b10 	vmov	r6, r7, d0
 800c9c2:	f7f4 f8bb 	bl	8000b3c <__aeabi_dcmpun>
 800c9c6:	2800      	cmp	r0, #0
 800c9c8:	d13b      	bne.n	800ca42 <pow+0xa2>
 800c9ca:	ec51 0b18 	vmov	r0, r1, d8
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	f7f4 f881 	bl	8000ad8 <__aeabi_dcmpeq>
 800c9d6:	b1b8      	cbz	r0, 800ca08 <pow+0x68>
 800c9d8:	2200      	movs	r2, #0
 800c9da:	2300      	movs	r3, #0
 800c9dc:	4620      	mov	r0, r4
 800c9de:	4629      	mov	r1, r5
 800c9e0:	f7f4 f87a 	bl	8000ad8 <__aeabi_dcmpeq>
 800c9e4:	2800      	cmp	r0, #0
 800c9e6:	d146      	bne.n	800ca76 <pow+0xd6>
 800c9e8:	ec45 4b10 	vmov	d0, r4, r5
 800c9ec:	f000 f848 	bl	800ca80 <finite>
 800c9f0:	b338      	cbz	r0, 800ca42 <pow+0xa2>
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	4620      	mov	r0, r4
 800c9f8:	4629      	mov	r1, r5
 800c9fa:	f7f4 f877 	bl	8000aec <__aeabi_dcmplt>
 800c9fe:	b300      	cbz	r0, 800ca42 <pow+0xa2>
 800ca00:	f7ff f8da 	bl	800bbb8 <__errno>
 800ca04:	2322      	movs	r3, #34	; 0x22
 800ca06:	e01b      	b.n	800ca40 <pow+0xa0>
 800ca08:	ec47 6b10 	vmov	d0, r6, r7
 800ca0c:	f000 f838 	bl	800ca80 <finite>
 800ca10:	b9e0      	cbnz	r0, 800ca4c <pow+0xac>
 800ca12:	eeb0 0a48 	vmov.f32	s0, s16
 800ca16:	eef0 0a68 	vmov.f32	s1, s17
 800ca1a:	f000 f831 	bl	800ca80 <finite>
 800ca1e:	b1a8      	cbz	r0, 800ca4c <pow+0xac>
 800ca20:	ec45 4b10 	vmov	d0, r4, r5
 800ca24:	f000 f82c 	bl	800ca80 <finite>
 800ca28:	b180      	cbz	r0, 800ca4c <pow+0xac>
 800ca2a:	4632      	mov	r2, r6
 800ca2c:	463b      	mov	r3, r7
 800ca2e:	4630      	mov	r0, r6
 800ca30:	4639      	mov	r1, r7
 800ca32:	f7f4 f883 	bl	8000b3c <__aeabi_dcmpun>
 800ca36:	2800      	cmp	r0, #0
 800ca38:	d0e2      	beq.n	800ca00 <pow+0x60>
 800ca3a:	f7ff f8bd 	bl	800bbb8 <__errno>
 800ca3e:	2321      	movs	r3, #33	; 0x21
 800ca40:	6003      	str	r3, [r0, #0]
 800ca42:	ecbd 8b02 	vpop	{d8}
 800ca46:	ec47 6b10 	vmov	d0, r6, r7
 800ca4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	2300      	movs	r3, #0
 800ca50:	4630      	mov	r0, r6
 800ca52:	4639      	mov	r1, r7
 800ca54:	f7f4 f840 	bl	8000ad8 <__aeabi_dcmpeq>
 800ca58:	2800      	cmp	r0, #0
 800ca5a:	d0f2      	beq.n	800ca42 <pow+0xa2>
 800ca5c:	eeb0 0a48 	vmov.f32	s0, s16
 800ca60:	eef0 0a68 	vmov.f32	s1, s17
 800ca64:	f000 f80c 	bl	800ca80 <finite>
 800ca68:	2800      	cmp	r0, #0
 800ca6a:	d0ea      	beq.n	800ca42 <pow+0xa2>
 800ca6c:	ec45 4b10 	vmov	d0, r4, r5
 800ca70:	f000 f806 	bl	800ca80 <finite>
 800ca74:	e7c3      	b.n	800c9fe <pow+0x5e>
 800ca76:	4f01      	ldr	r7, [pc, #4]	; (800ca7c <pow+0xdc>)
 800ca78:	2600      	movs	r6, #0
 800ca7a:	e7e2      	b.n	800ca42 <pow+0xa2>
 800ca7c:	3ff00000 	.word	0x3ff00000

0800ca80 <finite>:
 800ca80:	b082      	sub	sp, #8
 800ca82:	ed8d 0b00 	vstr	d0, [sp]
 800ca86:	9801      	ldr	r0, [sp, #4]
 800ca88:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ca8c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ca90:	0fc0      	lsrs	r0, r0, #31
 800ca92:	b002      	add	sp, #8
 800ca94:	4770      	bx	lr
	...

0800ca98 <__ieee754_pow>:
 800ca98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca9c:	ed2d 8b06 	vpush	{d8-d10}
 800caa0:	b089      	sub	sp, #36	; 0x24
 800caa2:	ed8d 1b00 	vstr	d1, [sp]
 800caa6:	e9dd 2900 	ldrd	r2, r9, [sp]
 800caaa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800caae:	ea58 0102 	orrs.w	r1, r8, r2
 800cab2:	ec57 6b10 	vmov	r6, r7, d0
 800cab6:	d115      	bne.n	800cae4 <__ieee754_pow+0x4c>
 800cab8:	19b3      	adds	r3, r6, r6
 800caba:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800cabe:	4152      	adcs	r2, r2
 800cac0:	4299      	cmp	r1, r3
 800cac2:	4b89      	ldr	r3, [pc, #548]	; (800cce8 <__ieee754_pow+0x250>)
 800cac4:	4193      	sbcs	r3, r2
 800cac6:	f080 84d1 	bcs.w	800d46c <__ieee754_pow+0x9d4>
 800caca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cace:	4630      	mov	r0, r6
 800cad0:	4639      	mov	r1, r7
 800cad2:	f7f3 fbe3 	bl	800029c <__adddf3>
 800cad6:	ec41 0b10 	vmov	d0, r0, r1
 800cada:	b009      	add	sp, #36	; 0x24
 800cadc:	ecbd 8b06 	vpop	{d8-d10}
 800cae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cae4:	4b81      	ldr	r3, [pc, #516]	; (800ccec <__ieee754_pow+0x254>)
 800cae6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800caea:	429c      	cmp	r4, r3
 800caec:	ee10 aa10 	vmov	sl, s0
 800caf0:	463d      	mov	r5, r7
 800caf2:	dc06      	bgt.n	800cb02 <__ieee754_pow+0x6a>
 800caf4:	d101      	bne.n	800cafa <__ieee754_pow+0x62>
 800caf6:	2e00      	cmp	r6, #0
 800caf8:	d1e7      	bne.n	800caca <__ieee754_pow+0x32>
 800cafa:	4598      	cmp	r8, r3
 800cafc:	dc01      	bgt.n	800cb02 <__ieee754_pow+0x6a>
 800cafe:	d10f      	bne.n	800cb20 <__ieee754_pow+0x88>
 800cb00:	b172      	cbz	r2, 800cb20 <__ieee754_pow+0x88>
 800cb02:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800cb06:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800cb0a:	ea55 050a 	orrs.w	r5, r5, sl
 800cb0e:	d1dc      	bne.n	800caca <__ieee754_pow+0x32>
 800cb10:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cb14:	18db      	adds	r3, r3, r3
 800cb16:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800cb1a:	4152      	adcs	r2, r2
 800cb1c:	429d      	cmp	r5, r3
 800cb1e:	e7d0      	b.n	800cac2 <__ieee754_pow+0x2a>
 800cb20:	2d00      	cmp	r5, #0
 800cb22:	da3b      	bge.n	800cb9c <__ieee754_pow+0x104>
 800cb24:	4b72      	ldr	r3, [pc, #456]	; (800ccf0 <__ieee754_pow+0x258>)
 800cb26:	4598      	cmp	r8, r3
 800cb28:	dc51      	bgt.n	800cbce <__ieee754_pow+0x136>
 800cb2a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800cb2e:	4598      	cmp	r8, r3
 800cb30:	f340 84ab 	ble.w	800d48a <__ieee754_pow+0x9f2>
 800cb34:	ea4f 5328 	mov.w	r3, r8, asr #20
 800cb38:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cb3c:	2b14      	cmp	r3, #20
 800cb3e:	dd0f      	ble.n	800cb60 <__ieee754_pow+0xc8>
 800cb40:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800cb44:	fa22 f103 	lsr.w	r1, r2, r3
 800cb48:	fa01 f303 	lsl.w	r3, r1, r3
 800cb4c:	4293      	cmp	r3, r2
 800cb4e:	f040 849c 	bne.w	800d48a <__ieee754_pow+0x9f2>
 800cb52:	f001 0101 	and.w	r1, r1, #1
 800cb56:	f1c1 0302 	rsb	r3, r1, #2
 800cb5a:	9304      	str	r3, [sp, #16]
 800cb5c:	b182      	cbz	r2, 800cb80 <__ieee754_pow+0xe8>
 800cb5e:	e05f      	b.n	800cc20 <__ieee754_pow+0x188>
 800cb60:	2a00      	cmp	r2, #0
 800cb62:	d15b      	bne.n	800cc1c <__ieee754_pow+0x184>
 800cb64:	f1c3 0314 	rsb	r3, r3, #20
 800cb68:	fa48 f103 	asr.w	r1, r8, r3
 800cb6c:	fa01 f303 	lsl.w	r3, r1, r3
 800cb70:	4543      	cmp	r3, r8
 800cb72:	f040 8487 	bne.w	800d484 <__ieee754_pow+0x9ec>
 800cb76:	f001 0101 	and.w	r1, r1, #1
 800cb7a:	f1c1 0302 	rsb	r3, r1, #2
 800cb7e:	9304      	str	r3, [sp, #16]
 800cb80:	4b5c      	ldr	r3, [pc, #368]	; (800ccf4 <__ieee754_pow+0x25c>)
 800cb82:	4598      	cmp	r8, r3
 800cb84:	d132      	bne.n	800cbec <__ieee754_pow+0x154>
 800cb86:	f1b9 0f00 	cmp.w	r9, #0
 800cb8a:	f280 8477 	bge.w	800d47c <__ieee754_pow+0x9e4>
 800cb8e:	4959      	ldr	r1, [pc, #356]	; (800ccf4 <__ieee754_pow+0x25c>)
 800cb90:	4632      	mov	r2, r6
 800cb92:	463b      	mov	r3, r7
 800cb94:	2000      	movs	r0, #0
 800cb96:	f7f3 fe61 	bl	800085c <__aeabi_ddiv>
 800cb9a:	e79c      	b.n	800cad6 <__ieee754_pow+0x3e>
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	9304      	str	r3, [sp, #16]
 800cba0:	2a00      	cmp	r2, #0
 800cba2:	d13d      	bne.n	800cc20 <__ieee754_pow+0x188>
 800cba4:	4b51      	ldr	r3, [pc, #324]	; (800ccec <__ieee754_pow+0x254>)
 800cba6:	4598      	cmp	r8, r3
 800cba8:	d1ea      	bne.n	800cb80 <__ieee754_pow+0xe8>
 800cbaa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800cbae:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800cbb2:	ea53 030a 	orrs.w	r3, r3, sl
 800cbb6:	f000 8459 	beq.w	800d46c <__ieee754_pow+0x9d4>
 800cbba:	4b4f      	ldr	r3, [pc, #316]	; (800ccf8 <__ieee754_pow+0x260>)
 800cbbc:	429c      	cmp	r4, r3
 800cbbe:	dd08      	ble.n	800cbd2 <__ieee754_pow+0x13a>
 800cbc0:	f1b9 0f00 	cmp.w	r9, #0
 800cbc4:	f2c0 8456 	blt.w	800d474 <__ieee754_pow+0x9dc>
 800cbc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cbcc:	e783      	b.n	800cad6 <__ieee754_pow+0x3e>
 800cbce:	2302      	movs	r3, #2
 800cbd0:	e7e5      	b.n	800cb9e <__ieee754_pow+0x106>
 800cbd2:	f1b9 0f00 	cmp.w	r9, #0
 800cbd6:	f04f 0000 	mov.w	r0, #0
 800cbda:	f04f 0100 	mov.w	r1, #0
 800cbde:	f6bf af7a 	bge.w	800cad6 <__ieee754_pow+0x3e>
 800cbe2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800cbe6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800cbea:	e774      	b.n	800cad6 <__ieee754_pow+0x3e>
 800cbec:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800cbf0:	d106      	bne.n	800cc00 <__ieee754_pow+0x168>
 800cbf2:	4632      	mov	r2, r6
 800cbf4:	463b      	mov	r3, r7
 800cbf6:	4630      	mov	r0, r6
 800cbf8:	4639      	mov	r1, r7
 800cbfa:	f7f3 fd05 	bl	8000608 <__aeabi_dmul>
 800cbfe:	e76a      	b.n	800cad6 <__ieee754_pow+0x3e>
 800cc00:	4b3e      	ldr	r3, [pc, #248]	; (800ccfc <__ieee754_pow+0x264>)
 800cc02:	4599      	cmp	r9, r3
 800cc04:	d10c      	bne.n	800cc20 <__ieee754_pow+0x188>
 800cc06:	2d00      	cmp	r5, #0
 800cc08:	db0a      	blt.n	800cc20 <__ieee754_pow+0x188>
 800cc0a:	ec47 6b10 	vmov	d0, r6, r7
 800cc0e:	b009      	add	sp, #36	; 0x24
 800cc10:	ecbd 8b06 	vpop	{d8-d10}
 800cc14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc18:	f000 bd20 	b.w	800d65c <__ieee754_sqrt>
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	9304      	str	r3, [sp, #16]
 800cc20:	ec47 6b10 	vmov	d0, r6, r7
 800cc24:	f000 fc62 	bl	800d4ec <fabs>
 800cc28:	ec51 0b10 	vmov	r0, r1, d0
 800cc2c:	f1ba 0f00 	cmp.w	sl, #0
 800cc30:	d129      	bne.n	800cc86 <__ieee754_pow+0x1ee>
 800cc32:	b124      	cbz	r4, 800cc3e <__ieee754_pow+0x1a6>
 800cc34:	4b2f      	ldr	r3, [pc, #188]	; (800ccf4 <__ieee754_pow+0x25c>)
 800cc36:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800cc3a:	429a      	cmp	r2, r3
 800cc3c:	d123      	bne.n	800cc86 <__ieee754_pow+0x1ee>
 800cc3e:	f1b9 0f00 	cmp.w	r9, #0
 800cc42:	da05      	bge.n	800cc50 <__ieee754_pow+0x1b8>
 800cc44:	4602      	mov	r2, r0
 800cc46:	460b      	mov	r3, r1
 800cc48:	2000      	movs	r0, #0
 800cc4a:	492a      	ldr	r1, [pc, #168]	; (800ccf4 <__ieee754_pow+0x25c>)
 800cc4c:	f7f3 fe06 	bl	800085c <__aeabi_ddiv>
 800cc50:	2d00      	cmp	r5, #0
 800cc52:	f6bf af40 	bge.w	800cad6 <__ieee754_pow+0x3e>
 800cc56:	9b04      	ldr	r3, [sp, #16]
 800cc58:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800cc5c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800cc60:	431c      	orrs	r4, r3
 800cc62:	d108      	bne.n	800cc76 <__ieee754_pow+0x1de>
 800cc64:	4602      	mov	r2, r0
 800cc66:	460b      	mov	r3, r1
 800cc68:	4610      	mov	r0, r2
 800cc6a:	4619      	mov	r1, r3
 800cc6c:	f7f3 fb14 	bl	8000298 <__aeabi_dsub>
 800cc70:	4602      	mov	r2, r0
 800cc72:	460b      	mov	r3, r1
 800cc74:	e78f      	b.n	800cb96 <__ieee754_pow+0xfe>
 800cc76:	9b04      	ldr	r3, [sp, #16]
 800cc78:	2b01      	cmp	r3, #1
 800cc7a:	f47f af2c 	bne.w	800cad6 <__ieee754_pow+0x3e>
 800cc7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cc82:	4619      	mov	r1, r3
 800cc84:	e727      	b.n	800cad6 <__ieee754_pow+0x3e>
 800cc86:	0feb      	lsrs	r3, r5, #31
 800cc88:	3b01      	subs	r3, #1
 800cc8a:	9306      	str	r3, [sp, #24]
 800cc8c:	9a06      	ldr	r2, [sp, #24]
 800cc8e:	9b04      	ldr	r3, [sp, #16]
 800cc90:	4313      	orrs	r3, r2
 800cc92:	d102      	bne.n	800cc9a <__ieee754_pow+0x202>
 800cc94:	4632      	mov	r2, r6
 800cc96:	463b      	mov	r3, r7
 800cc98:	e7e6      	b.n	800cc68 <__ieee754_pow+0x1d0>
 800cc9a:	4b19      	ldr	r3, [pc, #100]	; (800cd00 <__ieee754_pow+0x268>)
 800cc9c:	4598      	cmp	r8, r3
 800cc9e:	f340 80fb 	ble.w	800ce98 <__ieee754_pow+0x400>
 800cca2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800cca6:	4598      	cmp	r8, r3
 800cca8:	4b13      	ldr	r3, [pc, #76]	; (800ccf8 <__ieee754_pow+0x260>)
 800ccaa:	dd0c      	ble.n	800ccc6 <__ieee754_pow+0x22e>
 800ccac:	429c      	cmp	r4, r3
 800ccae:	dc0f      	bgt.n	800ccd0 <__ieee754_pow+0x238>
 800ccb0:	f1b9 0f00 	cmp.w	r9, #0
 800ccb4:	da0f      	bge.n	800ccd6 <__ieee754_pow+0x23e>
 800ccb6:	2000      	movs	r0, #0
 800ccb8:	b009      	add	sp, #36	; 0x24
 800ccba:	ecbd 8b06 	vpop	{d8-d10}
 800ccbe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccc2:	f000 bcc2 	b.w	800d64a <__math_oflow>
 800ccc6:	429c      	cmp	r4, r3
 800ccc8:	dbf2      	blt.n	800ccb0 <__ieee754_pow+0x218>
 800ccca:	4b0a      	ldr	r3, [pc, #40]	; (800ccf4 <__ieee754_pow+0x25c>)
 800cccc:	429c      	cmp	r4, r3
 800ccce:	dd19      	ble.n	800cd04 <__ieee754_pow+0x26c>
 800ccd0:	f1b9 0f00 	cmp.w	r9, #0
 800ccd4:	dcef      	bgt.n	800ccb6 <__ieee754_pow+0x21e>
 800ccd6:	2000      	movs	r0, #0
 800ccd8:	b009      	add	sp, #36	; 0x24
 800ccda:	ecbd 8b06 	vpop	{d8-d10}
 800ccde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cce2:	f000 bca9 	b.w	800d638 <__math_uflow>
 800cce6:	bf00      	nop
 800cce8:	fff00000 	.word	0xfff00000
 800ccec:	7ff00000 	.word	0x7ff00000
 800ccf0:	433fffff 	.word	0x433fffff
 800ccf4:	3ff00000 	.word	0x3ff00000
 800ccf8:	3fefffff 	.word	0x3fefffff
 800ccfc:	3fe00000 	.word	0x3fe00000
 800cd00:	41e00000 	.word	0x41e00000
 800cd04:	4b60      	ldr	r3, [pc, #384]	; (800ce88 <__ieee754_pow+0x3f0>)
 800cd06:	2200      	movs	r2, #0
 800cd08:	f7f3 fac6 	bl	8000298 <__aeabi_dsub>
 800cd0c:	a354      	add	r3, pc, #336	; (adr r3, 800ce60 <__ieee754_pow+0x3c8>)
 800cd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd12:	4604      	mov	r4, r0
 800cd14:	460d      	mov	r5, r1
 800cd16:	f7f3 fc77 	bl	8000608 <__aeabi_dmul>
 800cd1a:	a353      	add	r3, pc, #332	; (adr r3, 800ce68 <__ieee754_pow+0x3d0>)
 800cd1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd20:	4606      	mov	r6, r0
 800cd22:	460f      	mov	r7, r1
 800cd24:	4620      	mov	r0, r4
 800cd26:	4629      	mov	r1, r5
 800cd28:	f7f3 fc6e 	bl	8000608 <__aeabi_dmul>
 800cd2c:	4b57      	ldr	r3, [pc, #348]	; (800ce8c <__ieee754_pow+0x3f4>)
 800cd2e:	4682      	mov	sl, r0
 800cd30:	468b      	mov	fp, r1
 800cd32:	2200      	movs	r2, #0
 800cd34:	4620      	mov	r0, r4
 800cd36:	4629      	mov	r1, r5
 800cd38:	f7f3 fc66 	bl	8000608 <__aeabi_dmul>
 800cd3c:	4602      	mov	r2, r0
 800cd3e:	460b      	mov	r3, r1
 800cd40:	a14b      	add	r1, pc, #300	; (adr r1, 800ce70 <__ieee754_pow+0x3d8>)
 800cd42:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd46:	f7f3 faa7 	bl	8000298 <__aeabi_dsub>
 800cd4a:	4622      	mov	r2, r4
 800cd4c:	462b      	mov	r3, r5
 800cd4e:	f7f3 fc5b 	bl	8000608 <__aeabi_dmul>
 800cd52:	4602      	mov	r2, r0
 800cd54:	460b      	mov	r3, r1
 800cd56:	2000      	movs	r0, #0
 800cd58:	494d      	ldr	r1, [pc, #308]	; (800ce90 <__ieee754_pow+0x3f8>)
 800cd5a:	f7f3 fa9d 	bl	8000298 <__aeabi_dsub>
 800cd5e:	4622      	mov	r2, r4
 800cd60:	4680      	mov	r8, r0
 800cd62:	4689      	mov	r9, r1
 800cd64:	462b      	mov	r3, r5
 800cd66:	4620      	mov	r0, r4
 800cd68:	4629      	mov	r1, r5
 800cd6a:	f7f3 fc4d 	bl	8000608 <__aeabi_dmul>
 800cd6e:	4602      	mov	r2, r0
 800cd70:	460b      	mov	r3, r1
 800cd72:	4640      	mov	r0, r8
 800cd74:	4649      	mov	r1, r9
 800cd76:	f7f3 fc47 	bl	8000608 <__aeabi_dmul>
 800cd7a:	a33f      	add	r3, pc, #252	; (adr r3, 800ce78 <__ieee754_pow+0x3e0>)
 800cd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd80:	f7f3 fc42 	bl	8000608 <__aeabi_dmul>
 800cd84:	4602      	mov	r2, r0
 800cd86:	460b      	mov	r3, r1
 800cd88:	4650      	mov	r0, sl
 800cd8a:	4659      	mov	r1, fp
 800cd8c:	f7f3 fa84 	bl	8000298 <__aeabi_dsub>
 800cd90:	4602      	mov	r2, r0
 800cd92:	460b      	mov	r3, r1
 800cd94:	4680      	mov	r8, r0
 800cd96:	4689      	mov	r9, r1
 800cd98:	4630      	mov	r0, r6
 800cd9a:	4639      	mov	r1, r7
 800cd9c:	f7f3 fa7e 	bl	800029c <__adddf3>
 800cda0:	2000      	movs	r0, #0
 800cda2:	4632      	mov	r2, r6
 800cda4:	463b      	mov	r3, r7
 800cda6:	4604      	mov	r4, r0
 800cda8:	460d      	mov	r5, r1
 800cdaa:	f7f3 fa75 	bl	8000298 <__aeabi_dsub>
 800cdae:	4602      	mov	r2, r0
 800cdb0:	460b      	mov	r3, r1
 800cdb2:	4640      	mov	r0, r8
 800cdb4:	4649      	mov	r1, r9
 800cdb6:	f7f3 fa6f 	bl	8000298 <__aeabi_dsub>
 800cdba:	9b04      	ldr	r3, [sp, #16]
 800cdbc:	9a06      	ldr	r2, [sp, #24]
 800cdbe:	3b01      	subs	r3, #1
 800cdc0:	4313      	orrs	r3, r2
 800cdc2:	4682      	mov	sl, r0
 800cdc4:	468b      	mov	fp, r1
 800cdc6:	f040 81e7 	bne.w	800d198 <__ieee754_pow+0x700>
 800cdca:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800ce80 <__ieee754_pow+0x3e8>
 800cdce:	eeb0 8a47 	vmov.f32	s16, s14
 800cdd2:	eef0 8a67 	vmov.f32	s17, s15
 800cdd6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cdda:	2600      	movs	r6, #0
 800cddc:	4632      	mov	r2, r6
 800cdde:	463b      	mov	r3, r7
 800cde0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cde4:	f7f3 fa58 	bl	8000298 <__aeabi_dsub>
 800cde8:	4622      	mov	r2, r4
 800cdea:	462b      	mov	r3, r5
 800cdec:	f7f3 fc0c 	bl	8000608 <__aeabi_dmul>
 800cdf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cdf4:	4680      	mov	r8, r0
 800cdf6:	4689      	mov	r9, r1
 800cdf8:	4650      	mov	r0, sl
 800cdfa:	4659      	mov	r1, fp
 800cdfc:	f7f3 fc04 	bl	8000608 <__aeabi_dmul>
 800ce00:	4602      	mov	r2, r0
 800ce02:	460b      	mov	r3, r1
 800ce04:	4640      	mov	r0, r8
 800ce06:	4649      	mov	r1, r9
 800ce08:	f7f3 fa48 	bl	800029c <__adddf3>
 800ce0c:	4632      	mov	r2, r6
 800ce0e:	463b      	mov	r3, r7
 800ce10:	4680      	mov	r8, r0
 800ce12:	4689      	mov	r9, r1
 800ce14:	4620      	mov	r0, r4
 800ce16:	4629      	mov	r1, r5
 800ce18:	f7f3 fbf6 	bl	8000608 <__aeabi_dmul>
 800ce1c:	460b      	mov	r3, r1
 800ce1e:	4604      	mov	r4, r0
 800ce20:	460d      	mov	r5, r1
 800ce22:	4602      	mov	r2, r0
 800ce24:	4649      	mov	r1, r9
 800ce26:	4640      	mov	r0, r8
 800ce28:	f7f3 fa38 	bl	800029c <__adddf3>
 800ce2c:	4b19      	ldr	r3, [pc, #100]	; (800ce94 <__ieee754_pow+0x3fc>)
 800ce2e:	4299      	cmp	r1, r3
 800ce30:	ec45 4b19 	vmov	d9, r4, r5
 800ce34:	4606      	mov	r6, r0
 800ce36:	460f      	mov	r7, r1
 800ce38:	468b      	mov	fp, r1
 800ce3a:	f340 82f0 	ble.w	800d41e <__ieee754_pow+0x986>
 800ce3e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ce42:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ce46:	4303      	orrs	r3, r0
 800ce48:	f000 81e4 	beq.w	800d214 <__ieee754_pow+0x77c>
 800ce4c:	ec51 0b18 	vmov	r0, r1, d8
 800ce50:	2200      	movs	r2, #0
 800ce52:	2300      	movs	r3, #0
 800ce54:	f7f3 fe4a 	bl	8000aec <__aeabi_dcmplt>
 800ce58:	3800      	subs	r0, #0
 800ce5a:	bf18      	it	ne
 800ce5c:	2001      	movne	r0, #1
 800ce5e:	e72b      	b.n	800ccb8 <__ieee754_pow+0x220>
 800ce60:	60000000 	.word	0x60000000
 800ce64:	3ff71547 	.word	0x3ff71547
 800ce68:	f85ddf44 	.word	0xf85ddf44
 800ce6c:	3e54ae0b 	.word	0x3e54ae0b
 800ce70:	55555555 	.word	0x55555555
 800ce74:	3fd55555 	.word	0x3fd55555
 800ce78:	652b82fe 	.word	0x652b82fe
 800ce7c:	3ff71547 	.word	0x3ff71547
 800ce80:	00000000 	.word	0x00000000
 800ce84:	bff00000 	.word	0xbff00000
 800ce88:	3ff00000 	.word	0x3ff00000
 800ce8c:	3fd00000 	.word	0x3fd00000
 800ce90:	3fe00000 	.word	0x3fe00000
 800ce94:	408fffff 	.word	0x408fffff
 800ce98:	4bd5      	ldr	r3, [pc, #852]	; (800d1f0 <__ieee754_pow+0x758>)
 800ce9a:	402b      	ands	r3, r5
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	b92b      	cbnz	r3, 800ceac <__ieee754_pow+0x414>
 800cea0:	4bd4      	ldr	r3, [pc, #848]	; (800d1f4 <__ieee754_pow+0x75c>)
 800cea2:	f7f3 fbb1 	bl	8000608 <__aeabi_dmul>
 800cea6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ceaa:	460c      	mov	r4, r1
 800ceac:	1523      	asrs	r3, r4, #20
 800ceae:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ceb2:	4413      	add	r3, r2
 800ceb4:	9305      	str	r3, [sp, #20]
 800ceb6:	4bd0      	ldr	r3, [pc, #832]	; (800d1f8 <__ieee754_pow+0x760>)
 800ceb8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800cebc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800cec0:	429c      	cmp	r4, r3
 800cec2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800cec6:	dd08      	ble.n	800ceda <__ieee754_pow+0x442>
 800cec8:	4bcc      	ldr	r3, [pc, #816]	; (800d1fc <__ieee754_pow+0x764>)
 800ceca:	429c      	cmp	r4, r3
 800cecc:	f340 8162 	ble.w	800d194 <__ieee754_pow+0x6fc>
 800ced0:	9b05      	ldr	r3, [sp, #20]
 800ced2:	3301      	adds	r3, #1
 800ced4:	9305      	str	r3, [sp, #20]
 800ced6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ceda:	2400      	movs	r4, #0
 800cedc:	00e3      	lsls	r3, r4, #3
 800cede:	9307      	str	r3, [sp, #28]
 800cee0:	4bc7      	ldr	r3, [pc, #796]	; (800d200 <__ieee754_pow+0x768>)
 800cee2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cee6:	ed93 7b00 	vldr	d7, [r3]
 800ceea:	4629      	mov	r1, r5
 800ceec:	ec53 2b17 	vmov	r2, r3, d7
 800cef0:	eeb0 9a47 	vmov.f32	s18, s14
 800cef4:	eef0 9a67 	vmov.f32	s19, s15
 800cef8:	4682      	mov	sl, r0
 800cefa:	f7f3 f9cd 	bl	8000298 <__aeabi_dsub>
 800cefe:	4652      	mov	r2, sl
 800cf00:	4606      	mov	r6, r0
 800cf02:	460f      	mov	r7, r1
 800cf04:	462b      	mov	r3, r5
 800cf06:	ec51 0b19 	vmov	r0, r1, d9
 800cf0a:	f7f3 f9c7 	bl	800029c <__adddf3>
 800cf0e:	4602      	mov	r2, r0
 800cf10:	460b      	mov	r3, r1
 800cf12:	2000      	movs	r0, #0
 800cf14:	49bb      	ldr	r1, [pc, #748]	; (800d204 <__ieee754_pow+0x76c>)
 800cf16:	f7f3 fca1 	bl	800085c <__aeabi_ddiv>
 800cf1a:	ec41 0b1a 	vmov	d10, r0, r1
 800cf1e:	4602      	mov	r2, r0
 800cf20:	460b      	mov	r3, r1
 800cf22:	4630      	mov	r0, r6
 800cf24:	4639      	mov	r1, r7
 800cf26:	f7f3 fb6f 	bl	8000608 <__aeabi_dmul>
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf30:	9302      	str	r3, [sp, #8]
 800cf32:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800cf36:	46ab      	mov	fp, r5
 800cf38:	106d      	asrs	r5, r5, #1
 800cf3a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800cf3e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800cf42:	ec41 0b18 	vmov	d8, r0, r1
 800cf46:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	4640      	mov	r0, r8
 800cf4e:	4649      	mov	r1, r9
 800cf50:	4614      	mov	r4, r2
 800cf52:	461d      	mov	r5, r3
 800cf54:	f7f3 fb58 	bl	8000608 <__aeabi_dmul>
 800cf58:	4602      	mov	r2, r0
 800cf5a:	460b      	mov	r3, r1
 800cf5c:	4630      	mov	r0, r6
 800cf5e:	4639      	mov	r1, r7
 800cf60:	f7f3 f99a 	bl	8000298 <__aeabi_dsub>
 800cf64:	ec53 2b19 	vmov	r2, r3, d9
 800cf68:	4606      	mov	r6, r0
 800cf6a:	460f      	mov	r7, r1
 800cf6c:	4620      	mov	r0, r4
 800cf6e:	4629      	mov	r1, r5
 800cf70:	f7f3 f992 	bl	8000298 <__aeabi_dsub>
 800cf74:	4602      	mov	r2, r0
 800cf76:	460b      	mov	r3, r1
 800cf78:	4650      	mov	r0, sl
 800cf7a:	4659      	mov	r1, fp
 800cf7c:	f7f3 f98c 	bl	8000298 <__aeabi_dsub>
 800cf80:	4642      	mov	r2, r8
 800cf82:	464b      	mov	r3, r9
 800cf84:	f7f3 fb40 	bl	8000608 <__aeabi_dmul>
 800cf88:	4602      	mov	r2, r0
 800cf8a:	460b      	mov	r3, r1
 800cf8c:	4630      	mov	r0, r6
 800cf8e:	4639      	mov	r1, r7
 800cf90:	f7f3 f982 	bl	8000298 <__aeabi_dsub>
 800cf94:	ec53 2b1a 	vmov	r2, r3, d10
 800cf98:	f7f3 fb36 	bl	8000608 <__aeabi_dmul>
 800cf9c:	ec53 2b18 	vmov	r2, r3, d8
 800cfa0:	ec41 0b19 	vmov	d9, r0, r1
 800cfa4:	ec51 0b18 	vmov	r0, r1, d8
 800cfa8:	f7f3 fb2e 	bl	8000608 <__aeabi_dmul>
 800cfac:	a37c      	add	r3, pc, #496	; (adr r3, 800d1a0 <__ieee754_pow+0x708>)
 800cfae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfb2:	4604      	mov	r4, r0
 800cfb4:	460d      	mov	r5, r1
 800cfb6:	f7f3 fb27 	bl	8000608 <__aeabi_dmul>
 800cfba:	a37b      	add	r3, pc, #492	; (adr r3, 800d1a8 <__ieee754_pow+0x710>)
 800cfbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfc0:	f7f3 f96c 	bl	800029c <__adddf3>
 800cfc4:	4622      	mov	r2, r4
 800cfc6:	462b      	mov	r3, r5
 800cfc8:	f7f3 fb1e 	bl	8000608 <__aeabi_dmul>
 800cfcc:	a378      	add	r3, pc, #480	; (adr r3, 800d1b0 <__ieee754_pow+0x718>)
 800cfce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd2:	f7f3 f963 	bl	800029c <__adddf3>
 800cfd6:	4622      	mov	r2, r4
 800cfd8:	462b      	mov	r3, r5
 800cfda:	f7f3 fb15 	bl	8000608 <__aeabi_dmul>
 800cfde:	a376      	add	r3, pc, #472	; (adr r3, 800d1b8 <__ieee754_pow+0x720>)
 800cfe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfe4:	f7f3 f95a 	bl	800029c <__adddf3>
 800cfe8:	4622      	mov	r2, r4
 800cfea:	462b      	mov	r3, r5
 800cfec:	f7f3 fb0c 	bl	8000608 <__aeabi_dmul>
 800cff0:	a373      	add	r3, pc, #460	; (adr r3, 800d1c0 <__ieee754_pow+0x728>)
 800cff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cff6:	f7f3 f951 	bl	800029c <__adddf3>
 800cffa:	4622      	mov	r2, r4
 800cffc:	462b      	mov	r3, r5
 800cffe:	f7f3 fb03 	bl	8000608 <__aeabi_dmul>
 800d002:	a371      	add	r3, pc, #452	; (adr r3, 800d1c8 <__ieee754_pow+0x730>)
 800d004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d008:	f7f3 f948 	bl	800029c <__adddf3>
 800d00c:	4622      	mov	r2, r4
 800d00e:	4606      	mov	r6, r0
 800d010:	460f      	mov	r7, r1
 800d012:	462b      	mov	r3, r5
 800d014:	4620      	mov	r0, r4
 800d016:	4629      	mov	r1, r5
 800d018:	f7f3 faf6 	bl	8000608 <__aeabi_dmul>
 800d01c:	4602      	mov	r2, r0
 800d01e:	460b      	mov	r3, r1
 800d020:	4630      	mov	r0, r6
 800d022:	4639      	mov	r1, r7
 800d024:	f7f3 faf0 	bl	8000608 <__aeabi_dmul>
 800d028:	4642      	mov	r2, r8
 800d02a:	4604      	mov	r4, r0
 800d02c:	460d      	mov	r5, r1
 800d02e:	464b      	mov	r3, r9
 800d030:	ec51 0b18 	vmov	r0, r1, d8
 800d034:	f7f3 f932 	bl	800029c <__adddf3>
 800d038:	ec53 2b19 	vmov	r2, r3, d9
 800d03c:	f7f3 fae4 	bl	8000608 <__aeabi_dmul>
 800d040:	4622      	mov	r2, r4
 800d042:	462b      	mov	r3, r5
 800d044:	f7f3 f92a 	bl	800029c <__adddf3>
 800d048:	4642      	mov	r2, r8
 800d04a:	4682      	mov	sl, r0
 800d04c:	468b      	mov	fp, r1
 800d04e:	464b      	mov	r3, r9
 800d050:	4640      	mov	r0, r8
 800d052:	4649      	mov	r1, r9
 800d054:	f7f3 fad8 	bl	8000608 <__aeabi_dmul>
 800d058:	4b6b      	ldr	r3, [pc, #428]	; (800d208 <__ieee754_pow+0x770>)
 800d05a:	2200      	movs	r2, #0
 800d05c:	4606      	mov	r6, r0
 800d05e:	460f      	mov	r7, r1
 800d060:	f7f3 f91c 	bl	800029c <__adddf3>
 800d064:	4652      	mov	r2, sl
 800d066:	465b      	mov	r3, fp
 800d068:	f7f3 f918 	bl	800029c <__adddf3>
 800d06c:	2000      	movs	r0, #0
 800d06e:	4604      	mov	r4, r0
 800d070:	460d      	mov	r5, r1
 800d072:	4602      	mov	r2, r0
 800d074:	460b      	mov	r3, r1
 800d076:	4640      	mov	r0, r8
 800d078:	4649      	mov	r1, r9
 800d07a:	f7f3 fac5 	bl	8000608 <__aeabi_dmul>
 800d07e:	4b62      	ldr	r3, [pc, #392]	; (800d208 <__ieee754_pow+0x770>)
 800d080:	4680      	mov	r8, r0
 800d082:	4689      	mov	r9, r1
 800d084:	2200      	movs	r2, #0
 800d086:	4620      	mov	r0, r4
 800d088:	4629      	mov	r1, r5
 800d08a:	f7f3 f905 	bl	8000298 <__aeabi_dsub>
 800d08e:	4632      	mov	r2, r6
 800d090:	463b      	mov	r3, r7
 800d092:	f7f3 f901 	bl	8000298 <__aeabi_dsub>
 800d096:	4602      	mov	r2, r0
 800d098:	460b      	mov	r3, r1
 800d09a:	4650      	mov	r0, sl
 800d09c:	4659      	mov	r1, fp
 800d09e:	f7f3 f8fb 	bl	8000298 <__aeabi_dsub>
 800d0a2:	ec53 2b18 	vmov	r2, r3, d8
 800d0a6:	f7f3 faaf 	bl	8000608 <__aeabi_dmul>
 800d0aa:	4622      	mov	r2, r4
 800d0ac:	4606      	mov	r6, r0
 800d0ae:	460f      	mov	r7, r1
 800d0b0:	462b      	mov	r3, r5
 800d0b2:	ec51 0b19 	vmov	r0, r1, d9
 800d0b6:	f7f3 faa7 	bl	8000608 <__aeabi_dmul>
 800d0ba:	4602      	mov	r2, r0
 800d0bc:	460b      	mov	r3, r1
 800d0be:	4630      	mov	r0, r6
 800d0c0:	4639      	mov	r1, r7
 800d0c2:	f7f3 f8eb 	bl	800029c <__adddf3>
 800d0c6:	4606      	mov	r6, r0
 800d0c8:	460f      	mov	r7, r1
 800d0ca:	4602      	mov	r2, r0
 800d0cc:	460b      	mov	r3, r1
 800d0ce:	4640      	mov	r0, r8
 800d0d0:	4649      	mov	r1, r9
 800d0d2:	f7f3 f8e3 	bl	800029c <__adddf3>
 800d0d6:	a33e      	add	r3, pc, #248	; (adr r3, 800d1d0 <__ieee754_pow+0x738>)
 800d0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0dc:	2000      	movs	r0, #0
 800d0de:	4604      	mov	r4, r0
 800d0e0:	460d      	mov	r5, r1
 800d0e2:	f7f3 fa91 	bl	8000608 <__aeabi_dmul>
 800d0e6:	4642      	mov	r2, r8
 800d0e8:	ec41 0b18 	vmov	d8, r0, r1
 800d0ec:	464b      	mov	r3, r9
 800d0ee:	4620      	mov	r0, r4
 800d0f0:	4629      	mov	r1, r5
 800d0f2:	f7f3 f8d1 	bl	8000298 <__aeabi_dsub>
 800d0f6:	4602      	mov	r2, r0
 800d0f8:	460b      	mov	r3, r1
 800d0fa:	4630      	mov	r0, r6
 800d0fc:	4639      	mov	r1, r7
 800d0fe:	f7f3 f8cb 	bl	8000298 <__aeabi_dsub>
 800d102:	a335      	add	r3, pc, #212	; (adr r3, 800d1d8 <__ieee754_pow+0x740>)
 800d104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d108:	f7f3 fa7e 	bl	8000608 <__aeabi_dmul>
 800d10c:	a334      	add	r3, pc, #208	; (adr r3, 800d1e0 <__ieee754_pow+0x748>)
 800d10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d112:	4606      	mov	r6, r0
 800d114:	460f      	mov	r7, r1
 800d116:	4620      	mov	r0, r4
 800d118:	4629      	mov	r1, r5
 800d11a:	f7f3 fa75 	bl	8000608 <__aeabi_dmul>
 800d11e:	4602      	mov	r2, r0
 800d120:	460b      	mov	r3, r1
 800d122:	4630      	mov	r0, r6
 800d124:	4639      	mov	r1, r7
 800d126:	f7f3 f8b9 	bl	800029c <__adddf3>
 800d12a:	9a07      	ldr	r2, [sp, #28]
 800d12c:	4b37      	ldr	r3, [pc, #220]	; (800d20c <__ieee754_pow+0x774>)
 800d12e:	4413      	add	r3, r2
 800d130:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d134:	f7f3 f8b2 	bl	800029c <__adddf3>
 800d138:	4682      	mov	sl, r0
 800d13a:	9805      	ldr	r0, [sp, #20]
 800d13c:	468b      	mov	fp, r1
 800d13e:	f7f3 f9f9 	bl	8000534 <__aeabi_i2d>
 800d142:	9a07      	ldr	r2, [sp, #28]
 800d144:	4b32      	ldr	r3, [pc, #200]	; (800d210 <__ieee754_pow+0x778>)
 800d146:	4413      	add	r3, r2
 800d148:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d14c:	4606      	mov	r6, r0
 800d14e:	460f      	mov	r7, r1
 800d150:	4652      	mov	r2, sl
 800d152:	465b      	mov	r3, fp
 800d154:	ec51 0b18 	vmov	r0, r1, d8
 800d158:	f7f3 f8a0 	bl	800029c <__adddf3>
 800d15c:	4642      	mov	r2, r8
 800d15e:	464b      	mov	r3, r9
 800d160:	f7f3 f89c 	bl	800029c <__adddf3>
 800d164:	4632      	mov	r2, r6
 800d166:	463b      	mov	r3, r7
 800d168:	f7f3 f898 	bl	800029c <__adddf3>
 800d16c:	2000      	movs	r0, #0
 800d16e:	4632      	mov	r2, r6
 800d170:	463b      	mov	r3, r7
 800d172:	4604      	mov	r4, r0
 800d174:	460d      	mov	r5, r1
 800d176:	f7f3 f88f 	bl	8000298 <__aeabi_dsub>
 800d17a:	4642      	mov	r2, r8
 800d17c:	464b      	mov	r3, r9
 800d17e:	f7f3 f88b 	bl	8000298 <__aeabi_dsub>
 800d182:	ec53 2b18 	vmov	r2, r3, d8
 800d186:	f7f3 f887 	bl	8000298 <__aeabi_dsub>
 800d18a:	4602      	mov	r2, r0
 800d18c:	460b      	mov	r3, r1
 800d18e:	4650      	mov	r0, sl
 800d190:	4659      	mov	r1, fp
 800d192:	e610      	b.n	800cdb6 <__ieee754_pow+0x31e>
 800d194:	2401      	movs	r4, #1
 800d196:	e6a1      	b.n	800cedc <__ieee754_pow+0x444>
 800d198:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800d1e8 <__ieee754_pow+0x750>
 800d19c:	e617      	b.n	800cdce <__ieee754_pow+0x336>
 800d19e:	bf00      	nop
 800d1a0:	4a454eef 	.word	0x4a454eef
 800d1a4:	3fca7e28 	.word	0x3fca7e28
 800d1a8:	93c9db65 	.word	0x93c9db65
 800d1ac:	3fcd864a 	.word	0x3fcd864a
 800d1b0:	a91d4101 	.word	0xa91d4101
 800d1b4:	3fd17460 	.word	0x3fd17460
 800d1b8:	518f264d 	.word	0x518f264d
 800d1bc:	3fd55555 	.word	0x3fd55555
 800d1c0:	db6fabff 	.word	0xdb6fabff
 800d1c4:	3fdb6db6 	.word	0x3fdb6db6
 800d1c8:	33333303 	.word	0x33333303
 800d1cc:	3fe33333 	.word	0x3fe33333
 800d1d0:	e0000000 	.word	0xe0000000
 800d1d4:	3feec709 	.word	0x3feec709
 800d1d8:	dc3a03fd 	.word	0xdc3a03fd
 800d1dc:	3feec709 	.word	0x3feec709
 800d1e0:	145b01f5 	.word	0x145b01f5
 800d1e4:	be3e2fe0 	.word	0xbe3e2fe0
 800d1e8:	00000000 	.word	0x00000000
 800d1ec:	3ff00000 	.word	0x3ff00000
 800d1f0:	7ff00000 	.word	0x7ff00000
 800d1f4:	43400000 	.word	0x43400000
 800d1f8:	0003988e 	.word	0x0003988e
 800d1fc:	000bb679 	.word	0x000bb679
 800d200:	0800da70 	.word	0x0800da70
 800d204:	3ff00000 	.word	0x3ff00000
 800d208:	40080000 	.word	0x40080000
 800d20c:	0800da90 	.word	0x0800da90
 800d210:	0800da80 	.word	0x0800da80
 800d214:	a3b3      	add	r3, pc, #716	; (adr r3, 800d4e4 <__ieee754_pow+0xa4c>)
 800d216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d21a:	4640      	mov	r0, r8
 800d21c:	4649      	mov	r1, r9
 800d21e:	f7f3 f83d 	bl	800029c <__adddf3>
 800d222:	4622      	mov	r2, r4
 800d224:	ec41 0b1a 	vmov	d10, r0, r1
 800d228:	462b      	mov	r3, r5
 800d22a:	4630      	mov	r0, r6
 800d22c:	4639      	mov	r1, r7
 800d22e:	f7f3 f833 	bl	8000298 <__aeabi_dsub>
 800d232:	4602      	mov	r2, r0
 800d234:	460b      	mov	r3, r1
 800d236:	ec51 0b1a 	vmov	r0, r1, d10
 800d23a:	f7f3 fc75 	bl	8000b28 <__aeabi_dcmpgt>
 800d23e:	2800      	cmp	r0, #0
 800d240:	f47f ae04 	bne.w	800ce4c <__ieee754_pow+0x3b4>
 800d244:	4aa2      	ldr	r2, [pc, #648]	; (800d4d0 <__ieee754_pow+0xa38>)
 800d246:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d24a:	4293      	cmp	r3, r2
 800d24c:	f340 8107 	ble.w	800d45e <__ieee754_pow+0x9c6>
 800d250:	151b      	asrs	r3, r3, #20
 800d252:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800d256:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800d25a:	fa4a fa03 	asr.w	sl, sl, r3
 800d25e:	44da      	add	sl, fp
 800d260:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800d264:	489b      	ldr	r0, [pc, #620]	; (800d4d4 <__ieee754_pow+0xa3c>)
 800d266:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d26a:	4108      	asrs	r0, r1
 800d26c:	ea00 030a 	and.w	r3, r0, sl
 800d270:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800d274:	f1c1 0114 	rsb	r1, r1, #20
 800d278:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800d27c:	fa4a fa01 	asr.w	sl, sl, r1
 800d280:	f1bb 0f00 	cmp.w	fp, #0
 800d284:	f04f 0200 	mov.w	r2, #0
 800d288:	4620      	mov	r0, r4
 800d28a:	4629      	mov	r1, r5
 800d28c:	bfb8      	it	lt
 800d28e:	f1ca 0a00 	rsblt	sl, sl, #0
 800d292:	f7f3 f801 	bl	8000298 <__aeabi_dsub>
 800d296:	ec41 0b19 	vmov	d9, r0, r1
 800d29a:	4642      	mov	r2, r8
 800d29c:	464b      	mov	r3, r9
 800d29e:	ec51 0b19 	vmov	r0, r1, d9
 800d2a2:	f7f2 fffb 	bl	800029c <__adddf3>
 800d2a6:	a37a      	add	r3, pc, #488	; (adr r3, 800d490 <__ieee754_pow+0x9f8>)
 800d2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ac:	2000      	movs	r0, #0
 800d2ae:	4604      	mov	r4, r0
 800d2b0:	460d      	mov	r5, r1
 800d2b2:	f7f3 f9a9 	bl	8000608 <__aeabi_dmul>
 800d2b6:	ec53 2b19 	vmov	r2, r3, d9
 800d2ba:	4606      	mov	r6, r0
 800d2bc:	460f      	mov	r7, r1
 800d2be:	4620      	mov	r0, r4
 800d2c0:	4629      	mov	r1, r5
 800d2c2:	f7f2 ffe9 	bl	8000298 <__aeabi_dsub>
 800d2c6:	4602      	mov	r2, r0
 800d2c8:	460b      	mov	r3, r1
 800d2ca:	4640      	mov	r0, r8
 800d2cc:	4649      	mov	r1, r9
 800d2ce:	f7f2 ffe3 	bl	8000298 <__aeabi_dsub>
 800d2d2:	a371      	add	r3, pc, #452	; (adr r3, 800d498 <__ieee754_pow+0xa00>)
 800d2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2d8:	f7f3 f996 	bl	8000608 <__aeabi_dmul>
 800d2dc:	a370      	add	r3, pc, #448	; (adr r3, 800d4a0 <__ieee754_pow+0xa08>)
 800d2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2e2:	4680      	mov	r8, r0
 800d2e4:	4689      	mov	r9, r1
 800d2e6:	4620      	mov	r0, r4
 800d2e8:	4629      	mov	r1, r5
 800d2ea:	f7f3 f98d 	bl	8000608 <__aeabi_dmul>
 800d2ee:	4602      	mov	r2, r0
 800d2f0:	460b      	mov	r3, r1
 800d2f2:	4640      	mov	r0, r8
 800d2f4:	4649      	mov	r1, r9
 800d2f6:	f7f2 ffd1 	bl	800029c <__adddf3>
 800d2fa:	4604      	mov	r4, r0
 800d2fc:	460d      	mov	r5, r1
 800d2fe:	4602      	mov	r2, r0
 800d300:	460b      	mov	r3, r1
 800d302:	4630      	mov	r0, r6
 800d304:	4639      	mov	r1, r7
 800d306:	f7f2 ffc9 	bl	800029c <__adddf3>
 800d30a:	4632      	mov	r2, r6
 800d30c:	463b      	mov	r3, r7
 800d30e:	4680      	mov	r8, r0
 800d310:	4689      	mov	r9, r1
 800d312:	f7f2 ffc1 	bl	8000298 <__aeabi_dsub>
 800d316:	4602      	mov	r2, r0
 800d318:	460b      	mov	r3, r1
 800d31a:	4620      	mov	r0, r4
 800d31c:	4629      	mov	r1, r5
 800d31e:	f7f2 ffbb 	bl	8000298 <__aeabi_dsub>
 800d322:	4642      	mov	r2, r8
 800d324:	4606      	mov	r6, r0
 800d326:	460f      	mov	r7, r1
 800d328:	464b      	mov	r3, r9
 800d32a:	4640      	mov	r0, r8
 800d32c:	4649      	mov	r1, r9
 800d32e:	f7f3 f96b 	bl	8000608 <__aeabi_dmul>
 800d332:	a35d      	add	r3, pc, #372	; (adr r3, 800d4a8 <__ieee754_pow+0xa10>)
 800d334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d338:	4604      	mov	r4, r0
 800d33a:	460d      	mov	r5, r1
 800d33c:	f7f3 f964 	bl	8000608 <__aeabi_dmul>
 800d340:	a35b      	add	r3, pc, #364	; (adr r3, 800d4b0 <__ieee754_pow+0xa18>)
 800d342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d346:	f7f2 ffa7 	bl	8000298 <__aeabi_dsub>
 800d34a:	4622      	mov	r2, r4
 800d34c:	462b      	mov	r3, r5
 800d34e:	f7f3 f95b 	bl	8000608 <__aeabi_dmul>
 800d352:	a359      	add	r3, pc, #356	; (adr r3, 800d4b8 <__ieee754_pow+0xa20>)
 800d354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d358:	f7f2 ffa0 	bl	800029c <__adddf3>
 800d35c:	4622      	mov	r2, r4
 800d35e:	462b      	mov	r3, r5
 800d360:	f7f3 f952 	bl	8000608 <__aeabi_dmul>
 800d364:	a356      	add	r3, pc, #344	; (adr r3, 800d4c0 <__ieee754_pow+0xa28>)
 800d366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d36a:	f7f2 ff95 	bl	8000298 <__aeabi_dsub>
 800d36e:	4622      	mov	r2, r4
 800d370:	462b      	mov	r3, r5
 800d372:	f7f3 f949 	bl	8000608 <__aeabi_dmul>
 800d376:	a354      	add	r3, pc, #336	; (adr r3, 800d4c8 <__ieee754_pow+0xa30>)
 800d378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d37c:	f7f2 ff8e 	bl	800029c <__adddf3>
 800d380:	4622      	mov	r2, r4
 800d382:	462b      	mov	r3, r5
 800d384:	f7f3 f940 	bl	8000608 <__aeabi_dmul>
 800d388:	4602      	mov	r2, r0
 800d38a:	460b      	mov	r3, r1
 800d38c:	4640      	mov	r0, r8
 800d38e:	4649      	mov	r1, r9
 800d390:	f7f2 ff82 	bl	8000298 <__aeabi_dsub>
 800d394:	4604      	mov	r4, r0
 800d396:	460d      	mov	r5, r1
 800d398:	4602      	mov	r2, r0
 800d39a:	460b      	mov	r3, r1
 800d39c:	4640      	mov	r0, r8
 800d39e:	4649      	mov	r1, r9
 800d3a0:	f7f3 f932 	bl	8000608 <__aeabi_dmul>
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	ec41 0b19 	vmov	d9, r0, r1
 800d3aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d3ae:	4620      	mov	r0, r4
 800d3b0:	4629      	mov	r1, r5
 800d3b2:	f7f2 ff71 	bl	8000298 <__aeabi_dsub>
 800d3b6:	4602      	mov	r2, r0
 800d3b8:	460b      	mov	r3, r1
 800d3ba:	ec51 0b19 	vmov	r0, r1, d9
 800d3be:	f7f3 fa4d 	bl	800085c <__aeabi_ddiv>
 800d3c2:	4632      	mov	r2, r6
 800d3c4:	4604      	mov	r4, r0
 800d3c6:	460d      	mov	r5, r1
 800d3c8:	463b      	mov	r3, r7
 800d3ca:	4640      	mov	r0, r8
 800d3cc:	4649      	mov	r1, r9
 800d3ce:	f7f3 f91b 	bl	8000608 <__aeabi_dmul>
 800d3d2:	4632      	mov	r2, r6
 800d3d4:	463b      	mov	r3, r7
 800d3d6:	f7f2 ff61 	bl	800029c <__adddf3>
 800d3da:	4602      	mov	r2, r0
 800d3dc:	460b      	mov	r3, r1
 800d3de:	4620      	mov	r0, r4
 800d3e0:	4629      	mov	r1, r5
 800d3e2:	f7f2 ff59 	bl	8000298 <__aeabi_dsub>
 800d3e6:	4642      	mov	r2, r8
 800d3e8:	464b      	mov	r3, r9
 800d3ea:	f7f2 ff55 	bl	8000298 <__aeabi_dsub>
 800d3ee:	460b      	mov	r3, r1
 800d3f0:	4602      	mov	r2, r0
 800d3f2:	4939      	ldr	r1, [pc, #228]	; (800d4d8 <__ieee754_pow+0xa40>)
 800d3f4:	2000      	movs	r0, #0
 800d3f6:	f7f2 ff4f 	bl	8000298 <__aeabi_dsub>
 800d3fa:	ec41 0b10 	vmov	d0, r0, r1
 800d3fe:	ee10 3a90 	vmov	r3, s1
 800d402:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800d406:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d40a:	da2b      	bge.n	800d464 <__ieee754_pow+0x9cc>
 800d40c:	4650      	mov	r0, sl
 800d40e:	f000 f877 	bl	800d500 <scalbn>
 800d412:	ec51 0b10 	vmov	r0, r1, d0
 800d416:	ec53 2b18 	vmov	r2, r3, d8
 800d41a:	f7ff bbee 	b.w	800cbfa <__ieee754_pow+0x162>
 800d41e:	4b2f      	ldr	r3, [pc, #188]	; (800d4dc <__ieee754_pow+0xa44>)
 800d420:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d424:	429e      	cmp	r6, r3
 800d426:	f77f af0d 	ble.w	800d244 <__ieee754_pow+0x7ac>
 800d42a:	4b2d      	ldr	r3, [pc, #180]	; (800d4e0 <__ieee754_pow+0xa48>)
 800d42c:	440b      	add	r3, r1
 800d42e:	4303      	orrs	r3, r0
 800d430:	d009      	beq.n	800d446 <__ieee754_pow+0x9ae>
 800d432:	ec51 0b18 	vmov	r0, r1, d8
 800d436:	2200      	movs	r2, #0
 800d438:	2300      	movs	r3, #0
 800d43a:	f7f3 fb57 	bl	8000aec <__aeabi_dcmplt>
 800d43e:	3800      	subs	r0, #0
 800d440:	bf18      	it	ne
 800d442:	2001      	movne	r0, #1
 800d444:	e448      	b.n	800ccd8 <__ieee754_pow+0x240>
 800d446:	4622      	mov	r2, r4
 800d448:	462b      	mov	r3, r5
 800d44a:	f7f2 ff25 	bl	8000298 <__aeabi_dsub>
 800d44e:	4642      	mov	r2, r8
 800d450:	464b      	mov	r3, r9
 800d452:	f7f3 fb5f 	bl	8000b14 <__aeabi_dcmpge>
 800d456:	2800      	cmp	r0, #0
 800d458:	f43f aef4 	beq.w	800d244 <__ieee754_pow+0x7ac>
 800d45c:	e7e9      	b.n	800d432 <__ieee754_pow+0x99a>
 800d45e:	f04f 0a00 	mov.w	sl, #0
 800d462:	e71a      	b.n	800d29a <__ieee754_pow+0x802>
 800d464:	ec51 0b10 	vmov	r0, r1, d0
 800d468:	4619      	mov	r1, r3
 800d46a:	e7d4      	b.n	800d416 <__ieee754_pow+0x97e>
 800d46c:	491a      	ldr	r1, [pc, #104]	; (800d4d8 <__ieee754_pow+0xa40>)
 800d46e:	2000      	movs	r0, #0
 800d470:	f7ff bb31 	b.w	800cad6 <__ieee754_pow+0x3e>
 800d474:	2000      	movs	r0, #0
 800d476:	2100      	movs	r1, #0
 800d478:	f7ff bb2d 	b.w	800cad6 <__ieee754_pow+0x3e>
 800d47c:	4630      	mov	r0, r6
 800d47e:	4639      	mov	r1, r7
 800d480:	f7ff bb29 	b.w	800cad6 <__ieee754_pow+0x3e>
 800d484:	9204      	str	r2, [sp, #16]
 800d486:	f7ff bb7b 	b.w	800cb80 <__ieee754_pow+0xe8>
 800d48a:	2300      	movs	r3, #0
 800d48c:	f7ff bb65 	b.w	800cb5a <__ieee754_pow+0xc2>
 800d490:	00000000 	.word	0x00000000
 800d494:	3fe62e43 	.word	0x3fe62e43
 800d498:	fefa39ef 	.word	0xfefa39ef
 800d49c:	3fe62e42 	.word	0x3fe62e42
 800d4a0:	0ca86c39 	.word	0x0ca86c39
 800d4a4:	be205c61 	.word	0xbe205c61
 800d4a8:	72bea4d0 	.word	0x72bea4d0
 800d4ac:	3e663769 	.word	0x3e663769
 800d4b0:	c5d26bf1 	.word	0xc5d26bf1
 800d4b4:	3ebbbd41 	.word	0x3ebbbd41
 800d4b8:	af25de2c 	.word	0xaf25de2c
 800d4bc:	3f11566a 	.word	0x3f11566a
 800d4c0:	16bebd93 	.word	0x16bebd93
 800d4c4:	3f66c16c 	.word	0x3f66c16c
 800d4c8:	5555553e 	.word	0x5555553e
 800d4cc:	3fc55555 	.word	0x3fc55555
 800d4d0:	3fe00000 	.word	0x3fe00000
 800d4d4:	fff00000 	.word	0xfff00000
 800d4d8:	3ff00000 	.word	0x3ff00000
 800d4dc:	4090cbff 	.word	0x4090cbff
 800d4e0:	3f6f3400 	.word	0x3f6f3400
 800d4e4:	652b82fe 	.word	0x652b82fe
 800d4e8:	3c971547 	.word	0x3c971547

0800d4ec <fabs>:
 800d4ec:	ec51 0b10 	vmov	r0, r1, d0
 800d4f0:	ee10 2a10 	vmov	r2, s0
 800d4f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d4f8:	ec43 2b10 	vmov	d0, r2, r3
 800d4fc:	4770      	bx	lr
	...

0800d500 <scalbn>:
 800d500:	b570      	push	{r4, r5, r6, lr}
 800d502:	ec55 4b10 	vmov	r4, r5, d0
 800d506:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800d50a:	4606      	mov	r6, r0
 800d50c:	462b      	mov	r3, r5
 800d50e:	b999      	cbnz	r1, 800d538 <scalbn+0x38>
 800d510:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d514:	4323      	orrs	r3, r4
 800d516:	d03f      	beq.n	800d598 <scalbn+0x98>
 800d518:	4b35      	ldr	r3, [pc, #212]	; (800d5f0 <scalbn+0xf0>)
 800d51a:	4629      	mov	r1, r5
 800d51c:	ee10 0a10 	vmov	r0, s0
 800d520:	2200      	movs	r2, #0
 800d522:	f7f3 f871 	bl	8000608 <__aeabi_dmul>
 800d526:	4b33      	ldr	r3, [pc, #204]	; (800d5f4 <scalbn+0xf4>)
 800d528:	429e      	cmp	r6, r3
 800d52a:	4604      	mov	r4, r0
 800d52c:	460d      	mov	r5, r1
 800d52e:	da10      	bge.n	800d552 <scalbn+0x52>
 800d530:	a327      	add	r3, pc, #156	; (adr r3, 800d5d0 <scalbn+0xd0>)
 800d532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d536:	e01f      	b.n	800d578 <scalbn+0x78>
 800d538:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800d53c:	4291      	cmp	r1, r2
 800d53e:	d10c      	bne.n	800d55a <scalbn+0x5a>
 800d540:	ee10 2a10 	vmov	r2, s0
 800d544:	4620      	mov	r0, r4
 800d546:	4629      	mov	r1, r5
 800d548:	f7f2 fea8 	bl	800029c <__adddf3>
 800d54c:	4604      	mov	r4, r0
 800d54e:	460d      	mov	r5, r1
 800d550:	e022      	b.n	800d598 <scalbn+0x98>
 800d552:	460b      	mov	r3, r1
 800d554:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d558:	3936      	subs	r1, #54	; 0x36
 800d55a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800d55e:	4296      	cmp	r6, r2
 800d560:	dd0d      	ble.n	800d57e <scalbn+0x7e>
 800d562:	2d00      	cmp	r5, #0
 800d564:	a11c      	add	r1, pc, #112	; (adr r1, 800d5d8 <scalbn+0xd8>)
 800d566:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d56a:	da02      	bge.n	800d572 <scalbn+0x72>
 800d56c:	a11c      	add	r1, pc, #112	; (adr r1, 800d5e0 <scalbn+0xe0>)
 800d56e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d572:	a319      	add	r3, pc, #100	; (adr r3, 800d5d8 <scalbn+0xd8>)
 800d574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d578:	f7f3 f846 	bl	8000608 <__aeabi_dmul>
 800d57c:	e7e6      	b.n	800d54c <scalbn+0x4c>
 800d57e:	1872      	adds	r2, r6, r1
 800d580:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d584:	428a      	cmp	r2, r1
 800d586:	dcec      	bgt.n	800d562 <scalbn+0x62>
 800d588:	2a00      	cmp	r2, #0
 800d58a:	dd08      	ble.n	800d59e <scalbn+0x9e>
 800d58c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d590:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d594:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d598:	ec45 4b10 	vmov	d0, r4, r5
 800d59c:	bd70      	pop	{r4, r5, r6, pc}
 800d59e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d5a2:	da08      	bge.n	800d5b6 <scalbn+0xb6>
 800d5a4:	2d00      	cmp	r5, #0
 800d5a6:	a10a      	add	r1, pc, #40	; (adr r1, 800d5d0 <scalbn+0xd0>)
 800d5a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d5ac:	dac0      	bge.n	800d530 <scalbn+0x30>
 800d5ae:	a10e      	add	r1, pc, #56	; (adr r1, 800d5e8 <scalbn+0xe8>)
 800d5b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d5b4:	e7bc      	b.n	800d530 <scalbn+0x30>
 800d5b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d5ba:	3236      	adds	r2, #54	; 0x36
 800d5bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d5c0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d5c4:	4620      	mov	r0, r4
 800d5c6:	4b0c      	ldr	r3, [pc, #48]	; (800d5f8 <scalbn+0xf8>)
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	e7d5      	b.n	800d578 <scalbn+0x78>
 800d5cc:	f3af 8000 	nop.w
 800d5d0:	c2f8f359 	.word	0xc2f8f359
 800d5d4:	01a56e1f 	.word	0x01a56e1f
 800d5d8:	8800759c 	.word	0x8800759c
 800d5dc:	7e37e43c 	.word	0x7e37e43c
 800d5e0:	8800759c 	.word	0x8800759c
 800d5e4:	fe37e43c 	.word	0xfe37e43c
 800d5e8:	c2f8f359 	.word	0xc2f8f359
 800d5ec:	81a56e1f 	.word	0x81a56e1f
 800d5f0:	43500000 	.word	0x43500000
 800d5f4:	ffff3cb0 	.word	0xffff3cb0
 800d5f8:	3c900000 	.word	0x3c900000

0800d5fc <with_errno>:
 800d5fc:	b570      	push	{r4, r5, r6, lr}
 800d5fe:	4604      	mov	r4, r0
 800d600:	460d      	mov	r5, r1
 800d602:	4616      	mov	r6, r2
 800d604:	f7fe fad8 	bl	800bbb8 <__errno>
 800d608:	4629      	mov	r1, r5
 800d60a:	6006      	str	r6, [r0, #0]
 800d60c:	4620      	mov	r0, r4
 800d60e:	bd70      	pop	{r4, r5, r6, pc}

0800d610 <xflow>:
 800d610:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d612:	4614      	mov	r4, r2
 800d614:	461d      	mov	r5, r3
 800d616:	b108      	cbz	r0, 800d61c <xflow+0xc>
 800d618:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d61c:	e9cd 2300 	strd	r2, r3, [sp]
 800d620:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d624:	4620      	mov	r0, r4
 800d626:	4629      	mov	r1, r5
 800d628:	f7f2 ffee 	bl	8000608 <__aeabi_dmul>
 800d62c:	2222      	movs	r2, #34	; 0x22
 800d62e:	b003      	add	sp, #12
 800d630:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d634:	f7ff bfe2 	b.w	800d5fc <with_errno>

0800d638 <__math_uflow>:
 800d638:	b508      	push	{r3, lr}
 800d63a:	2200      	movs	r2, #0
 800d63c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d640:	f7ff ffe6 	bl	800d610 <xflow>
 800d644:	ec41 0b10 	vmov	d0, r0, r1
 800d648:	bd08      	pop	{r3, pc}

0800d64a <__math_oflow>:
 800d64a:	b508      	push	{r3, lr}
 800d64c:	2200      	movs	r2, #0
 800d64e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800d652:	f7ff ffdd 	bl	800d610 <xflow>
 800d656:	ec41 0b10 	vmov	d0, r0, r1
 800d65a:	bd08      	pop	{r3, pc}

0800d65c <__ieee754_sqrt>:
 800d65c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d660:	ec55 4b10 	vmov	r4, r5, d0
 800d664:	4e67      	ldr	r6, [pc, #412]	; (800d804 <__ieee754_sqrt+0x1a8>)
 800d666:	43ae      	bics	r6, r5
 800d668:	ee10 0a10 	vmov	r0, s0
 800d66c:	ee10 2a10 	vmov	r2, s0
 800d670:	4629      	mov	r1, r5
 800d672:	462b      	mov	r3, r5
 800d674:	d10d      	bne.n	800d692 <__ieee754_sqrt+0x36>
 800d676:	f7f2 ffc7 	bl	8000608 <__aeabi_dmul>
 800d67a:	4602      	mov	r2, r0
 800d67c:	460b      	mov	r3, r1
 800d67e:	4620      	mov	r0, r4
 800d680:	4629      	mov	r1, r5
 800d682:	f7f2 fe0b 	bl	800029c <__adddf3>
 800d686:	4604      	mov	r4, r0
 800d688:	460d      	mov	r5, r1
 800d68a:	ec45 4b10 	vmov	d0, r4, r5
 800d68e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d692:	2d00      	cmp	r5, #0
 800d694:	dc0b      	bgt.n	800d6ae <__ieee754_sqrt+0x52>
 800d696:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d69a:	4326      	orrs	r6, r4
 800d69c:	d0f5      	beq.n	800d68a <__ieee754_sqrt+0x2e>
 800d69e:	b135      	cbz	r5, 800d6ae <__ieee754_sqrt+0x52>
 800d6a0:	f7f2 fdfa 	bl	8000298 <__aeabi_dsub>
 800d6a4:	4602      	mov	r2, r0
 800d6a6:	460b      	mov	r3, r1
 800d6a8:	f7f3 f8d8 	bl	800085c <__aeabi_ddiv>
 800d6ac:	e7eb      	b.n	800d686 <__ieee754_sqrt+0x2a>
 800d6ae:	1509      	asrs	r1, r1, #20
 800d6b0:	f000 808d 	beq.w	800d7ce <__ieee754_sqrt+0x172>
 800d6b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d6b8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800d6bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d6c0:	07c9      	lsls	r1, r1, #31
 800d6c2:	bf5c      	itt	pl
 800d6c4:	005b      	lslpl	r3, r3, #1
 800d6c6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800d6ca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d6ce:	bf58      	it	pl
 800d6d0:	0052      	lslpl	r2, r2, #1
 800d6d2:	2500      	movs	r5, #0
 800d6d4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d6d8:	1076      	asrs	r6, r6, #1
 800d6da:	0052      	lsls	r2, r2, #1
 800d6dc:	f04f 0e16 	mov.w	lr, #22
 800d6e0:	46ac      	mov	ip, r5
 800d6e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d6e6:	eb0c 0001 	add.w	r0, ip, r1
 800d6ea:	4298      	cmp	r0, r3
 800d6ec:	bfde      	ittt	le
 800d6ee:	1a1b      	suble	r3, r3, r0
 800d6f0:	eb00 0c01 	addle.w	ip, r0, r1
 800d6f4:	186d      	addle	r5, r5, r1
 800d6f6:	005b      	lsls	r3, r3, #1
 800d6f8:	f1be 0e01 	subs.w	lr, lr, #1
 800d6fc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d700:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d704:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d708:	d1ed      	bne.n	800d6e6 <__ieee754_sqrt+0x8a>
 800d70a:	4674      	mov	r4, lr
 800d70c:	2720      	movs	r7, #32
 800d70e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800d712:	4563      	cmp	r3, ip
 800d714:	eb01 000e 	add.w	r0, r1, lr
 800d718:	dc02      	bgt.n	800d720 <__ieee754_sqrt+0xc4>
 800d71a:	d113      	bne.n	800d744 <__ieee754_sqrt+0xe8>
 800d71c:	4290      	cmp	r0, r2
 800d71e:	d811      	bhi.n	800d744 <__ieee754_sqrt+0xe8>
 800d720:	2800      	cmp	r0, #0
 800d722:	eb00 0e01 	add.w	lr, r0, r1
 800d726:	da57      	bge.n	800d7d8 <__ieee754_sqrt+0x17c>
 800d728:	f1be 0f00 	cmp.w	lr, #0
 800d72c:	db54      	blt.n	800d7d8 <__ieee754_sqrt+0x17c>
 800d72e:	f10c 0801 	add.w	r8, ip, #1
 800d732:	eba3 030c 	sub.w	r3, r3, ip
 800d736:	4290      	cmp	r0, r2
 800d738:	bf88      	it	hi
 800d73a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d73e:	1a12      	subs	r2, r2, r0
 800d740:	440c      	add	r4, r1
 800d742:	46c4      	mov	ip, r8
 800d744:	005b      	lsls	r3, r3, #1
 800d746:	3f01      	subs	r7, #1
 800d748:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d74c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d750:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d754:	d1dd      	bne.n	800d712 <__ieee754_sqrt+0xb6>
 800d756:	4313      	orrs	r3, r2
 800d758:	d01b      	beq.n	800d792 <__ieee754_sqrt+0x136>
 800d75a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800d808 <__ieee754_sqrt+0x1ac>
 800d75e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800d80c <__ieee754_sqrt+0x1b0>
 800d762:	e9da 0100 	ldrd	r0, r1, [sl]
 800d766:	e9db 2300 	ldrd	r2, r3, [fp]
 800d76a:	f7f2 fd95 	bl	8000298 <__aeabi_dsub>
 800d76e:	e9da 8900 	ldrd	r8, r9, [sl]
 800d772:	4602      	mov	r2, r0
 800d774:	460b      	mov	r3, r1
 800d776:	4640      	mov	r0, r8
 800d778:	4649      	mov	r1, r9
 800d77a:	f7f3 f9c1 	bl	8000b00 <__aeabi_dcmple>
 800d77e:	b140      	cbz	r0, 800d792 <__ieee754_sqrt+0x136>
 800d780:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d784:	e9da 0100 	ldrd	r0, r1, [sl]
 800d788:	e9db 2300 	ldrd	r2, r3, [fp]
 800d78c:	d126      	bne.n	800d7dc <__ieee754_sqrt+0x180>
 800d78e:	3501      	adds	r5, #1
 800d790:	463c      	mov	r4, r7
 800d792:	106a      	asrs	r2, r5, #1
 800d794:	0863      	lsrs	r3, r4, #1
 800d796:	07e9      	lsls	r1, r5, #31
 800d798:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800d79c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800d7a0:	bf48      	it	mi
 800d7a2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800d7a6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800d7aa:	461c      	mov	r4, r3
 800d7ac:	e76d      	b.n	800d68a <__ieee754_sqrt+0x2e>
 800d7ae:	0ad3      	lsrs	r3, r2, #11
 800d7b0:	3815      	subs	r0, #21
 800d7b2:	0552      	lsls	r2, r2, #21
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d0fa      	beq.n	800d7ae <__ieee754_sqrt+0x152>
 800d7b8:	02dc      	lsls	r4, r3, #11
 800d7ba:	d50a      	bpl.n	800d7d2 <__ieee754_sqrt+0x176>
 800d7bc:	f1c1 0420 	rsb	r4, r1, #32
 800d7c0:	fa22 f404 	lsr.w	r4, r2, r4
 800d7c4:	1e4d      	subs	r5, r1, #1
 800d7c6:	408a      	lsls	r2, r1
 800d7c8:	4323      	orrs	r3, r4
 800d7ca:	1b41      	subs	r1, r0, r5
 800d7cc:	e772      	b.n	800d6b4 <__ieee754_sqrt+0x58>
 800d7ce:	4608      	mov	r0, r1
 800d7d0:	e7f0      	b.n	800d7b4 <__ieee754_sqrt+0x158>
 800d7d2:	005b      	lsls	r3, r3, #1
 800d7d4:	3101      	adds	r1, #1
 800d7d6:	e7ef      	b.n	800d7b8 <__ieee754_sqrt+0x15c>
 800d7d8:	46e0      	mov	r8, ip
 800d7da:	e7aa      	b.n	800d732 <__ieee754_sqrt+0xd6>
 800d7dc:	f7f2 fd5e 	bl	800029c <__adddf3>
 800d7e0:	e9da 8900 	ldrd	r8, r9, [sl]
 800d7e4:	4602      	mov	r2, r0
 800d7e6:	460b      	mov	r3, r1
 800d7e8:	4640      	mov	r0, r8
 800d7ea:	4649      	mov	r1, r9
 800d7ec:	f7f3 f97e 	bl	8000aec <__aeabi_dcmplt>
 800d7f0:	b120      	cbz	r0, 800d7fc <__ieee754_sqrt+0x1a0>
 800d7f2:	1ca0      	adds	r0, r4, #2
 800d7f4:	bf08      	it	eq
 800d7f6:	3501      	addeq	r5, #1
 800d7f8:	3402      	adds	r4, #2
 800d7fa:	e7ca      	b.n	800d792 <__ieee754_sqrt+0x136>
 800d7fc:	3401      	adds	r4, #1
 800d7fe:	f024 0401 	bic.w	r4, r4, #1
 800d802:	e7c6      	b.n	800d792 <__ieee754_sqrt+0x136>
 800d804:	7ff00000 	.word	0x7ff00000
 800d808:	20000158 	.word	0x20000158
 800d80c:	20000160 	.word	0x20000160

0800d810 <_init>:
 800d810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d812:	bf00      	nop
 800d814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d816:	bc08      	pop	{r3}
 800d818:	469e      	mov	lr, r3
 800d81a:	4770      	bx	lr

0800d81c <_fini>:
 800d81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d81e:	bf00      	nop
 800d820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d822:	bc08      	pop	{r3}
 800d824:	469e      	mov	lr, r3
 800d826:	4770      	bx	lr
